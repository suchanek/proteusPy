<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">0</article-id>
<article-id pub-id-type="doi">N/A</article-id>
<title-group>
<article-title>proteusPy: A Python Package for Protein Structure and
Disulfide Bond Modeling and Analysis</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" equal-contrib="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0009-0009-0891-1507</contrib-id>
<name>
<surname>Suchanek</surname>
<given-names>Eric G</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Monterey Institute for Research in Astronomy, Marina,
USA</institution>
</institution-wrap>
</aff>
</contrib-group>
<volume>¿VOL?</volume>
<issue>¿ISSUE?</issue>
<fpage>¿PAGE?</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>Disulfide Bonds</kwd>
<kwd>Protein Structure</kwd>
<kwd>RCSB protein databank</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p><bold>proteusPy</bold> is a Python package specializing in the
  modeling and analysis of proteins of known structure with an initial
  focus on Disulfide Bonds. This package significantly extends the
  capabilities of the molecular modeling program <bold>proteus</bold>,
  (<xref alt="Pabo &amp; Suchanek, 1986" rid="ref-Pabo_1986" ref-type="bibr">Pabo
  &amp; Suchanek, 1986</xref>), and utilizes a new implementation of the
  <ext-link ext-link-type="uri" xlink:href="https://suchanek.github.io/proteusPy/proteusPy/turtle3D.html">Turtle3D</ext-link>
  class for disulfide and protein modeling. The
  <ext-link ext-link-type="uri" xlink:href="https://suchanek.github.io/proteusPy/proteusPy/Disulfide.html">Disulfide</ext-link>
  class implements methods to analyze the protein structure stabilizing
  element known as a <bold>Disulfide Bond</bold>.</p>
  <p>The work has resulted in a freely-accessible database of over
  120,494 disulfide bonds contained within 35,818 proteins in the
  <ext-link ext-link-type="uri" xlink:href="https:/www.rcsb.org">RCSB
  Protein Databank.</ext-link> The library is capable of extracting,
  comparing, building and visualizing the disulfides contained within
  the database, facilitating analysis and understanding.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of Need</title>
  <p>My primary motivation for implementing
  <monospace>proteusPy</monospace> was to revisit the
  <ext-link ext-link-type="uri" xlink:href="https://www.rcsb.org">RCSB
  Protein Databank</ext-link> and do a structural analysis of the
  disulfide bonds contained therein. This necessitated the creation an
  object-oriented database capable of introspection, analysis and
  display. The API
  (<xref alt="Suchanek, 2023a" rid="ref-API" ref-type="bibr">Suchanek,
  2023a</xref>) is available online at:
  <ext-link ext-link-type="uri" xlink:href="https://suchanek.github.io/proteusPy/proteusPy.html">https://suchanek.github.io/proteusPy/proteusPy.html</ext-link>
  and provides more details and numerous examples.</p>
</sec>
<sec id="requirements">
  <title>Requirements</title>
  <list list-type="order">
    <list-item>
      <p>PC running MacOS, Linux, Windows</p>
    </list-item>
    <list-item>
      <p>16 GB RAM</p>
    </list-item>
    <list-item>
      <p>2 GB disk space</p>
    </list-item>
  </list>
</sec>
<sec id="installation">
  <title>Installation</title>
  <p>It’s simplest to clone the repo via github since it contains all of
  the notebooks, test programs and raw Disulfide databases.</p>
  <list list-type="bullet">
    <list-item>
      <p>Install Anaconda:
      <ext-link ext-link-type="uri" xlink:href="http://anaconda.org">http://anaconda.org</ext-link></p>
    </list-item>
    <list-item>
      <p>Install git-lfs</p>
      <list list-type="bullet">
        <list-item>
          <p><ext-link ext-link-type="uri" xlink:href="https://help.github.com/en/github/managing-large-files/installing-git-large-file-storage">https://help.github.com/en/github/managing-large-files/installing-git-large-file-storage</ext-link></p>
        </list-item>
      </list>
    </list-item>
    <list-item>
      <p>From a shell prompt:
      <monospace>$ git clone https://github.com/suchanek/proteusPy/proteusPy.git       $ cd proteusPy       $ git-lfs track &quot;*.csv&quot; &quot;*.pkl&quot; &quot;*.mp4&quot;       $ conda env create --name proteusPy --file=proteusPy1.yml       $ conda activate proteusPy       $ pip install .       $ jupyter nbextension enable --py --sys-prefix widgetsnbextension       $ python -m ipykernel install --user --name proteusPy --display-name &quot;Python (proteusPy)&quot;</monospace></p>
    </list-item>
  </list>
</sec>
<sec id="general-usage">
  <title>General Usage</title>
  <p>Once the package is installed one can use the existing notebooks
  for analysis of the RCSB Disulfide database. The
  <ext-link ext-link-type="uri" xlink:href="https://github.com/suchanek/proteusPy/blob/master/notebooks/">notebooks</ext-link>
  directory contains all of my Jupyter notebooks and is a good place to
  start. The
  <ext-link ext-link-type="uri" xlink:href="https://github.com/suchanek/proteusPy/blob/master/notebooks/DisulfideAnalysis.ipynb">DisulfideAnalysis.ipynb</ext-link>
  notebook contains the first analysis paper. The
  <ext-link ext-link-type="uri" xlink:href="https://github.com/suchanek/proteusPy/tree/master/programs">programs</ext-link>
  subdirectory contains the primary programs for downloading the RCSB
  disulfide-containing structure files: *
  <ext-link ext-link-type="uri" xlink:href="https://github.com/suchanek/proteusPy/blob/master/programs/DisulfideDownloader.py">DisulfideDownloader.py</ext-link>:
  Downloads the raw RCSB structure files. *
  <ext-link ext-link-type="uri" xlink:href="https://github.com/suchanek/proteusPy/blob/master/programs/DisulfideExtractor.py">DisulfideExtractor.py</ext-link>:
  Extracts the disulfides and creating the database loaders *
  <ext-link ext-link-type="uri" xlink:href="https://github.com/suchanek/proteusPy/blob/master/programs/DisulfideExtractor.py">DisulfideClass_Analysis.py</ext-link>:
  Performs cluster analysis on the disulfide database.</p>
  <p>The first time one loads the database via
  <ext-link ext-link-type="uri" xlink:href="https://suchanek.github.io/proteusPy/proteusPy/DisulfideLoader.html#Load_PDB_SS">Load_PDB_SS()</ext-link>
  the system will attempt to download the full and subset database from
  my Google Drive. If this fails the system will attempt to rebuild the
  database from the repo’s <monospace>data</monospace> subdirectory (not
  the package’s). If you’ve downloaded from github this will work
  correctly. If you’ve installed from pyPi via
  <monospace>pip</monospace> it will fail.</p>
</sec>
<sec id="class-details">
  <title>Class Details</title>
  <p>The primary classes developed for <monospace>proteusPy</monospace>
  are described briefly below. Please see the
  <ext-link ext-link-type="uri" xlink:href="https://suchanek.github.io/proteusPy/proteusPy.html">API</ext-link>
  for details.</p>
</sec>
<sec id="disulfide">
  <title><ext-link ext-link-type="uri" xlink:href="https://suchanek.github.io/proteusPy/proteusPy/Disulfide.html">Disulfide</ext-link></title>
  <p>This class provides a Python object and methods representing a
  physical disulfide bond either extracted from the RCSB protein
  databank or a virtual one built using the
  <ext-link ext-link-type="uri" xlink:href="https://suchanek.github.io/proteusPy/proteusPy/turtle3D.html">Turtle3D</ext-link>
  class. The disulfide bond is an important intramolecular stabilizing
  structural element and is characterized by:</p>
  <list list-type="bullet">
    <list-item>
      <p>Atomic coordinates for the atoms <inline-formula><alternatives>
      <tex-math><![CDATA[N, C_{\alpha}]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>N</mml:mi><mml:mo>,</mml:mo><mml:msub><mml:mi>C</mml:mi><mml:mi>α</mml:mi></mml:msub></mml:mrow></mml:math></alternatives></inline-formula>,
      <inline-formula><alternatives>
      <tex-math><![CDATA[C_{\beta}]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>C</mml:mi><mml:mi>β</mml:mi></mml:msub></mml:math></alternatives></inline-formula>,
      <inline-formula><alternatives>
      <tex-math><![CDATA[C']]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>C</mml:mi><mml:mi>′</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>,
      <inline-formula><alternatives>
      <tex-math><![CDATA[S_\gamma]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>S</mml:mi><mml:mi>γ</mml:mi></mml:msub></mml:math></alternatives></inline-formula>
      for both residues. These are stored as both raw atomic coordinates
      as read from the RCSB file and internal local coordinates.</p>
    </list-item>
    <list-item>
      <p>The dihedral angles <inline-formula><alternatives>
      <tex-math><![CDATA[\chi_{1} - \chi_{5}]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:msub><mml:mi>χ</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>−</mml:mo><mml:msub><mml:mi>χ</mml:mi><mml:mn>5</mml:mn></mml:msub></mml:mrow></mml:math></alternatives></inline-formula>
      for the disulfide bond</p>
    </list-item>
    <list-item>
      <p>A name, by default:
      <monospace>{pdb_id}{prox_resnumb}{prox_chain}_{distal_resnum}{distal_chain}</monospace></p>
    </list-item>
    <list-item>
      <p>Proximal residue number</p>
    </list-item>
    <list-item>
      <p>Distal residue number</p>
    </list-item>
    <list-item>
      <p>Approximate bond torsional energy (kcal/mol):
      <disp-formula><alternatives>
      <tex-math><![CDATA[
        E_{kcal/mol} \approx 2.0 * cos(3.0 * \chi_{1}) + cos(3.0 * \chi_{5}) + cos(3.0 * \chi_{2}) +
      ]]></tex-math>
      <mml:math display="block" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:msub><mml:mi>E</mml:mi><mml:mrow><mml:mi>k</mml:mi><mml:mi>c</mml:mi><mml:mi>a</mml:mi><mml:mi>l</mml:mi><mml:mi>/</mml:mi><mml:mi>m</mml:mi><mml:mi>o</mml:mi><mml:mi>l</mml:mi></mml:mrow></mml:msub><mml:mo>≈</mml:mo><mml:mn>2.0</mml:mn><mml:mo>*</mml:mo><mml:mi>c</mml:mi><mml:mi>o</mml:mi><mml:mi>s</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mn>3.0</mml:mn><mml:mo>*</mml:mo><mml:msub><mml:mi>χ</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>+</mml:mo><mml:mi>c</mml:mi><mml:mi>o</mml:mi><mml:mi>s</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mn>3.0</mml:mn><mml:mo>*</mml:mo><mml:msub><mml:mi>χ</mml:mi><mml:mn>5</mml:mn></mml:msub><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>+</mml:mo><mml:mi>c</mml:mi><mml:mi>o</mml:mi><mml:mi>s</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mn>3.0</mml:mn><mml:mo>*</mml:mo><mml:msub><mml:mi>χ</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:math></alternatives></disp-formula>
      <disp-formula><alternatives>
      <tex-math><![CDATA[
        cos(3.0 * \chi_{4}) + 3.5 * cos(2.0 * \chi_{3}) + 0.6 * cos(3.0 * \chi_{3}) + 10.1
      ]]></tex-math>
      <mml:math display="block" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>c</mml:mi><mml:mi>o</mml:mi><mml:mi>s</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mn>3.0</mml:mn><mml:mo>*</mml:mo><mml:msub><mml:mi>χ</mml:mi><mml:mn>4</mml:mn></mml:msub><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>+</mml:mo><mml:mn>3.5</mml:mn><mml:mo>*</mml:mo><mml:mi>c</mml:mi><mml:mi>o</mml:mi><mml:mi>s</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mn>2.0</mml:mn><mml:mo>*</mml:mo><mml:msub><mml:mi>χ</mml:mi><mml:mn>3</mml:mn></mml:msub><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>+</mml:mo><mml:mn>0.6</mml:mn><mml:mo>*</mml:mo><mml:mi>c</mml:mi><mml:mi>o</mml:mi><mml:mi>s</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mn>3.0</mml:mn><mml:mo>*</mml:mo><mml:msub><mml:mi>χ</mml:mi><mml:mn>3</mml:mn></mml:msub><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>+</mml:mo><mml:mn>10.1</mml:mn></mml:mrow></mml:math></alternatives></disp-formula></p>
    </list-item>
    <list-item>
      <p>Euclidean length of the dihedral angles (degrees) defined as:
      <disp-formula><alternatives>
      <tex-math><![CDATA[\sqrt(\chi_{1}^{2} + \chi_{2}^{2} + \chi_{3}^{2} + \chi_{4}^{2} + \chi_{5}^{2})]]></tex-math>
      <mml:math display="block" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:msqrt><mml:mi>(</mml:mi></mml:msqrt><mml:msubsup><mml:mi>χ</mml:mi><mml:mn>1</mml:mn><mml:mn>2</mml:mn></mml:msubsup><mml:mo>+</mml:mo><mml:msubsup><mml:mi>χ</mml:mi><mml:mn>2</mml:mn><mml:mn>2</mml:mn></mml:msubsup><mml:mo>+</mml:mo><mml:msubsup><mml:mi>χ</mml:mi><mml:mn>3</mml:mn><mml:mn>2</mml:mn></mml:msubsup><mml:mo>+</mml:mo><mml:msubsup><mml:mi>χ</mml:mi><mml:mn>4</mml:mn><mml:mn>2</mml:mn></mml:msubsup><mml:mo>+</mml:mo><mml:msubsup><mml:mi>χ</mml:mi><mml:mn>5</mml:mn><mml:mn>2</mml:mn></mml:msubsup><mml:mo stretchy="false" form="postfix">)</mml:mo></mml:mrow></mml:math></alternatives></disp-formula></p>
    </list-item>
    <list-item>
      <p><inline-formula><alternatives>
      <tex-math><![CDATA[C_{\alpha} - C_{\alpha}]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:msub><mml:mi>C</mml:mi><mml:mi>α</mml:mi></mml:msub><mml:mo>−</mml:mo><mml:msub><mml:mi>C</mml:mi><mml:mi>α</mml:mi></mml:msub></mml:mrow></mml:math></alternatives></inline-formula>
      distance
      (<inline-formula><tex-math><![CDATA[\text{\normalfont\AA}]]></tex-math></inline-formula>)</p>
    </list-item>
    <list-item>
      <p><inline-formula><alternatives>
      <tex-math><![CDATA[C_{\beta} - C_{\beta}]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:msub><mml:mi>C</mml:mi><mml:mi>β</mml:mi></mml:msub><mml:mo>−</mml:mo><mml:msub><mml:mi>C</mml:mi><mml:mi>β</mml:mi></mml:msub></mml:mrow></mml:math></alternatives></inline-formula>
      distance
      (<inline-formula><tex-math><![CDATA[\text{\normalfont\AA}]]></tex-math></inline-formula>)</p>
    </list-item>
    <list-item>
      <p>The previous C’ and next N coordinates for both the proximal
      and distal residues. These are needed to calculate the backbone
      dihedral angles <inline-formula><alternatives>
      <tex-math><![CDATA[\phi]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>ϕ</mml:mi></mml:math></alternatives></inline-formula>,
      <inline-formula><alternatives>
      <tex-math><![CDATA[\psi]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>ψ</mml:mi></mml:math></alternatives></inline-formula>.</p>
    </list-item>
    <list-item>
      <p>Backbone dihedral angles <inline-formula><alternatives>
      <tex-math><![CDATA[\phi]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>ϕ</mml:mi></mml:math></alternatives></inline-formula>
      and <inline-formula><alternatives>
      <tex-math><![CDATA[\psi]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>ψ</mml:mi></mml:math></alternatives></inline-formula>,
      when possible. Not all structures are complete and in those cases
      the atoms needed may be undefined. In this case the
      <inline-formula><alternatives>
      <tex-math><![CDATA[\phi]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>ϕ</mml:mi></mml:math></alternatives></inline-formula>
      and <inline-formula><alternatives>
      <tex-math><![CDATA[\psi]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>ψ</mml:mi></mml:math></alternatives></inline-formula>
      angles are set to -180°.</p>
    </list-item>
  </list>
  <p>The class also provides 3D rendering capabilities using the
  excellent
  <ext-link ext-link-type="uri" xlink:href="https://pyvista.org">PyVista</ext-link>
  library, and can display disulfides interactively in a variety of
  display styles:</p>
  <list list-type="bullet">
    <list-item>
      <p>‘sb’ - Split Bonds style - bonds colored by their atom type</p>
    </list-item>
    <list-item>
      <p>‘bs’ - Ball and Stick style - split bond coloring with small
      atoms</p>
    </list-item>
    <list-item>
      <p>‘pd’ - Proximal/Distal style - bonds colored
      <italic>Red</italic> for proximal residue and
      <italic>Green</italic> for the distal residue.</p>
    </list-item>
    <list-item>
      <p>‘cpk’ - CPK style rendering, colored by atom type:</p>
      <list list-type="bullet">
        <list-item>
          <p>Carbon - Grey</p>
        </list-item>
        <list-item>
          <p>Nitrogen - Blue</p>
        </list-item>
        <list-item>
          <p>Sulfur - Yellow</p>
        </list-item>
        <list-item>
          <p>Oxygen - Red</p>
        </list-item>
        <list-item>
          <p>Hydrogen - White</p>
        </list-item>
      </list>
    </list-item>
  </list>
  <p>Individual renderings can be saved to a file and animations can be
  created. The <italic>cpk</italic> and <italic>bs</italic> styles are
  illustrated below:</p>
  <p><inline-graphic mimetype="image" mime-subtype="png" xlink:href="media/logo_cpk.png">
    <alt-text>cpk</alt-text>
  </inline-graphic>
  <inline-graphic mimetype="image" mime-subtype="png" xlink:href="media/logo_bs.png">
    <alt-text>bs</alt-text>
  </inline-graphic></p>
</sec>
<sec id="disulfideloader">
  <title><ext-link ext-link-type="uri" xlink:href="https://suchanek.github.io/proteusPy/proteusPy/DisulfideLoader.html">DisulfideLoader</ext-link></title>
  <p>This class represents the disulfide database itself and is its
  primary means of accession. Instantiation takes 2 parameters:
  <monospace>subset</monospace> and <monospace>verbose</monospace>.
  Given the size of the database, one can use the
  <monospace>subset</monospace> parameter to load the first 1000
  disulfides into memory. This facilitates quicker development and
  testing new functions. I recommend using at least a 16 GB machine to
  work with the full dataset.</p>
  <p>The entirety of the RCSB disulfide database is stored within the
  class via a
  <ext-link ext-link-type="uri" xlink:href="%22https://suchanek.github.io/proteusPy/proteusPy/DisulfideList.html%22">DisulfideList</ext-link>,
  a <monospace>Pandas</monospace> .csv file, and a
  <monospace>dict</monospace> of indices mapping the RCSB IDs into their
  respective list of disulfides. The datastructures allow simple, direct
  and flexible access to the disulfide structures contained within. This
  makes it possible to access the disulfides by array index, RCSB
  structure ID or disulfide name.</p>
  <p>Example:</p>
  <code language="python">  import proteusPy
  from proteusPy.Disulfide import Disulfide
  from proteusPy.DisulfideLoader import DisulfideLoader
  from proteusPy.DisulfideList import DisulfideList

  SS1 = DisulfideList([],'tmp1')
  SS2 = DisulfideList([],'tmp2')

  PDB_SS = DisulfideLoader(verbose=False, subset=True)

  # Accessing by index value:
  SS1 = PDB_SS[0]
  SS1
  &lt;Disulfide 4yys_22A_65A, Source: 4yys, Resolution: 1.35 Å&gt;

  # Accessing by PDB_ID returns a list of Disulfides:
  SS2 = PDB_SS['4yys']
  SS2
  [&lt;Disulfide 4yys_22A_65A, Source: 4yys, Resolution: 1.35 Å&gt;, 
  &lt;Disulfide 4yys_56A_98A, Source: 4yys, Resolution: 1.35 Å&gt;, 
  &lt;Disulfide 4yys_156A_207A, Source: 4yys, Resolution: 1.35 Å&gt;]

  # Accessing individual disulfides by their name:
  SS3 = PDB_SS['4yys_56A_98A']
  SS3
  &lt;Disulfide 4yys_56A_98A, Source: 4yys, Resolution: 1.35 Å&gt;

  # Finally, we can access disulfides by regular slicing:
  SSlist = SS2[:2]
  [&lt;Disulfide 4yys_56A_98A, Source: 4yys, Resolution: 1.35 Å&gt;, 
  &lt;Disulfide 4yys_156A_207A, Source: 4yys, Resolution: 1.35 Å&gt;]</code>
  <p>The class can also render Disulfides overlaid on a common
  coordinate system to a pyVista window using the
  <ext-link ext-link-type="uri" xlink:href="https://suchanek.github.io/proteusPy/proteusPy/DisulfideLoader.html#DisulfideLoader.display_overlay">DisulfideLoader.display_overlay()</ext-link>
  method.</p>
  <p><bold>NB:</bold> For typical usage one accesses the database via
  the <monospace>Load_PDB_SS()</monospace> function. This function loads
  the compressed database from its single source. Initializing a
  <monospace>DisulfideLoader()</monospace> object will load the
  individual torsions and disulfide <monospace>.pkl</monospace> files,
  builds the classlist structures, and writes the completely built
  object to a single <monospace>.pkl</monospace> file. This requires the
  raw <monospace>.pkl</monospace> files created by the download process.
  These files are contained in the repository
  <monospace>data</monospace> directory.</p>
</sec>
<sec id="turtle3d">
  <title><ext-link ext-link-type="uri" xlink:href="https://suchanek.github.io/proteusPy/proteusPy/turtle3D.html">turtle3D</ext-link></title>
  <p>The <monospace>turtle3D</monospace> class represents an object that
  maintains a <italic>local coordinate system</italic> in three
  dimensional space. This coordinate system consists of:</p>
  <list list-type="bullet">
    <list-item>
      <p>A Position in 3D space</p>
    </list-item>
    <list-item>
      <p>A Heading Vector</p>
    </list-item>
    <list-item>
      <p>A Left Vector</p>
    </list-item>
    <list-item>
      <p>An Up Vector</p>
    </list-item>
  </list>
  <p>The Heading, Left and Up vectors are unit vectors that define the
  object’s orientation in a <italic>local</italic> coordinate frame. The
  Turtle developed in <monospace>proteusPy</monospace> is based on the
  excellent book by Abelson:
  (<xref alt="Abelson &amp; DiSessa, 1986" rid="ref-Abelson_DiSessa_1986" ref-type="bibr">Abelson
  &amp; DiSessa, 1986</xref>). The
  <ext-link ext-link-type="uri" xlink:href="%22https://suchanek.github.io/proteusPy/proteusPy/turtle3D.html#Turtle3D.to_local%22">to_local</ext-link>
  and
  <ext-link ext-link-type="uri" xlink:href="%22https://suchanek.github.io/proteusPy/proteusPy/turtle3D.html#Turtle3D.to_global%22">to_global</ext-link>
  methods convert between these two. These methods make it possible to
  readily compare different disulfides by:</p>
  <list list-type="order">
    <list-item>
      <p>Orienting the turtle at the disulfide’s proximal residue in a
      standard orientation.</p>
    </list-item>
    <list-item>
      <p>Converting the global coordinates of the disulfide as read from
      the RCSB into local coordinates.</p>
    </list-item>
    <list-item>
      <p>Saving all of the local coordinates with the raw
      coordinates</p>
    </list-item>
    <list-item>
      <p>Performing distance and angle calculations</p>
    </list-item>
  </list>
  <p>By implementing the functions <monospace>Move</monospace>,
  <monospace>Roll</monospace>, <monospace>Yaw</monospace>,
  <monospace>Pitch</monospace> and <monospace>Turn</monospace> the
  turtle is capable of movement in a three-dimensional space. See
  (<xref alt="Pabo &amp; Suchanek, 1986" rid="ref-Pabo_1986" ref-type="bibr">Pabo
  &amp; Suchanek, 1986</xref>) for more details.</p>
  <p>The turtle has several molecule-specific functions including
  <ext-link ext-link-type="uri" xlink:href="%22https://suchanek.github.io/proteusPy/proteusPy/turtle3D.html#Turtle3D.orient_at_residue%22">orient_at_residue</ext-link>
  and
  <ext-link ext-link-type="uri" xlink:href="%22https://suchanek.github.io/proteusPy/proteusPy/turtle3D.html#Turtle3D.orient_from_backbone%22">orient_from_backbone</ext-link>.
  These routines make it possible to build protein backbones of
  arbitrary conformation and to readily add sidechains to modeled
  structures.</p>
</sec>
<sec id="examples">
  <title>Examples</title>
  <p>I illustrate a few use cases for the package below. See the
  notebooks for more examples.</p>
  <sec id="find-the-lowest-and-highest-energy-disulfides-present-in-the-database">
    <title>Find the lowest and highest energy disulfides present in the
    database</title>
    <code language="python"># default parameters will read from the package itself.

PDB_SS = Load_PDB_SS(verbose=False, subset=False)

# display the best and worst SS

ssMin, ssMax = PDB_SS.SSList.minmax_energy()
minmaxlist = DisulfideList([ssMin, ssMax], 'mm')
minmaxlist.display(style='bs', light=True)</code>
    <fig>
      <caption><p>minmax</p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="media/minmax.png" />
    </fig>
  </sec>
  <sec id="find-disulfides-within-10-textnormalfontaa-rms-in-torsional-space-of-the-lowest-energy-structure">
    <title>Find disulfides within 10
    <inline-formula><tex-math><![CDATA[\text{\normalfont\AA}]]></tex-math></inline-formula>
    RMS in torsional space of the lowest energy structure</title>
    <p>In this example we load the disulfide database, find the
    disulfides with the lowest and highest energies, and then find the
    nearest conformational neighbors. Finally, we display the neighbors
    overlaid against a common reference frame.</p>
    <code language="python">import proteusPy
from proteusPy.DisulfideLoader import DisulfideLoader
from proteusPy.DisulfideList import DisulfideList
from proteusPy.Disulfide import Disulfide

PDB_SS = None
PDB_SS = Load_PDB_SS(verbose=False, subset=True)
ss_list = DisulfideList([], 'tmp')

# We point to the complete list to search for lowest and highest energies.
sslist = PDB_SS.SSList

# Return the minimum and maximum energy structures. We ignore tha maximum in this case.
ssmin_enrg, _ = PDB_SS.SSList.minmax_energy()

# Make an empty list and find the nearest neighbors within 10 degrees avg RMS in
# sidechain dihedral angle space.

low_energy_neighbors = DisulfideList([],'Neighbors')
low_energy_neighbors = ssmin_enrg.Torsion_neighbors(sslist, 10)

# Display the number found, and then display them overlaid onto their common reference frame.

tot = low_energy_neighbors.length
low_energy_neighbors.display_overlay()</code>
    <p>18</p>
    <fig>
      <caption><p>min_overlay</p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="media/min_overlay.png" />
    </fig>
  </sec>
</sec>
<sec id="analyzing-disulfide-structural-class-distributions">
  <title>Analyzing Disulfide Structural Class Distributions</title>
  <p>The package includes the
  <ext-link ext-link-type="uri" xlink:href="https://suchanek.github.io/proteusPy/proteusPy/DisulfideClass_Constructor.html">DisulfideClassConstructer</ext-link>
  class, which is used to create and manage Disulfide binary and sextant
  classes. A note about these structural classes is in order.
  (<xref alt="Schmidt, 2006" rid="ref-Schmidt_2006" ref-type="bibr">Schmidt,
  2006</xref>) described a method of characterizing disulfide structures
  by describing each individual dihedral angle as either + or - based on
  its sign. This yields <inline-formula><alternatives>
  <tex-math><![CDATA[2^{5}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msup><mml:mn>2</mml:mn><mml:mn>5</mml:mn></mml:msup></mml:math></alternatives></inline-formula>
  or 32 possible classes. The author then was able to identify protein
  functional families within one of 20 remaining structural classes.
  Since the binary approach is very coarse and computational resources
  are much more capable than in 2006 I extended this formalism to a
  <italic>Sextant</italic> approach. In other words, I created
  <italic>six</italic> possible classes for each dihedral angle by
  dividing it into 60 degree segments. This yields a possible
  <inline-formula><alternatives>
  <tex-math><![CDATA[6^5]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msup><mml:mn>6</mml:mn><mml:mn>5</mml:mn></mml:msup></mml:math></alternatives></inline-formula>
  or 7,776 possible classes. The notebook
  <ext-link ext-link-type="uri" xlink:href="https://github.com/suchanek/proteusPy/blob/master/notebooks/DisulfideClassesPlayground.ipynb">DisulfideClassesPlayground.ipynb</ext-link>
  contains some initial results.</p>
</sec>
<sec id="appendix">
  <title>Appendix</title>
  <sec id="database-creation-workflow">
    <title>Database Creation Workflow</title>
    <p>The following steps were performed to create the RCSB disulfide
    database:</p>
    <list list-type="order">
      <list-item>
        <p>Identify disulfide containing proteins in the
        <ext-link ext-link-type="uri" xlink:href="https://www.rcsb.org">RCSB</ext-link>.
        I generated a query using the web-based query tool for all
        proteins containing one or more disulfide bond. The resulting
        file consisted of 35,819 IDs.</p>
      </list-item>
      <list-item>
        <p>Download the structure files to disk. This resulted in the
        program
        <ext-link ext-link-type="uri" xlink:href="https://github.com/suchanek/proteusPy/blob/master/programs/DisulfideDownloader.py">DisulfideDownloader.py</ext-link>.
        The download took approximately twelve hours.</p>
      </list-item>
      <list-item>
        <p>Extract the disulfides from the downloaded structures. The
        program
        <ext-link ext-link-type="uri" xlink:href="https://github.com/suchanek/proteusPy/blob/master/programs/DisulfideExtractor.py">DisulfideExtractor.py</ext-link>
        was used to extract disulfides from the individual structure
        files. This seemingly simple task was complicated by several
        factors including:</p>
        <list list-type="order">
          <list-item>
            <p>The PDB file parser contained in Bio.PDB described in
            (<xref alt="Hamelyrck &amp; Manderick, 2003" rid="ref-Hamelyrck_2003" ref-type="bibr">Hamelyrck
            &amp; Manderick, 2003</xref>) lacked the ability to parse
            the <monospace>SSBOND</monospace> records in PDB files. As a
            result I forked the Biopython repository and updated the
            <monospace>parse_pdb_header.py</monospace> file. My fork is
            available at:
            <ext-link ext-link-type="uri" xlink:href="%22https://github.com/suchanek/biopython%22">https://github.com/suchanek/biopython</ext-link></p>
          </list-item>
          <list-item>
            <p>Duplicate disulfides contained within a multi-chain
            protein file.</p>
          </list-item>
          <list-item>
            <p>Physically impossible disulfides, where the
            <inline-formula><alternatives>
            <tex-math><![CDATA[C_\alpha - C_\alpha]]></tex-math>
            <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:msub><mml:mi>C</mml:mi><mml:mi>α</mml:mi></mml:msub><mml:mo>−</mml:mo><mml:msub><mml:mi>C</mml:mi><mml:mi>α</mml:mi></mml:msub></mml:mrow></mml:math></alternatives></inline-formula>
            distance is &gt; 8
            <inline-formula><tex-math><![CDATA[\text{\normalfont\AA}]]></tex-math></inline-formula>
            .</p>
          </list-item>
          <list-item>
            <p>Structures with disordered CYS atoms.</p>
          </list-item>
        </list>
      </list-item>
    </list>
    <p>In the end I elected to only use a single example of a given
    disulfide from a multi-chain entry, and removed any disulfides with
    a <inline-formula><alternatives>
    <tex-math><![CDATA[C_\alpha - C_\alpha]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:msub><mml:mi>C</mml:mi><mml:mi>α</mml:mi></mml:msub><mml:mo>−</mml:mo><mml:msub><mml:mi>C</mml:mi><mml:mi>α</mml:mi></mml:msub></mml:mrow></mml:math></alternatives></inline-formula>
    distance is &gt; 8
    <inline-formula><tex-math><![CDATA[\text{\normalfont\AA}]]></tex-math></inline-formula>.
    This resulted in the current database consisting of 35,808
    structures and 120,494 disulfide bonds. To my knowledge this is the
    only searchable database of disulfide bonds in existence. ## The
    Future</p>
    <list list-type="bullet">
      <list-item>
        <p>I continue to explore disulfide structural classes using the
        sextant class approach. This offers much higher class resolution
        than the binary approach and reveals subgroups within the broad
        class. I’d also like to explore the catalytic and allosteric
        classes within the subgroups to look for common structural
        elements.</p>
      </list-item>
      <list-item>
        <p>I hope to deploy a Disulfide Database browser for exploration
        and analysis.</p>
      </list-item>
    </list>
  </sec>
  <sec id="miscellaneous">
    <title>Miscellaneous</title>
    <p><italic>Developer’s Notes:</italic> The .pkl files needed to
    instantiate this class and save it into its final .pkl file are
    defined in the
    <ext-link ext-link-type="uri" xlink:href="%22https://suchanek.github.io/proteusPy/proteusPy/data.html%22">proteusPy.data</ext-link>
    class and should not be changed. Upon initialization the class will
    load them and initialize itself.</p>
    <p><italic>NB:</italic>
    (<xref alt="Suchanek, 2023b" rid="ref-proteusPy" ref-type="bibr">Suchanek,
    2023b</xref>) relies on my
    <ext-link ext-link-type="uri" xlink:href="https://github.com/suchanek/biopython">fork</ext-link>
    of the
    <ext-link ext-link-type="uri" xlink:href="https://biopython.org">Biopython</ext-link>
    Python package to download and build the database,
    (<ext-link ext-link-type="uri" xlink:href="https://github.com/suchanek/biopython">https://github.com/suchanek/biopython</ext-link>).
    As a result, one can’t download and create the database locally
    unless the BioPython patch is applied. The changed python file is in
    the repo’s data directory -
    <monospace>parse_pdb_header.py</monospace>. Database analysis is
    unaffected without the patch. Also, if you’re running on an M-series
    Mac then it’s important to install Biopython first, since the
    generic release won’t build on the M1.</p>
  </sec>
</sec>
<sec id="bibliography">
  <title>Bibliography</title>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-Pabo_1986">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Pabo</surname><given-names>C. O.</given-names></name>
        <name><surname>Suchanek</surname><given-names>E. G.</given-names></name>
      </person-group>
      <article-title>Computer-aided model-building strategies for protein design</article-title>
      <source>Biochemistry</source>
      <publisher-name>American Chemical Society (ACS)</publisher-name>
      <year iso-8601-date="1986-10">1986</year><month>10</month>
      <volume>25</volume>
      <issue>20</issue>
      <uri>https://doi.org/10.1021%2Fbi00368a023</uri>
      <pub-id pub-id-type="doi">10.1021/bi00368a023</pub-id>
      <fpage>5987</fpage>
      <lpage>5991</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Schmidt_2006">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Schmidt</surname><given-names>Brian</given-names></name>
      </person-group>
      <article-title>Multiple disulfide-bonded states of native proteins: Estimate of number using probabilities of disulfide bond formation</article-title>
      <source>Biochemistry</source>
      <publisher-name>American Chemical Society (ACS)</publisher-name>
      <year iso-8601-date="2006-06">2006</year><month>06</month>
      <volume>45</volume>
      <issue>24</issue>
      <uri>https://doi.org/10.1021/bi0603064</uri>
      <pub-id pub-id-type="doi">10.1021/bi0603064</pub-id>
      <fpage>7429</fpage>
      <lpage>74334</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Hamelyrck_2003">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Hamelyrck</surname><given-names>Thomas</given-names></name>
        <name><surname>Manderick</surname><given-names>Bernard</given-names></name>
      </person-group>
      <article-title>PDB file parser and structure class implemented in python</article-title>
      <source>Bioinformatics</source>
      <publisher-name>Bioinformatics</publisher-name>
      <year iso-8601-date="2003-11">2003</year><month>11</month>
      <volume>19</volume>
      <issue>17</issue>
      <uri>https://doi.org/10.1093/bioinformatics/btg299</uri>
      <pub-id pub-id-type="doi">10.1093/bioinformatics/btg2994</pub-id>
      <fpage>2308</fpage>
      <lpage>2310</lpage>
    </element-citation>
  </ref>
  <ref id="ref-proteusPy">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Suchanek</surname><given-names>Eric G.</given-names></name>
      </person-group>
      <article-title>proteusPy: A package for modeling and analyzing proteins of known structure</article-title>
      <source>GitHub repository</source>
      <publisher-name>GitHub</publisher-name>
      <year iso-8601-date="2023">2023</year>
      <uri>https://github.com/suchanek/proteusPy</uri>
    </element-citation>
  </ref>
  <ref id="ref-API">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Suchanek</surname><given-names>Eric G.</given-names></name>
      </person-group>
      <article-title>proteusPy API</article-title>
      <source>GitHub Documents</source>
      <publisher-name>GitHub</publisher-name>
      <year iso-8601-date="2023">2023</year>
      <uri>https://suchanek.github.io/suchanek/proteusPy/proteusPy.html</uri>
    </element-citation>
  </ref>
  <ref id="ref-Abelson_DiSessa_1986">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Abelson</surname><given-names>Harold</given-names></name>
        <name><surname>DiSessa</surname><given-names>Andrea A.</given-names></name>
      </person-group>
      <source>Turtle geometry: The computer as a medium for exploring mathematics</source>
      <publisher-name>MIT Press</publisher-name>
      <year iso-8601-date="1986">1986</year>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
