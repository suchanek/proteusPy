window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "proteusPy", "modulename": "proteusPy", "kind": "module", "doc": "<h1 id=\"summary\">Summary</h1>\n\n<p><strong>proteusPy</strong> is a Python package specializing in the modeling and analysis of proteins of known structure with an emphasis on Disulfide bonds. This package reprises my molecular modeling program <a href=\"https://doi.org/10.1021/bi00368a023\">Proteus</a>, a structure-based program developed as part of my graduate thesis. The package relies on the <a href=\"https://suchanek.github.io/proteusPy/proteusPy/turtle3D.html\">Turtle3D</a> class to create and manipulate local coordinate systems. It does this by implementing the functions <code>Move</code>, <code>Roll</code>, <code>Yaw</code>, <code>Pitch</code> and <code>Turn</code> for movement in a three-dimensional space.  The initial implementation focuses on the <a href=\"https://suchanek.github.io/proteusPy/proteusPy/Disulfide.html\">Disulfide</a> class. The class implements methods to analyze the protein structure stabilizing element known as a <em>Disulfide Bond</em>. This class and its underlying methods are being used to perform a structural analysis of over 35,800 disulfide-bond containing proteins in the RCSB protein data bank (https://www.rcsb.org).</p>\n\n<h1 id=\"general-capabilities\">General Capabilities</h1>\n\n<ul>\n<li>Interactively display disulfides contained in the RCSB in a variety of display styles</li>\n<li>Calculate geometric and energetic properties about these disulfides</li>\n<li>Create binary and sextant structural classes by characterizing the disulfide torsional angles into <em>n</em> classes</li>\n<li>Build idealized disulfide bonds from dihedral angle input</li>\n<li>Find disulfide neighbors based on dihedral angle input</li>\n<li>Overlap disulfides onto a common frame of reference for display</li>\n<li>Build protein backbones from backbone phi, psi dihedral angle templates</li>\n<li>More in development</li>\n</ul>\n\n<p><em>See <a href=\"https://suchanek.github.io/proteusPy/proteusPy.html\">https://suchanek.github.io/proteusPy/proteusPy.html</a> for the API documentation with examples</em>.</p>\n\n<h1 id=\"requirements\">Requirements</h1>\n\n<ol>\n<li>PC running MacOS, Linux, Windows with git, git-lfs, make and C compiler installed.</li>\n<li>8 GB RAM</li>\n<li>3 GB disk space</li>\n</ol>\n\n<h1 id=\"installation\">Installation</h1>\n\n<p>It's simplest to clone the repo via GitHub since it contains all of the notebooks, data and test programs. Installation includes installing my Biopython fork which is required to rebuild the database (this is not needed generally). I highly recommend using Miniforge since it includes mamba. The installation instructions below assume a clean install with no package manager or compiler installed.</p>\n\n<h2 id=\"macoslinux\">MacOS/Linux</h2>\n\n<ul>\n<li>Install Miniforge: <a href=\"https://github.com/conda-forge/miniforge\">https://github.com/conda-forge/miniforge</a> (existing Anaconda installations are fine but please install mamba)</li>\n<li>Install git-lfs:\n<ul>\n<li><a href=\"https://help.github.com/en/github/managing-large-files/installing-git-large-file-storage\"><a href=\"https://help.github.com/en/github/managing-large-files/installing-git-large-file-storage\">https://help.github.com/en/github/managing-large-files/installing-git-large-file-storage</a></a></li>\n</ul></li>\n<li>Install <code>make</code> on your system.</li>\n<li>From a shell prompt while sitting in your repo dir:\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">$ </span>git<span class=\"w\"> </span>clone<span class=\"w\"> </span><a href=\"https://github.com/suchanek/proteusPy.git\">https://github.com/suchanek/proteusPy.git</a>\n<span class=\"gp\">$ </span><span class=\"nb\">cd</span><span class=\"w\"> </span>proteusPy\n<span class=\"gp\">$ </span>git-lfs<span class=\"w\"> </span>track<span class=\"w\"> </span><span class=\"s2\">&quot;<em>.csv&quot;</span><span class=\"w\"> </span><span class=\"s2\">&quot;</em>.mp4&quot;</span><span class=\"w\"> </span><span class=\"s2\">&quot;*.pkl&quot;</span>\n<span class=\"gp\">$ </span>make<span class=\"w\"> </span>pkg\n<span class=\"gp\">$ </span>conda<span class=\"w\"> </span>activate<span class=\"w\"> </span>proteusPy\n<span class=\"gp\">$ </span>make<span class=\"w\"> </span>install\n</code></pre>\n</div></li>\n</ul>\n\n<h2 id=\"windows\">Windows</h2>\n\n<p>Installing in Windows is a bit more involved than Linux or Macos. Sadly, the package will not run under WSL, failing with graphics issues. </p>\n\n<ul>\n<li>Install Miniforge: <a href=\"https://github.com/conda-forge/miniforge\">https://github.com/conda-forge/miniforge</a> (existing Anaconda installations are fine but please install mamba)</li>\n<li>Install git for Windows and configure for Bash:\n<ul>\n<li><a href=\"https://git-scm.com/download/win\"><a href=\"https://git-scm.com/download/win\">https://git-scm.com/download/win</a></a></li>\n</ul></li>\n<li>Install git-lfs:\n<ul>\n<li><a href=\"https://git-lfs.github.com/\"><a href=\"https://git-lfs.github.com/\">https://git-lfs.github.com/</a></a></li>\n</ul></li>\n<li>Install Visual Studio C++ development environment: \n<ul>\n<li><a href=\"https://learn.microsoft.com/en-us/cpp/build/vscpp-step-0-installation?view=msvc-170\"><a href=\"https://learn.microsoft.com/en-us/cpp/build/vscpp-step-0-installation?view=msvc-170\">https://learn.microsoft.com/en-us/cpp/build/vscpp-step-0-installation?view=msvc-170</a></a></li>\n</ul></li>\n<li>From a command prompt opened as administrator enter:\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"go\">PS C:\\Users\\egs&gt; cd c:\\windows</span>\n<span class=\"go\">PS C:\\Users\\egs&gt; mklink /H make.exe  &quot;C:\\Program Files (x86)\\Microsoft Visual Studio\\2022\\BuildTools\\VC\\Tools\\MSVC\\14.39.33519\\bin\\Hostx64\\x86\\nmake.exe&quot;</span>\n</code></pre>\n</div></li>\n</ul>\n\n<ul>\n<li>Open a Miniforge prompt and cd into your repo dir:\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp gp-VirtualEnv\">(base)</span> <span class=\"go\">C:\\Users\\egs\\repos&gt; git clone <a href=\"https://github.com/suchanek/proteusPy.git\">https://github.com/suchanek/proteusPy.git</a></span>\n<span class=\"gp gp-VirtualEnv\">(base)</span> <span class=\"go\">C:\\Users\\egs\\repos&gt; cd proteusPy</span>\n<span class=\"gp gp-VirtualEnv\">(base)</span> <span class=\"go\">C:\\Users\\egs\\repos\\proteuspy&gt; git-lfs track &quot;<em>.csv&quot; &quot;</em>.mp4&quot; &quot;*.pkl&quot;</span>\n<span class=\"gp gp-VirtualEnv\">(base)</span> <span class=\"go\">C:\\Users\\egs\\repos\\proteuspy&gt; make pkg</span>\n<span class=\"gp gp-VirtualEnv\">(base)</span> <span class=\"go\">C:\\Users\\egs\\repos&gt;\\proteuspy&gt; conda activate proteusPy</span>\n<span class=\"gp gp-VirtualEnv\">(proteusPy)</span> <span class=\"go\">C:\\Users\\egs\\repos&gt; make install</span>\n</code></pre>\n</div></li>\n</ul>\n\n<h1 id=\"testing\">Testing</h1>\n\n<p>I currently have docstring testing for the modules in place. To run them <code>cd</code> into the repository and run:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">$ </span>make<span class=\"w\"> </span>tests\n</code></pre>\n</div>\n\n<p>The modules will run their docstring tests and disulfide visualization windows will open. Simply close them. If all goes normally there will be no errors.</p>\n\n<h1 id=\"general-usage\">General Usage</h1>\n\n<p>Once the package is installed one can use the existing notebooks for analysis of the RCSB Disulfide database. </p>\n\n<p>The <a href=\"https://github.com/suchanek/proteusPy/blob/master/notebooks/\">notebooks</a> directory contains all of my Jupyter notebooks and is a good place to start: </p>\n\n<ul>\n<li><a href=\"https://github.com/suchanek/proteusPy/blob/master/notebooks/Analysis_2q7q.ipynb\">Analysis_2q7q.ipynb</a> provides an example of visualizing the lowest energy Disulfide contained in the database and searching for nearest neighbors on the basis of conformational similarity. </li>\n</ul>\n\n<p>The <a href=\"https://github.com/suchanek/proteusPy/tree/master/programs\">programs</a> subdirectory contains the primary programs for downloading the RCSB disulfide-containing structure files:</p>\n\n<ul>\n<li><a href=\"https://github.com/suchanek/proteusPy/blob/master/programs/DisulfideDownloader.py\">DisulfideDownloader.py</a>: Downloads the raw RCSB structure files.</li>\n<li><a href=\"https://github.com/suchanek/proteusPy/blob/master/programs/DisulfideExtractor.py\">DisulfideExtractor.py</a>: Extracts the disulfides and creating the database loaders</li>\n<li><a href=\"https://github.com/suchanek/proteusPy/blob/master/programs/DisulfideExtractor.py\">DisulfideClass_Analysis.py</a>: Performs binary or sextant analysis on the disulfide database.</li>\n</ul>\n\n<p>The first time one loads the database via <a href=\"https://suchanek.github.io/proteusPy/proteusPy/DisulfideLoader.html#Load_PDB_SS\">Load_PDB_SS()</a> the system will attempt to download the full and subset database from Google Drive. If this fails the system will attempt to rebuild the database from the repo's <strong>data</strong> subdirectory (not the package's). If you've downloaded from github this will work correctly. If you've installed from pyPi via <strong>pip</strong> it will fail.</p>\n\n<h2 id=\"quickstart\">Quickstart</h2>\n\n<p>After installation is complete launch jupyter lab:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">$ </span>jupyter<span class=\"w\"> </span>lab<span class=\"w\"> </span>\n</code></pre>\n</div>\n\n<p>and open <code>notebooks/Analysis_2q7q.ipynb</code>. This notebook looks at the disulfide bond with the lowest energy in the entire database. There are several other notebooks in this directory that illustrate using the program. Some of these reflect active development work so may not be 'fully baked'.</p>\n\n<h2 id=\"visualizing-disulfides-with-pyvista\">Visualizing Disulfides with pyVista</h2>\n\n<p>PyVista is an excellent 3D visualization framework and I've used it for the Disulfide visualization engine. It uses the VTK library on the back end and provides high-level access to 3d rendering. The menu strip provided in the Disulfide visualization windows allows the user to turn borders, rulers, bounding boxes on and off and reset the orientations. Please try them out! There is also a button for <em>local</em> vs <em>server</em> rendering. <em>Local</em> rendering is usually much smoother. To manipulate:</p>\n\n<ul>\n<li>Click and drag your mouse to rotate</li>\n<li>Use the mouse wheel to zoom (3 finger zoom on trackpad)</li>\n</ul>\n\n<h2 id=\"performance\">Performance</h2>\n\n<ul>\n<li>Manipulating and searching through long lists of disulfides can take time. I've added progress bars for many of these operations. </li>\n<li>Rendering many disulfides in <strong>pyvista</strong> can also take time to load and may be slow to display in real time, depending on your hardware. I added optimization to reduce cylinder complexity as a function of total cylinders rendered, but it can still be less than perfect. The faster your GPU the better! </li>\n</ul>\n\n<h2 id=\"contributingreporting\">Contributing/Reporting</h2>\n\n<p>I welcome anyone interested in collaborating on proteusPy! Feel free to contact me at suchanek@mac.com, fork the repository: <a href=\"https://github.com/suchanek/proteusPy/\">https://github.com/suchanek/proteusPy/</a> and get coding. Issues can be reported to <a href=\"https://github.com/suchanek/proteusPy/issues\">https://github.com/suchanek/proteusPy/issues</a>. </p>\n\n<h2 id=\"citing-proteuspy\">Citing proteusPy</h2>\n\n<p>The proteusPy package was developed by Eric G. Suchanek, PhD. If you find it useful in your research and wish to cite it please use the following BibTeX entry:</p>\n\n<pre><code>@software{proteusPy2024,\n  author = {Eric G. Suchanek, PhD},\n  title = {proteusPy: A Package for Modeling and Analyzing Proteins of Known Structure},\n  year = {2024},\n  publisher = {GitHub},\n  version = {0.92},\n  journal = {GitHub repository},\n  url = {https://github.com/suchanek/proteusPy}\n}\n</code></pre>\n\n<h2 id=\"publications\">Publications</h2>\n\n<ul>\n<li><a href=\"https://doi.org/10.1021/bi00368a023\">https://doi.org/10.1021/bi00368a023</a></li>\n<li><a href=\"https://doi.org/10.1021/bi00368a024\">https://doi.org/10.1021/bi00368a024</a></li>\n<li><a href=\"https://doi.org/10.1016/0092-8674(92)90140-8\">https://doi.org/10.1016/0092-8674(92)90140-8</a></li>\n<li><a href=\"http://dx.doi.org/10.2174/092986708783330566\">http://dx.doi.org/10.2174/092986708783330566</a></li>\n<li><a href=\"http://dx.doi.org/10.1111/j.1538-7836.2010.03894.x\">http://dx.doi.org/10.1111/j.1538-7836.2010.03894.x</a></li>\n</ul>\n"}, {"fullname": "proteusPy.version_file", "modulename": "proteusPy", "qualname": "version_file", "kind": "variable", "doc": "<p></p>\n", "default_value": "PosixPath(&#x27;/Users/egs/repos/proteusPy/VERSION&#x27;)"}, {"fullname": "proteusPy.Disulfide", "modulename": "proteusPy.Disulfide", "kind": "module", "doc": "<p>This module, <em>Disulfide</em>, is part of the proteusPy package, a Python package for \nthe analysis and modeling of protein structures, with an emphasis on disulfide bonds.\nIt represents the core of the current implementation of <em>proteusPy</em>.</p>\n\n<p>This work is based on the original C/C++ implementation by Eric G. Suchanek. </p>\n\n<p>Author: Eric G. Suchanek, PhD\nLast revision: 2/17/2024</p>\n"}, {"fullname": "proteusPy.Disulfide.Torsion_DF_Cols", "modulename": "proteusPy.Disulfide", "qualname": "Torsion_DF_Cols", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;source&#x27;, &#x27;ss_id&#x27;, &#x27;proximal&#x27;, &#x27;distal&#x27;, &#x27;chi1&#x27;, &#x27;chi2&#x27;, &#x27;chi3&#x27;, &#x27;chi4&#x27;, &#x27;chi5&#x27;, &#x27;energy&#x27;, &#x27;ca_distance&#x27;, &#x27;cb_distance&#x27;, &#x27;phi_prox&#x27;, &#x27;psi_prox&#x27;, &#x27;phi_dist&#x27;, &#x27;psi_dist&#x27;, &#x27;torsion_length&#x27;, &#x27;rho&#x27;]"}, {"fullname": "proteusPy.Disulfide.Disulfide", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide", "kind": "class", "doc": "<p>This class provides a Python object and methods representing a physical disulfide bond\neither extracted from the RCSB protein databank or built using the\n<a href=\"turtle3D.html\">proteusPy.Turtle3D</a> class. The disulfide bond is an important\nintramolecular stabilizing structural element and is characterized by:</p>\n\n<ul>\n<li>Atomic coordinates for the atoms N, C\u03b1, C\u03b2, C', S\u03b3 for both residues.\nThese are stored as both raw atomic coordinates as read from the RCSB file\nand internal local coordinates.</li>\n<li>The dihedral angles \u03a71 - \u03a75 for the disulfide bond</li>\n<li>A name, by default {pdb_id}{prox_resnumb}{prox_chain}_{distal_resnum}{distal_chain}</li>\n<li>Proximal residue number</li>\n<li>Distal residue number</li>\n<li>Approximate bond torsional energy (kcal/mol):</li>\n</ul>\n\n<p>$$\nE_{kcal/mol} \\approx 2.0 * cos(3.0 * \\chi_{1}) + cos(3.0 * \\chi_{5}) + cos(3.0 * \\chi_{2}) +\n$$\n$$\ncos(3.0 * \\chi_{4}) + 3.5 * cos(2.0 * \\chi_{3}) + 0.6 * cos(3.0 * \\chi_{3}) + 10.1\n$$</p>\n\n<p>The equation embodies the typical 3-fold rotation barriers associated with single bonds,\n(\u03a71, \u03a75, \u03a72, \u03a74) and a high 2-fold barrier for \u03a73, resulting from the partial double bond\ncharacter of the S-S bond. This property leads to two major disulfide families, characterized\nby the sign of \u03a73. <em>Left-handed</em> disulfides have \u03a73 &lt; 0\u00b0 and <em>right-handed</em> disulfides have\n\u03a73 &gt; 0\u00b0. Within this breakdown there are numerous subfamilies, broadly known as the <em>hook</em>,\n<em>spiral</em> and <em>staple</em>. These are under characgterization.</p>\n\n<ul>\n<li>Euclidean length of the dihedral angles (degrees) defined as:\n$$\\sqrt(\\chi_{1}^{2} + \\chi_{2}^{2} + \\chi_{3}^{2} + \\chi_{4}^{2} + \\chi_{5}^{2})$$</li>\n<li>C\u03b1 - C\u03b1 distance (\u00c5)</li>\n<li>C\u03b2 - C\u03b2 distance (\u00c5)</li>\n<li>The previous C' and next N for both the proximal and distal residues. These are needed\nto calculate the backbone dihedral angles \u03a6 and \u03a8.</li>\n<li>Backbone dihedral angles \u03a6 and \u03a8, when possible. Not all structures are complete and\nin those cases the atoms needed may be undefined. In this case the \u03a6 and \u03a8 angles are set\nto -180\u00b0.</li>\n</ul>\n\n<p>The class also provides a rendering capabilities using the excellent <a href=\"https://pyvista.org\">PyVista</a>\nlibrary, and can display disulfides interactively in a variety of display styles:</p>\n\n<ul>\n<li>'sb' - Split Bonds style - bonds colored by their atom type</li>\n<li>'bs' - Ball and Stick style - split bond coloring with small atoms</li>\n<li>'pd' - Proximal/Distal style - bonds colored <em>Red</em> for proximal residue and <em>Green</em> for\nthe distal residue.</li>\n<li>'cpk' - CPK style rendering, colored by atom type:\n<ul>\n<li>Carbon   - Grey</li>\n<li>Nitrogen - Blue</li>\n<li>Sulfur   - Yellow</li>\n<li>Oxygen   - Red</li>\n<li>Hydrogen - White</li>\n</ul></li>\n</ul>\n\n<p>Individual renderings can be saved to a file, and animations created.</p>\n"}, {"fullname": "proteusPy.Disulfide.Disulfide.__init__", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.__init__", "kind": "function", "doc": "<p>__init__ Initialize the class to defined internal values.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name</strong>:  Disulfide name, by default \"SSBOND\"</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;SSBOND&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">proximal</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">distal</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">proximal_chain</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;A&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">distal_chain</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;A&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">pdb_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;1egs&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">quiet</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">permissive</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "proteusPy.Disulfide.Disulfide.name", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.Disulfide.Disulfide.proximal", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.proximal", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.Disulfide.Disulfide.distal", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.distal", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.Disulfide.Disulfide.energy", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.energy", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.Disulfide.Disulfide.proximal_chain", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.proximal_chain", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.Disulfide.Disulfide.distal_chain", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.distal_chain", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.Disulfide.Disulfide.pdb_id", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.pdb_id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.Disulfide.Disulfide.proximal_residue_fullid", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.proximal_residue_fullid", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.Disulfide.Disulfide.distal_residue_fullid", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.distal_residue_fullid", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.Disulfide.Disulfide.PERMISSIVE", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.PERMISSIVE", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.Disulfide.Disulfide.QUIET", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.QUIET", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.Disulfide.Disulfide.ca_distance", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.ca_distance", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.Disulfide.Disulfide.cb_distance", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.cb_distance", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.Disulfide.Disulfide.torsion_array", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.torsion_array", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.Disulfide.Disulfide.phiprox", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.phiprox", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.Disulfide.Disulfide.psiprox", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.psiprox", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.Disulfide.Disulfide.phidist", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.phidist", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.Disulfide.Disulfide.psidist", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.psidist", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.Disulfide.Disulfide.n_prox", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.n_prox", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.Disulfide.Disulfide.ca_prox", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.ca_prox", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.Disulfide.Disulfide.c_prox", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.c_prox", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.Disulfide.Disulfide.o_prox", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.o_prox", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.Disulfide.Disulfide.cb_prox", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.cb_prox", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.Disulfide.Disulfide.sg_prox", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.sg_prox", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.Disulfide.Disulfide.sg_dist", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.sg_dist", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.Disulfide.Disulfide.cb_dist", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.cb_dist", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.Disulfide.Disulfide.ca_dist", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.ca_dist", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.Disulfide.Disulfide.n_dist", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.n_dist", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.Disulfide.Disulfide.c_dist", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.c_dist", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.Disulfide.Disulfide.o_dist", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.o_dist", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.Disulfide.Disulfide.missing_atoms", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.missing_atoms", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.Disulfide.Disulfide.modelled", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.modelled", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.Disulfide.Disulfide.resolution", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.resolution", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.Disulfide.Disulfide.c_prev_prox", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.c_prev_prox", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.Disulfide.Disulfide.n_next_prox", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.n_next_prox", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.Disulfide.Disulfide.c_prev_dist", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.c_prev_dist", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.Disulfide.Disulfide.n_next_dist", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.n_next_dist", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.Disulfide.Disulfide.chi1", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.chi1", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.Disulfide.Disulfide.chi2", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.chi2", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.Disulfide.Disulfide.chi3", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.chi3", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.Disulfide.Disulfide.chi4", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.chi4", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.Disulfide.Disulfide.chi5", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.chi5", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.Disulfide.Disulfide.rho", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.rho", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.Disulfide.Disulfide.torsion_length", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.torsion_length", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.Disulfide.Disulfide.dihedrals", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.dihedrals", "kind": "variable", "doc": "<p>Return a ist containing the dihedral angles for the disulfide.</p>\n", "annotation": ": list"}, {"fullname": "proteusPy.Disulfide.Disulfide.bounding_box", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.bounding_box", "kind": "function", "doc": "<p>Return the bounding box array for the given disulfide</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<h6 id=\"returns-2\">Returns</h6>\n\n<blockquote>\n  <p>np.Array(3,2): Array containing the min, max for X, Y, and Z respectively.\n  Does not currently take the atom's radius into account.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide.build_yourself", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.build_yourself", "kind": "function", "doc": "<p>Build a model Disulfide based its internal dihedral state\nRoutine assumes turtle is in orientation #1 (at Ca, headed toward\nCb, with N on left), builds disulfide, and updates the object's internal\ncoordinates. It also adds the distal protein backbone,\nand computes the disulfide conformational energy.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide.build_model", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.build_model", "kind": "function", "doc": "<p>Build a model Disulfide based on the input dihedral angles.\nRoutine assumes turtle is in orientation #1 (at Ca, headed toward\nCb, with N on left), builds disulfide, and updates the object's internal\ncoordinates. It also adds the distal protein backbone,\nand computes the disulfide conformational energy.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>chi1</strong>:  Chi1 (degrees)</li>\n<li><strong>chi2</strong>:  Chi2 (degrees)</li>\n<li><strong>chi3</strong>:  Chi3 (degrees)</li>\n<li><strong>chi4</strong>:  Chi4 (degrees)</li>\n<li><strong>chi5</strong>:  Chi5 (degrees)</li>\n</ul>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">proteusPy.Disulfide</span> <span class=\"kn\">import</span> <span class=\"n\">Disulfide</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">modss</span> <span class=\"o\">=</span> <span class=\"n\">Disulfide</span><span class=\"p\">(</span><span class=\"s1\">&#39;model&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">modss</span><span class=\"o\">.</span><span class=\"n\">build_model</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">60</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">modss</span><span class=\"o\">.</span><span class=\"n\">display</span><span class=\"p\">(</span><span class=\"n\">style</span><span class=\"o\">=</span><span class=\"s1\">&#39;sb&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">chi1</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">chi2</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">chi3</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">chi4</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">chi5</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide.cofmass", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.cofmass", "kind": "function", "doc": "<p>Return the geometric center of mass for the internal coordinates of\nthe given Disulfide. Missing atoms are not included.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>3D array for the geometric center of mass</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide.copy", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.copy", "kind": "function", "doc": "<p>Copy the Disulfide.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A copy of self.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide.compute_extents", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.compute_extents", "kind": "function", "doc": "<p>Calculate the internal coordinate extents for the input axis.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dim</strong>:  Axis, one of 'x', 'y', 'z', by default 'z'</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>min, max</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dim</span><span class=\"o\">=</span><span class=\"s1\">&#39;z&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide.compute_local_coords", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.compute_local_coords", "kind": "function", "doc": "<p>Compute the internal coordinates for a properly initialized Disulfide Object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>self</strong>:  SS initialized Disulfide object\n:returns: None, modifies internal state of the input</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide.compute_torsional_energy", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.compute_torsional_energy", "kind": "function", "doc": "<p>Compute the approximate torsional energy for the Disulfide's\nconformation and sets its internal state.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Energy (kcal/mol)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide.display", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.display", "kind": "function", "doc": "<p>Display the Disulfide bond in the specific rendering style.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>single</strong>:  Display the bond in a single panel in the specific style.</li>\n<li><strong>style:  Rendering style: One of</strong>: \n<ul>\n<li>'sb' - split bonds</li>\n<li>'bs' - ball and stick</li>\n<li>'cpk' - CPK style</li>\n<li>'pd' - Proximal/Distal style - Red=proximal, Green=Distal</li>\n<li>'plain' - boring single color</li>\n</ul></li>\n<li><strong>light</strong>:  If True, light background, if False, dark</li>\n</ul>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">proteusPy</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">proteusPy.Disulfide</span> <span class=\"kn\">import</span> <span class=\"n\">Disulfide</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">proteusPy.DisulfideLoader</span> <span class=\"kn\">import</span> <span class=\"n\">DisulfideLoader</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PDB_SS</span> <span class=\"o\">=</span> <span class=\"n\">DisulfideLoader</span><span class=\"p\">(</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">subset</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ss</span> <span class=\"o\">=</span> <span class=\"n\">PDB_SS</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ss</span><span class=\"o\">.</span><span class=\"n\">display</span><span class=\"p\">(</span><span class=\"n\">style</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpk&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ss</span><span class=\"o\">.</span><span class=\"n\">screenshot</span><span class=\"p\">(</span><span class=\"n\">style</span><span class=\"o\">=</span><span class=\"s1\">&#39;bs&#39;</span><span class=\"p\">,</span> <span class=\"n\">fname</span><span class=\"o\">=</span><span class=\"s1\">&#39;proteus_logo_sb.png&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">single</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">style</span><span class=\"o\">=</span><span class=\"s1\">&#39;sb&#39;</span>, </span><span class=\"param\"><span class=\"n\">light</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">shadows</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide.plot", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.plot", "kind": "function", "doc": "<p>Return the pyVista Plotter object for the Disulfide bond in the specific rendering style.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>single</strong>:  Display the bond in a single panel in the specific style.</li>\n<li><strong>style:  Rendering style: One of</strong>: \n<ul>\n<li>'sb' - split bonds</li>\n<li>'bs' - ball and stick</li>\n<li>'cpk' - CPK style</li>\n<li>'pd' - Proximal/Distal style - Red=proximal, Green=Distal</li>\n<li>'plain' - boring single color</li>\n</ul></li>\n<li><strong>light</strong>:  If True, light background, if False, dark</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">pl</span>,</span><span class=\"param\">\t<span class=\"n\">single</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">style</span><span class=\"o\">=</span><span class=\"s1\">&#39;sb&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">light</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">shadows</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyvista</span><span class=\"o\">.</span><span class=\"n\">plotting</span><span class=\"o\">.</span><span class=\"n\">plotter</span><span class=\"o\">.</span><span class=\"n\">Plotter</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide.Distance_neighbors", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.Distance_neighbors", "kind": "function", "doc": "<p>Return list of Disulfides whose RMS atomic distance is within\nthe cutoff (\u00c5) in the others list.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>others</strong>:  DisulfideList to search</li>\n<li><strong>cutoff</strong>:  Distance cutoff (\u00c5)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>DisulfideList within the cutoff</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">others</span><span class=\"p\">:</span> <span class=\"n\">proteusPy</span><span class=\"o\">.</span><span class=\"n\">DisulfideList</span><span class=\"o\">.</span><span class=\"n\">DisulfideList</span>, </span><span class=\"param\"><span class=\"n\">cutoff</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide.Distance_RMS", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.Distance_RMS", "kind": "function", "doc": "<p>Calculate the RMS distance between the internal coordinates of self and another Disulfide.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>other</strong>:  Comparison Disulfide</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>RMS distance (\u00c5)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide.get_chains", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.get_chains", "kind": "function", "doc": "<p>Return the proximal and distal chain IDs for the Disulfide.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>tuple (proximal, distal) chain IDs</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide.get_permissive", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.get_permissive", "kind": "function", "doc": "<p>Return the Permissive flag state. (Used in PDB parsing)</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Permissive state</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide.get_full_id", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.get_full_id", "kind": "function", "doc": "<p>Return the Disulfide full IDs (Used with BIO.PDB)</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Disulfide full IDs</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide.initialize_disulfide_from_chain", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.initialize_disulfide_from_chain", "kind": "function", "doc": "<p>Initialize a new Disulfide object with atomic coordinates from\nthe proximal and distal coordinates, typically taken from a PDB file.\nThis routine is primarily used internally when building the compressed\ndatabase.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>chain1: list of Residues in the model, eg</strong>:  chain = model['A']</li>\n<li><strong>chain2: list of Residues in the model, eg</strong>:  chain = model['A']</li>\n<li><strong>proximal</strong>:  proximal residue sequence ID</li>\n<li><strong>distal</strong>:  distal residue sequence ID</li>\n<li><strong>resolution</strong>:  structure resolution</li>\n<li><strong>quiet</strong>:  Quiet or noisy parsing, defaults to True</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DisulfideConstructionWarning</strong>:  Raised when not parsed correctly</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">chain1</span>, </span><span class=\"param\"><span class=\"n\">chain2</span>, </span><span class=\"param\"><span class=\"n\">proximal</span>, </span><span class=\"param\"><span class=\"n\">distal</span>, </span><span class=\"param\"><span class=\"n\">resolution</span>, </span><span class=\"param\"><span class=\"n\">quiet</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide.internal_coords", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.internal_coords", "kind": "function", "doc": "<p>Return the internal coordinates for the Disulfide.\nIf there are missing atoms the extra atoms for the proximal\nand distal N and C are set to [0,0,0]. This is needed for the center of\nmass calculations, used when rendering.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Array containing the coordinates, [16][3].</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide.internal_coords_res", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.internal_coords_res", "kind": "function", "doc": "<p>Return the internal coordinates for the internal coordinates of\nthe given Disulfide. Missing atoms are not included.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>resnumb</strong>:  Residue number for disulfide</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DisulfideConstructionWarning</strong>:  Warning raised if the residue number is invalid</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Array containing the internal coordinates for the disulfide</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">resnumb</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide.make_movie", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.make_movie", "kind": "function", "doc": "<p>Create an animation for <code>self</code> rotating one revolution about the Y axis,\nin the given <code>style</code>, saving to <code>filename</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>style: Rendering style, defaults to 'sb', one of</strong>: </p>\n\n<ul>\n<li>'sb' - split bonds</li>\n<li>'bs' - ball and stick</li>\n<li>'cpk' - CPK style</li>\n<li>'pd' - Proximal/Distal style - Red=proximal, Green=Distal</li>\n<li>'plain' - boring single color</li>\n</ul></li>\n<li><p><strong>fname</strong>:  Output filename, defaults to <code>ssbond.mp4</code></p></li>\n<li><strong>verbose</strong>:  Verbosity, defaults to False</li>\n<li><strong>steps</strong>:  Number of steps for one complete rotation, defaults to 360.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">style</span><span class=\"o\">=</span><span class=\"s1\">&#39;sb&#39;</span>, </span><span class=\"param\"><span class=\"n\">fname</span><span class=\"o\">=</span><span class=\"s1\">&#39;ssbond.mp4&#39;</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">steps</span><span class=\"o\">=</span><span class=\"mi\">360</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide.pprint", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.pprint", "kind": "function", "doc": "<p>Pretty print general info for the Disulfide</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide.pprint_all", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.pprint_all", "kind": "function", "doc": "<p>Pretty print all info for the Disulfide</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide.repr_ss_info", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.repr_ss_info", "kind": "function", "doc": "<p>Representation for the Disulfide class</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide.repr_ss_coords", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.repr_ss_coords", "kind": "function", "doc": "<p>Representation for Disulfide coordinates</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide.repr_ss_conformation", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.repr_ss_conformation", "kind": "function", "doc": "<p>Representation for Disulfide conformation</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide.repr_ss_local_coords", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.repr_ss_local_coords", "kind": "function", "doc": "<p>Representation for the Disulfide internal coordinates.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide.repr_ss_chain_ids", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.repr_ss_chain_ids", "kind": "function", "doc": "<p>Representation for Disulfide chain IDs</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide.repr_ss_ca_dist", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.repr_ss_ca_dist", "kind": "function", "doc": "<p>Representation for Disulfide Ca distance</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide.repr_ss_cb_dist", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.repr_ss_cb_dist", "kind": "function", "doc": "<p>Representation for Disulfide Ca distance</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide.repr_ss_torsion_length", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.repr_ss_torsion_length", "kind": "function", "doc": "<p>Representation for Disulfide torsion length</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide.repr_all", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.repr_all", "kind": "function", "doc": "<p>Return a string representation for all Disulfide information\ncontained in self.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide.repr_compact", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.repr_compact", "kind": "function", "doc": "<p>Return a compact representation of the Disulfide object</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>string</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide.repr_conformation", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.repr_conformation", "kind": "function", "doc": "<p>Return a string representation of the Disulfide object's conformation.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>string</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide.repr_coords", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.repr_coords", "kind": "function", "doc": "<p>Return a string representation of the Disulfide object's coordinates.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>string</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide.repr_internal_coords", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.repr_internal_coords", "kind": "function", "doc": "<p>Return a string representation of the Disulfide object's internal coordinaes.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>string</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide.repr_chain_ids", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.repr_chain_ids", "kind": "function", "doc": "<p>Return a string representation of the Disulfide object's chain ids.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>string</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide.compute_rho", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.compute_rho", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide.reset", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.reset", "kind": "function", "doc": "<p>Resets the disulfide object to its initial state. All distances,\nangles and positions are reset. The name is unchanged.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide.same_chains", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.same_chains", "kind": "function", "doc": "<p>Function checks if the Disulfide is cross-chain or not.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool </p>\n\n<pre><code>True if the proximal and distal residues are on the same chains,\nFalse otherwise.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide.screenshot", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.screenshot", "kind": "function", "doc": "<p>Create and save a screenshot of the Disulfide in the given style\nand filename</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>single</strong>:  Display a single vs panel view, defaults to True</li>\n<li><strong>style: Rendering style, one of</strong>: \n<ul>\n<li>'sb' - split bonds</li>\n<li>'bs' - ball and stick</li>\n<li>'cpk' - CPK style</li>\n<li>'pd' - Proximal/Distal style - Red=proximal, Green=Distal</li>\n<li>'plain' - boring single color,</li>\n</ul></li>\n<li><strong>fname</strong>:  output filename,, defaults to 'ssbond.png'</li>\n<li><strong>verbose</strong>:  Verbosit, defaults to False</li>\n<li><strong>shadows</strong>:  Enable shadows, defaults to False</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">single</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">style</span><span class=\"o\">=</span><span class=\"s1\">&#39;sb&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">fname</span><span class=\"o\">=</span><span class=\"s1\">&#39;ssbond.png&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">shadows</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">light</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide.save_meshes_as_stl", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.save_meshes_as_stl", "kind": "function", "doc": "<p>Save a list of meshes as a single STL file.</p>\n\n<p>Args:\n    meshes (list): List of pyvista mesh objects to save.\n    filename (str): Path to save the STL file to.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">meshes</span>, </span><span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide.export", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.export", "kind": "function", "doc": "<p>Create and save a screenshot of the Disulfide in the given style and filename.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>single</strong>:  Display a single vs panel view, defaults to True</li>\n<li><p><strong>style: Rendering style, one of</strong>: </p>\n\n<ul>\n<li>'sb' - split bonds</li>\n<li>'bs' - ball and stick</li>\n<li>'cpk' - CPK style</li>\n<li>'pd' - Proximal/Distal style - Red=proximal, Green=Distal</li>\n<li>'plain' - boring single color,</li>\n</ul></li>\n<li><p><strong>fname</strong>:  output filename,, defaults to 'ssbond.stl'</p></li>\n<li><strong>verbose</strong>:  Verbosit, defaults to False</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">style</span><span class=\"o\">=</span><span class=\"s1\">&#39;sb&#39;</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">fname</span><span class=\"o\">=</span><span class=\"s1\">&#39;ssbond_plt&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide.set_permissive", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.set_permissive", "kind": "function", "doc": "<p>Set PERMISSIVE flag for Disulfide parsing.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">perm</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide.set_positions", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.set_positions", "kind": "function", "doc": "<p>Set the atomic coordinates for all atoms in the Disulfide object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>n_prox</strong>:  Proximal N position</li>\n<li><strong>ca_prox</strong>:  Proximal C\u03b1 position</li>\n<li><strong>c_prox</strong>:  Proximal C' position</li>\n<li><strong>o_prox</strong>:  Proximal O position</li>\n<li><strong>cb_prox</strong>:  Proximal C\u03b2 position</li>\n<li><strong>sg_prox</strong>:  Proximal S\u03b3 position</li>\n<li><strong>n_dist</strong>:  Distal N position</li>\n<li><strong>ca_dist</strong>:  Distal C\u03b1 position</li>\n<li><strong>c_dist</strong>:  Distal C' position</li>\n<li><strong>o_dist</strong>:  Distal O position</li>\n<li><strong>cb_dist</strong>:  Distal C\u03b2 position</li>\n<li><strong>sg_dist</strong>:  Distal S\u03b3 position</li>\n<li><strong>c_prev_prox</strong>:  Proximal previous C'</li>\n<li><strong>n_next_prox</strong>:  Proximal next N</li>\n<li><strong>c_prev_dist</strong>:  Distal previous C'</li>\n<li><strong>n_next_dist</strong>:  Distal next N</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">n_prox</span><span class=\"p\">:</span> <span class=\"n\">Bio</span><span class=\"o\">.</span><span class=\"n\">PDB</span><span class=\"o\">.</span><span class=\"n\">vectors</span><span class=\"o\">.</span><span class=\"n\">Vector</span>,</span><span class=\"param\">\t<span class=\"n\">ca_prox</span><span class=\"p\">:</span> <span class=\"n\">Bio</span><span class=\"o\">.</span><span class=\"n\">PDB</span><span class=\"o\">.</span><span class=\"n\">vectors</span><span class=\"o\">.</span><span class=\"n\">Vector</span>,</span><span class=\"param\">\t<span class=\"n\">c_prox</span><span class=\"p\">:</span> <span class=\"n\">Bio</span><span class=\"o\">.</span><span class=\"n\">PDB</span><span class=\"o\">.</span><span class=\"n\">vectors</span><span class=\"o\">.</span><span class=\"n\">Vector</span>,</span><span class=\"param\">\t<span class=\"n\">o_prox</span><span class=\"p\">:</span> <span class=\"n\">Bio</span><span class=\"o\">.</span><span class=\"n\">PDB</span><span class=\"o\">.</span><span class=\"n\">vectors</span><span class=\"o\">.</span><span class=\"n\">Vector</span>,</span><span class=\"param\">\t<span class=\"n\">cb_prox</span><span class=\"p\">:</span> <span class=\"n\">Bio</span><span class=\"o\">.</span><span class=\"n\">PDB</span><span class=\"o\">.</span><span class=\"n\">vectors</span><span class=\"o\">.</span><span class=\"n\">Vector</span>,</span><span class=\"param\">\t<span class=\"n\">sg_prox</span><span class=\"p\">:</span> <span class=\"n\">Bio</span><span class=\"o\">.</span><span class=\"n\">PDB</span><span class=\"o\">.</span><span class=\"n\">vectors</span><span class=\"o\">.</span><span class=\"n\">Vector</span>,</span><span class=\"param\">\t<span class=\"n\">n_dist</span><span class=\"p\">:</span> <span class=\"n\">Bio</span><span class=\"o\">.</span><span class=\"n\">PDB</span><span class=\"o\">.</span><span class=\"n\">vectors</span><span class=\"o\">.</span><span class=\"n\">Vector</span>,</span><span class=\"param\">\t<span class=\"n\">ca_dist</span><span class=\"p\">:</span> <span class=\"n\">Bio</span><span class=\"o\">.</span><span class=\"n\">PDB</span><span class=\"o\">.</span><span class=\"n\">vectors</span><span class=\"o\">.</span><span class=\"n\">Vector</span>,</span><span class=\"param\">\t<span class=\"n\">c_dist</span><span class=\"p\">:</span> <span class=\"n\">Bio</span><span class=\"o\">.</span><span class=\"n\">PDB</span><span class=\"o\">.</span><span class=\"n\">vectors</span><span class=\"o\">.</span><span class=\"n\">Vector</span>,</span><span class=\"param\">\t<span class=\"n\">o_dist</span><span class=\"p\">:</span> <span class=\"n\">Bio</span><span class=\"o\">.</span><span class=\"n\">PDB</span><span class=\"o\">.</span><span class=\"n\">vectors</span><span class=\"o\">.</span><span class=\"n\">Vector</span>,</span><span class=\"param\">\t<span class=\"n\">cb_dist</span><span class=\"p\">:</span> <span class=\"n\">Bio</span><span class=\"o\">.</span><span class=\"n\">PDB</span><span class=\"o\">.</span><span class=\"n\">vectors</span><span class=\"o\">.</span><span class=\"n\">Vector</span>,</span><span class=\"param\">\t<span class=\"n\">sg_dist</span><span class=\"p\">:</span> <span class=\"n\">Bio</span><span class=\"o\">.</span><span class=\"n\">PDB</span><span class=\"o\">.</span><span class=\"n\">vectors</span><span class=\"o\">.</span><span class=\"n\">Vector</span>,</span><span class=\"param\">\t<span class=\"n\">c_prev_prox</span><span class=\"p\">:</span> <span class=\"n\">Bio</span><span class=\"o\">.</span><span class=\"n\">PDB</span><span class=\"o\">.</span><span class=\"n\">vectors</span><span class=\"o\">.</span><span class=\"n\">Vector</span>,</span><span class=\"param\">\t<span class=\"n\">n_next_prox</span><span class=\"p\">:</span> <span class=\"n\">Bio</span><span class=\"o\">.</span><span class=\"n\">PDB</span><span class=\"o\">.</span><span class=\"n\">vectors</span><span class=\"o\">.</span><span class=\"n\">Vector</span>,</span><span class=\"param\">\t<span class=\"n\">c_prev_dist</span><span class=\"p\">:</span> <span class=\"n\">Bio</span><span class=\"o\">.</span><span class=\"n\">PDB</span><span class=\"o\">.</span><span class=\"n\">vectors</span><span class=\"o\">.</span><span class=\"n\">Vector</span>,</span><span class=\"param\">\t<span class=\"n\">n_next_dist</span><span class=\"p\">:</span> <span class=\"n\">Bio</span><span class=\"o\">.</span><span class=\"n\">PDB</span><span class=\"o\">.</span><span class=\"n\">vectors</span><span class=\"o\">.</span><span class=\"n\">Vector</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide.set_dihedrals", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.set_dihedrals", "kind": "function", "doc": "<p>Set the disulfide's dihedral angles, Chi1-Chi5. -180 - 180 degrees.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>chi1</strong>:  Chi1</li>\n<li><strong>chi2</strong>:  Chi2</li>\n<li><strong>chi3</strong>:  Chi3</li>\n<li><strong>chi4</strong>:  Chi4</li>\n<li><strong>chi5</strong>:  Chi5</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">chi1</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">chi2</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">chi3</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">chi4</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">chi5</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide.set_name", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.set_name", "kind": "function", "doc": "<p>Set the Disulfide's name.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>namestr</strong>:  Name, by default \"Disulfide\"</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">namestr</span><span class=\"o\">=</span><span class=\"s1\">&#39;Disulfide&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide.set_resnum", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.set_resnum", "kind": "function", "doc": "<p>Set the proximal and residue numbers for the Disulfide.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>proximal</strong>:  Proximal residue number</li>\n<li><strong>distal</strong>:  Distal residue number</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">proximal</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">distal</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide.Torsion_Length", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.Torsion_Length", "kind": "function", "doc": "<p>Compute the 5D Euclidean length of the Disulfide object.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Torsion length (Degrees)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide.Torsion_Distance", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.Torsion_Distance", "kind": "function", "doc": "<p>Calculate the 5D Euclidean distance between <code>self</code> and another Disulfide\nobject. This is used to compare Disulfide Bond torsion angles to\ndetermine their torsional similarity via a 5-Dimensional Euclidean distance metric.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>other</strong>:  Comparison Disulfide</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ProteusPyWarning</strong>:  Warning if <code>other</code> is not a Disulfide object</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Euclidean distance (Degrees) between <code>self</code> and <code>other</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide.Torsion_neighbors", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.Torsion_neighbors", "kind": "function", "doc": "<p>Return a list of Disulfides within the angular cutoff in the others list.\nThis routine is used to find Disulfides having the same torsion length\nwithin the others list. This is used to find families of Disulfides with\nsimilar conformations. Assumes self is properly initialized.</p>\n\n<p><em>NB</em> The routine will not distinguish between +/-\ndihedral angles. <em>i.e.</em> [-60, -60, -90, -60, -60] would have the same\ntorsion length as [60, 60, 90, 60, 60], two clearly different structures.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>others</strong>:  <code>DisulfideList</code> to search</li>\n<li><strong>cutoff</strong>:  Dihedral angle degree cutoff</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>DisulfideList within the cutoff</p>\n</blockquote>\n\n<p>Example:\nIn this example we load the disulfide database subset, find the disulfides with\nthe lowest and highest energies, and then find the nearest conformational neighbors.\nFinally, we display the neighbors overlaid against a common reference frame.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">proteusPy</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">proteusPy.DisulfideLoader</span> <span class=\"kn\">import</span> <span class=\"n\">Load_PDB_SS</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">proteusPy.DisulfideList</span> <span class=\"kn\">import</span> <span class=\"n\">DisulfideList</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">proteusPy.Disulfide</span> <span class=\"kn\">import</span> <span class=\"n\">Disulfide</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PDB_SS</span> <span class=\"o\">=</span> <span class=\"n\">Load_PDB_SS</span><span class=\"p\">(</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">subset</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ss_list</span> <span class=\"o\">=</span> <span class=\"n\">DisulfideList</span><span class=\"p\">([],</span> <span class=\"s1\">&#39;tmp&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>We point to the complete list to search for lowest and highest energies.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sslist</span> <span class=\"o\">=</span> <span class=\"n\">PDB_SS</span><span class=\"o\">.</span><span class=\"n\">SSList</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ssmin_enrg</span><span class=\"p\">,</span> <span class=\"n\">ssmax_enrg</span> <span class=\"o\">=</span> <span class=\"n\">PDB_SS</span><span class=\"o\">.</span><span class=\"n\">SSList</span><span class=\"o\">.</span><span class=\"n\">minmax_energy</span>\n</code></pre>\n</div>\n\n<p>Make an empty list and find the nearest neighbors within 10 degrees avg RMS in\nsidechain dihedral angle space.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">low_energy_neighbors</span> <span class=\"o\">=</span> <span class=\"n\">DisulfideList</span><span class=\"p\">([],</span><span class=\"s1\">&#39;Neighbors&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">low_energy_neighbors</span> <span class=\"o\">=</span> <span class=\"n\">ssmin_enrg</span><span class=\"o\">.</span><span class=\"n\">Torsion_neighbors</span><span class=\"p\">(</span><span class=\"n\">sslist</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Display the number found, and then display them overlaid onto their common reference frame.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tot</span> <span class=\"o\">=</span> <span class=\"n\">low_energy_neighbors</span><span class=\"o\">.</span><span class=\"n\">length</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">&#39;Neighbors: </span><span class=\"si\">{</span><span class=\"n\">tot</span><span class=\"si\">}</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">Neighbors: 2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">low_energy_neighbors</span><span class=\"o\">.</span><span class=\"n\">display_overlay</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">others</span>, </span><span class=\"param\"><span class=\"n\">cutoff</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide.torsion_to_sixclass", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide.torsion_to_sixclass", "kind": "function", "doc": "<p>Return the sextant class string for <code>self</code>.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DisulfideIOException</strong>:  _description_</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Sextant string</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.parse_ssbond_header_rec", "modulename": "proteusPy.Disulfide", "qualname": "parse_ssbond_header_rec", "kind": "function", "doc": "<p>Parse the SSBOND dict returned by parse_pdb_header.\nNB: Requires EGS-Modified BIO.parse_pdb_header.py.\nThis is used internally.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ssbond_dict</strong>:  the input SSBOND dict</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of tuples representing the proximal,\n      distal residue ids for the Disulfide.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ssbond_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Download_Disulfides", "modulename": "proteusPy.Disulfide", "qualname": "Download_Disulfides", "kind": "function", "doc": "<p>Read a comma separated list of PDB IDs and downloads them\nto the pdb_home path.</p>\n\n<p>This utility function is used to download proteins containing at least\none SS bond with the ID list generated from: <a href=\"http://www.rcsb.org/\">http://www.rcsb.org/</a>.</p>\n\n<p>This is the primary data loader for the proteusPy Disulfide\nanalysis package. The list of IDs represents files in the\nRCSB containing &gt; 1 disulfide bond, and it contains\nover 39000 structures. The total download takes about 12 hours. The\nfunction keeps track of downloaded files so it's possible to interrupt and\nrestart the download without duplicating effort.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>pdb_home</strong>:  Path for downloaded files, defaults to PDB_DIR</li>\n<li><strong>model_home</strong>:  Path for extracted data, defaults to MODEL_DIR</li>\n<li><strong>verbose</strong>:  Verbosity, defaults to False</li>\n<li><strong>reset</strong>:  Reset the downloaded files index. Used to restart the download.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DisulfideIOException</strong>:  I/O error raised when the PDB file is not found.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">pdb_home</span><span class=\"o\">=</span><span class=\"s1\">&#39;/Users/egs/PDB/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">model_home</span><span class=\"o\">=</span><span class=\"s1\">&#39;/Users/egs/PDB/good/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">reset</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Extract_Disulfides", "modulename": "proteusPy.Disulfide", "qualname": "Extract_Disulfides", "kind": "function", "doc": "<p>Create the .pkl files needed for the\nproteusPy.DisulfideLoader.DisulfideLoader class.\nThe <code>Disulfide</code> objects are contained in a <code>DisulfideList</code> object and\n<code>Dict</code> within these files. In addition, .csv files containing all of\nthe torsions for the disulfides and problem IDs are written. The optional\n<code>dist_cutoff</code> allows for removal of Disufides whose C\u03b1-C\u03b1 distance is &gt;\nthan the cutoff value. If it's -1.0 then the function keeps all Disulfides.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>numb</strong>:            number of entries to process, defaults to all</li>\n<li><strong>verbose</strong>:         more messages</li>\n<li><strong>quiet</strong>:           turns off DisulfideConstruction warnings</li>\n<li><strong>pdbdir</strong>:          path to PDB files</li>\n<li><strong>datadir</strong>:         path to resulting .pkl files</li>\n<li><strong>picklefile</strong>:      name of the disulfide .pkl file</li>\n<li><strong>torsionfile</strong>:     name of the disulfide torsion file .csv created</li>\n<li><strong>problemfile</strong>:     name of the .csv file containing problem ids</li>\n<li><strong>dictfile</strong>:        name of the .pkl file</li>\n<li><strong>dist_cutoff</strong>:     Ca distance cutoff to reject a Disulfide.</li>\n</ul>\n\n<p>The following examples illustrate some basic functions of the disulfide classes:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">proteusPy.Disulfide</span> <span class=\"kn\">import</span> <span class=\"n\">Disulfide</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">proteusPy.DisulfideLoader</span> <span class=\"kn\">import</span> <span class=\"n\">DisulfideLoader</span><span class=\"p\">,</span> <span class=\"n\">Load_PDB_SS</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">proteusPy.DisulfideList</span> <span class=\"kn\">import</span> <span class=\"n\">DisulfideList</span>\n</code></pre>\n</div>\n\n<p>Instantiate some variables. Note: the list is initialized with an iterable and a name (optional)</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">SS</span> <span class=\"o\">=</span> <span class=\"n\">Disulfide</span><span class=\"p\">(</span><span class=\"s1\">&#39;tmp&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">SSlist</span> <span class=\"o\">=</span> <span class=\"n\">DisulfideList</span><span class=\"p\">([],</span><span class=\"s1\">&#39;ss&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Load the Disulfide subset database. This contains around 8300 disulfides and loads\nfairly quickly.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PDB_SS</span> <span class=\"o\">=</span> <span class=\"n\">DisulfideLoader</span><span class=\"p\">(</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">subset</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>The dataset can be indexed numerically, up to index: PDB_SS.Length(). Get the first SS:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">SS</span> <span class=\"o\">=</span> <span class=\"n\">PDB_SS</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">SS</span>\n<span class=\"go\">&lt;Disulfide 4yys_22A_65A, Source: 4yys, Resolution: 1.35 \u00c5&gt;</span>\n</code></pre>\n</div>\n\n<p>The dataset can also be indexed by PDB ID. Get the DisulfideList for ID 4yys:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">SS4yys</span> <span class=\"o\">=</span> <span class=\"n\">PDB_SS</span><span class=\"p\">[</span><span class=\"s1\">&#39;4yys&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">SS4yys</span>\n<span class=\"go\">[&lt;Disulfide 4yys_22A_65A, Source: 4yys, Resolution: 1.35 \u00c5&gt;, &lt;Disulfide 4yys_56A_98A, Source: 4yys, Resolution: 1.35 \u00c5&gt;, &lt;Disulfide 4yys_156A_207A, Source: 4yys, Resolution: 1.35 \u00c5&gt;]</span>\n</code></pre>\n</div>\n\n<p>Make some empty disulfides:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ss1</span> <span class=\"o\">=</span> <span class=\"n\">Disulfide</span><span class=\"p\">(</span><span class=\"s1\">&#39;ss1&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ss2</span> <span class=\"o\">=</span> <span class=\"n\">Disulfide</span><span class=\"p\">(</span><span class=\"s1\">&#39;ss2&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Make a DisulfideList containing ss1, named 'tmp':</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sslist</span> <span class=\"o\">=</span> <span class=\"n\">DisulfideList</span><span class=\"p\">([</span><span class=\"n\">ss1</span><span class=\"p\">],</span> <span class=\"s1\">&#39;tmp&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Append ss2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sslist</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ss2</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Extract the first disulfide and print it:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ss1</span> <span class=\"o\">=</span> <span class=\"n\">PDB_SS</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ss1</span><span class=\"o\">.</span><span class=\"n\">dihedrals</span>\n<span class=\"go\">[174.62923341948851, 82.51771039903726, -83.32224872066772, -62.52364351964355, -73.82728569383424]</span>\n</code></pre>\n</div>\n\n<p>Get a list of disulfides via slicing and display them oriented against a common\nreference frame (the proximal N, C\u03b1, C').</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">subset</span> <span class=\"o\">=</span> <span class=\"n\">DisulfideList</span><span class=\"p\">(</span><span class=\"n\">PDB_SS</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">10</span><span class=\"p\">],</span><span class=\"s1\">&#39;subset&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">subset</span><span class=\"o\">.</span><span class=\"n\">display_overlay</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<p>Take a screenshot. You can position the orientation, then close the window:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">subset</span><span class=\"o\">.</span><span class=\"n\">display_overlay</span><span class=\"p\">(</span><span class=\"n\">screenshot</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">fname</span><span class=\"o\">=</span><span class=\"s1\">&#39;subset.png&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Browse the documentation for more functionality. The display functions are particularly useful.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">numb</span><span class=\"o\">=-</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">quiet</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">pdbdir</span><span class=\"o\">=</span><span class=\"s1\">&#39;/Users/egs/PDB/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">datadir</span><span class=\"o\">=</span><span class=\"s1\">&#39;/Users/egs/PDB/good/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">picklefile</span><span class=\"o\">=</span><span class=\"s1\">&#39;PDB_all_ss.pkl&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">torsionfile</span><span class=\"o\">=</span><span class=\"s1\">&#39;PDB_all_SS_torsions.csv&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">problemfile</span><span class=\"o\">=</span><span class=\"s1\">&#39;PDB_all_SS_problems.csv&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">dictfile</span><span class=\"o\">=</span><span class=\"s1\">&#39;PDB_all_ss_dict.pkl&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">dist_cutoff</span><span class=\"o\">=-</span><span class=\"mf\">1.0</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.check_header_from_file", "modulename": "proteusPy.Disulfide", "qualname": "check_header_from_file", "kind": "function", "doc": "<p>Check the Disulfides by PDB ID and initializes the Disulfide objects.\nAssumes the file is downloaded in the pdb_dir path.</p>\n\n<p>NB: Requires EGS-Modified BIO.parse_pdb_header.py from <a href=\"https://github.com/suchanek/biopython/\">https://github.com/suchanek/biopython/</a></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>struct_name</strong>:  the name of the PDB entry.</li>\n<li><strong>pdb_dir</strong>:  path to the PDB files, defaults to <code>MODEL_DIR</code></li>\n<li><strong>model_numb</strong>:  model number to use, defaults to 0 for single structure files.</li>\n<li><strong>verbose</strong>:  print info while parsing</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True if parsable</p>\n</blockquote>\n\n<p>Example:\n  Assuming <code>MODEL_DIR</code> has the pdb5rsa.ent file we can load the disulfides\n  with the following:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">proteusPy.Disulfide</span> <span class=\"kn\">import</span> <span class=\"n\">Disulfide</span><span class=\"p\">,</span> <span class=\"n\">check_header_from_file</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">MODEL_DIR</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/Users/egs/PDB/good/&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">OK</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">OK</span> <span class=\"o\">=</span> <span class=\"n\">check_header_from_file</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">&#39;</span><span class=\"si\">{</span><span class=\"n\">MODEL_DIR</span><span class=\"si\">}</span><span class=\"s1\">pdb5rsa.ent&#39;</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">-&gt; check_header_from_file() - Parsing file: /Users/egs/PDB/good/pdb5rsa.ent:</span>\n<span class=\"go\"> -&gt; SSBond: 1: tmp: 26A - 84A</span>\n<span class=\"go\"> -&gt; SSBond: 2: tmp: 40A - 95A</span>\n<span class=\"go\"> -&gt; SSBond: 3: tmp: 58A - 110A</span>\n<span class=\"go\"> -&gt; SSBond: 4: tmp: 65A - 72A</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">OK</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">model_numb</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">dbg</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.check_header_from_id", "modulename": "proteusPy.Disulfide", "qualname": "check_header_from_id", "kind": "function", "doc": "<p>Check parsability PDB ID and initializes the Disulfide objects.\nAssumes the file is downloaded in <code>MODEL_DIR</code> path.</p>\n\n<p>NB: Requires EGS-Modified BIO.parse_pdb_header.py from <a href=\"https://github.com/suchanek/biopython/\">https://github.com/suchanek/biopython/</a></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>struct_name</strong>:  the name of the PDB entry.</li>\n<li><strong>pdb_dir</strong>:  path to the PDB files, defaults to PDB_DIR</li>\n<li><strong>model_numb</strong>:  model number to use, defaults to 0 for single structure files.</li>\n<li><strong>verbose</strong>:  print info while parsing</li>\n<li><strong>dbg</strong>:  Debugging Flag</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True if OK, False otherwise</p>\n</blockquote>\n\n<p>Example:\n  Assuming the PDB_DIR has the pdb5rsa.ent file we can check the file thusly:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">proteusPy.Disulfide</span> <span class=\"kn\">import</span> <span class=\"n\">Disulfide</span><span class=\"p\">,</span> <span class=\"n\">check_header_from_id</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">MODEL_DIR</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/Users/egs/PDB/good/&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">OK</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">OK</span> <span class=\"o\">=</span> <span class=\"n\">check_header_from_id</span><span class=\"p\">(</span><span class=\"s1\">&#39;5rsa&#39;</span><span class=\"p\">,</span> <span class=\"n\">pdb_dir</span><span class=\"o\">=</span><span class=\"n\">MODEL_DIR</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\"> -&gt; SSBond: 1: 5rsa: 26A - 84A</span>\n<span class=\"go\"> -&gt; SSBond: 2: 5rsa: 40A - 95A</span>\n<span class=\"go\"> -&gt; SSBond: 3: 5rsa: 58A - 110A</span>\n<span class=\"go\"> -&gt; SSBond: 4: 5rsa: 65A - 72A</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">OK</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">struct_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">pdb_dir</span><span class=\"o\">=</span><span class=\"s1\">&#39;.&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">model_numb</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">dbg</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Disulfide.Disulfide_Energy_Function", "modulename": "proteusPy.Disulfide", "qualname": "Disulfide_Energy_Function", "kind": "function", "doc": "<p>Compute the approximate torsional energy (kcal/mpl) for the input dihedral angles.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x: A list of dihedral angles</strong>:  [chi1, chi2, chi3, chi4, chi5]</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Energy in kcal/mol</p>\n</blockquote>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">proteusPy.Disulfide</span> <span class=\"kn\">import</span> <span class=\"n\">Disulfide_Energy_Function</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dihed</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">60.0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">60.0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">90.0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">60.0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">90.0</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">Disulfide_Energy_Function</span><span class=\"p\">(</span><span class=\"n\">dihed</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">res</span>\n<span class=\"go\">2.5999999999999996</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideClass_Constructor", "modulename": "proteusPy.DisulfideClass_Constructor", "kind": "module", "doc": "<p>DisulfideBond Class Analysis Dictionary creation\nAuthor: Eric G. Suchanek, PhD.\nLicense: BSD\nLast Modification: 2/19/24 -egs-</p>\n\n<p>Disulfide Class creation and manipulation using the +/- formalism of Hogg et al. (Biochem, 2006, 45, 7429-7433), \nacross all 32 possible classes. Classes are named per Hogg's convention.</p>\n"}, {"fullname": "proteusPy.DisulfideClass_Constructor.merge_cols", "modulename": "proteusPy.DisulfideClass_Constructor", "qualname": "merge_cols", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;chi1_s&#x27;, &#x27;chi2_s&#x27;, &#x27;chi3_s&#x27;, &#x27;chi4_s&#x27;, &#x27;chi5_s&#x27;, &#x27;class_id&#x27;, &#x27;SS_Classname&#x27;, &#x27;FXN&#x27;, &#x27;count&#x27;, &#x27;incidence&#x27;, &#x27;percentage&#x27;, &#x27;ca_distance_mean&#x27;, &#x27;ca_distance_std&#x27;, &#x27;torsion_length_mean&#x27;, &#x27;torsion_length_std&#x27;, &#x27;energy_mean&#x27;, &#x27;energy_std&#x27;, &#x27;ss_id&#x27;]"}, {"fullname": "proteusPy.DisulfideClass_Constructor.DisulfideClass_Constructor", "modulename": "proteusPy.DisulfideClass_Constructor", "qualname": "DisulfideClass_Constructor", "kind": "class", "doc": "<p>This Class manages structural classes for the disulfide bonds contained\nin the proteusPy disulfide database.</p>\n\n<p>Build the internal dictionary mapping disulfides to class names.</p>\n\n<p>Disulfide binary classes are defined using the \u00b1 formalism described by\nSchmidt et al. (Biochem, 2006, 45, 7429-7433), across all 32 (2^5), possible\nbinary sidechain torsional combinations. Classes are named per Schmidt's convention.\nThe <code>class_id</code> represents the sign of each dihedral angle $\\chi_{1} - \\chi_{1'}$\nwhere <em>0</em> repreents <em>negative</em> dihedral angle and <em>2</em> a <em>positive</em> angle.</p>\n\n<table>\n<thead>\n<tr>\n  <th style=\"text-align:right;\">class_id</th>\n  <th style=\"text-align:left;\">SS_Classname</th>\n  <th style=\"text-align:left;\">FXN</th>\n  <th style=\"text-align:right;\">count</th>\n  <th style=\"text-align:right;\">incidence</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td style=\"text-align:right;\">00000</td>\n  <td style=\"text-align:left;\">-LHSpiral</td>\n  <td style=\"text-align:left;\">UNK</td>\n  <td style=\"text-align:right;\">31513</td>\n  <td style=\"text-align:right;\">0.261092</td>\n</tr>\n<tr>\n  <td style=\"text-align:right;\">00002</td>\n  <td style=\"text-align:left;\">00002</td>\n  <td style=\"text-align:left;\">UNK</td>\n  <td style=\"text-align:right;\">5805</td>\n  <td style=\"text-align:right;\">0.0480956</td>\n</tr>\n<tr>\n  <td style=\"text-align:right;\">00020</td>\n  <td style=\"text-align:left;\">-LHHook</td>\n  <td style=\"text-align:left;\">UNK</td>\n  <td style=\"text-align:right;\">3413</td>\n  <td style=\"text-align:right;\">0.0282774</td>\n</tr>\n<tr>\n  <td style=\"text-align:right;\">00022</td>\n  <td style=\"text-align:left;\">00022</td>\n  <td style=\"text-align:left;\">UNK</td>\n  <td style=\"text-align:right;\">1940</td>\n  <td style=\"text-align:right;\">0.0160733</td>\n</tr>\n<tr>\n  <td style=\"text-align:right;\">00200</td>\n  <td style=\"text-align:left;\">-RHStaple</td>\n  <td style=\"text-align:left;\">Allosteric</td>\n  <td style=\"text-align:right;\">12735</td>\n  <td style=\"text-align:right;\">0.105512</td>\n</tr>\n<tr>\n  <td style=\"text-align:right;\">00202</td>\n  <td style=\"text-align:left;\">00202</td>\n  <td style=\"text-align:left;\">UNK</td>\n  <td style=\"text-align:right;\">993</td>\n  <td style=\"text-align:right;\">0.00822721</td>\n</tr>\n<tr>\n  <td style=\"text-align:right;\">00220</td>\n  <td style=\"text-align:left;\">00220</td>\n  <td style=\"text-align:left;\">UNK</td>\n  <td style=\"text-align:right;\">5674</td>\n  <td style=\"text-align:right;\">0.0470103</td>\n</tr>\n<tr>\n  <td style=\"text-align:right;\">00222</td>\n  <td style=\"text-align:left;\">00222</td>\n  <td style=\"text-align:left;\">UNK</td>\n  <td style=\"text-align:right;\">5092</td>\n  <td style=\"text-align:right;\">0.0421883</td>\n</tr>\n<tr>\n  <td style=\"text-align:right;\">02000</td>\n  <td style=\"text-align:left;\">02000</td>\n  <td style=\"text-align:left;\">UNK</td>\n  <td style=\"text-align:right;\">4749</td>\n  <td style=\"text-align:right;\">0.0393465</td>\n</tr>\n<tr>\n  <td style=\"text-align:right;\">02002</td>\n  <td style=\"text-align:left;\">02002</td>\n  <td style=\"text-align:left;\">UNK</td>\n  <td style=\"text-align:right;\">3774</td>\n  <td style=\"text-align:right;\">0.0312684</td>\n</tr>\n<tr>\n  <td style=\"text-align:right;\">02020</td>\n  <td style=\"text-align:left;\">-LHStaple</td>\n  <td style=\"text-align:left;\">UNK</td>\n  <td style=\"text-align:right;\">1494</td>\n  <td style=\"text-align:right;\">0.0123781</td>\n</tr>\n<tr>\n  <td style=\"text-align:right;\">02022</td>\n  <td style=\"text-align:left;\">02022</td>\n  <td style=\"text-align:left;\">UNK</td>\n  <td style=\"text-align:right;\">591</td>\n  <td style=\"text-align:right;\">0.00489656</td>\n</tr>\n<tr>\n  <td style=\"text-align:right;\">02200</td>\n  <td style=\"text-align:left;\">-RHHook</td>\n  <td style=\"text-align:left;\">UNK</td>\n  <td style=\"text-align:right;\">5090</td>\n  <td style=\"text-align:right;\">0.0421717</td>\n</tr>\n<tr>\n  <td style=\"text-align:right;\">02202</td>\n  <td style=\"text-align:left;\">02202</td>\n  <td style=\"text-align:left;\">UNK</td>\n  <td style=\"text-align:right;\">533</td>\n  <td style=\"text-align:right;\">0.00441602</td>\n</tr>\n<tr>\n  <td style=\"text-align:right;\">02220</td>\n  <td style=\"text-align:left;\">-RHSpiral</td>\n  <td style=\"text-align:left;\">UNK</td>\n  <td style=\"text-align:right;\">6751</td>\n  <td style=\"text-align:right;\">0.0559335</td>\n</tr>\n<tr>\n  <td style=\"text-align:right;\">02222</td>\n  <td style=\"text-align:left;\">02222</td>\n  <td style=\"text-align:left;\">UNK</td>\n  <td style=\"text-align:right;\">3474</td>\n  <td style=\"text-align:right;\">0.0287828</td>\n</tr>\n<tr>\n  <td style=\"text-align:right;\">20000</td>\n  <td style=\"text-align:left;\">\u00b1LHSpiral</td>\n  <td style=\"text-align:left;\">UNK</td>\n  <td style=\"text-align:right;\">3847</td>\n  <td style=\"text-align:right;\">0.0318732</td>\n</tr>\n<tr>\n  <td style=\"text-align:right;\">20002</td>\n  <td style=\"text-align:left;\">+LHSpiral</td>\n  <td style=\"text-align:left;\">UNK</td>\n  <td style=\"text-align:right;\">875</td>\n  <td style=\"text-align:right;\">0.00724956</td>\n</tr>\n<tr>\n  <td style=\"text-align:right;\">20020</td>\n  <td style=\"text-align:left;\">\u00b1LHHook</td>\n  <td style=\"text-align:left;\">UNK</td>\n  <td style=\"text-align:right;\">803</td>\n  <td style=\"text-align:right;\">0.00665302</td>\n</tr>\n<tr>\n  <td style=\"text-align:right;\">20022</td>\n  <td style=\"text-align:left;\">+LHHook</td>\n  <td style=\"text-align:left;\">UNK</td>\n  <td style=\"text-align:right;\">602</td>\n  <td style=\"text-align:right;\">0.0049877</td>\n</tr>\n<tr>\n  <td style=\"text-align:right;\">20200</td>\n  <td style=\"text-align:left;\">\u00b1RHStaple</td>\n  <td style=\"text-align:left;\">UNK</td>\n  <td style=\"text-align:right;\">419</td>\n  <td style=\"text-align:right;\">0.0034715</td>\n</tr>\n<tr>\n  <td style=\"text-align:right;\">20202</td>\n  <td style=\"text-align:left;\">+RHStaple</td>\n  <td style=\"text-align:left;\">UNK</td>\n  <td style=\"text-align:right;\">293</td>\n  <td style=\"text-align:right;\">0.00242757</td>\n</tr>\n<tr>\n  <td style=\"text-align:right;\">20220</td>\n  <td style=\"text-align:left;\">\u00b1RHHook</td>\n  <td style=\"text-align:left;\">Catalytic</td>\n  <td style=\"text-align:right;\">1435</td>\n  <td style=\"text-align:right;\">0.0118893</td>\n</tr>\n<tr>\n  <td style=\"text-align:right;\">20222</td>\n  <td style=\"text-align:left;\">20222</td>\n  <td style=\"text-align:left;\">UNK</td>\n  <td style=\"text-align:right;\">488</td>\n  <td style=\"text-align:right;\">0.00404318</td>\n</tr>\n<tr>\n  <td style=\"text-align:right;\">22000</td>\n  <td style=\"text-align:left;\">-/+LHHook</td>\n  <td style=\"text-align:left;\">UNK</td>\n  <td style=\"text-align:right;\">2455</td>\n  <td style=\"text-align:right;\">0.0203402</td>\n</tr>\n<tr>\n  <td style=\"text-align:right;\">22002</td>\n  <td style=\"text-align:left;\">22002</td>\n  <td style=\"text-align:left;\">UNK</td>\n  <td style=\"text-align:right;\">1027</td>\n  <td style=\"text-align:right;\">0.00850891</td>\n</tr>\n<tr>\n  <td style=\"text-align:right;\">22020</td>\n  <td style=\"text-align:left;\">\u00b1LHStaple</td>\n  <td style=\"text-align:left;\">UNK</td>\n  <td style=\"text-align:right;\">1046</td>\n  <td style=\"text-align:right;\">0.00866633</td>\n</tr>\n<tr>\n  <td style=\"text-align:right;\">22022</td>\n  <td style=\"text-align:left;\">+LHStaple</td>\n  <td style=\"text-align:left;\">UNK</td>\n  <td style=\"text-align:right;\">300</td>\n  <td style=\"text-align:right;\">0.00248556</td>\n</tr>\n<tr>\n  <td style=\"text-align:right;\">22200</td>\n  <td style=\"text-align:left;\">-/+RHHook</td>\n  <td style=\"text-align:left;\">UNK</td>\n  <td style=\"text-align:right;\">6684</td>\n  <td style=\"text-align:right;\">0.0553783</td>\n</tr>\n<tr>\n  <td style=\"text-align:right;\">22202</td>\n  <td style=\"text-align:left;\">+RHHook</td>\n  <td style=\"text-align:left;\">UNK</td>\n  <td style=\"text-align:right;\">593</td>\n  <td style=\"text-align:right;\">0.00491313</td>\n</tr>\n<tr>\n  <td style=\"text-align:right;\">22220</td>\n  <td style=\"text-align:left;\">\u00b1RHSpiral</td>\n  <td style=\"text-align:left;\">UNK</td>\n  <td style=\"text-align:right;\">2544</td>\n  <td style=\"text-align:right;\">0.0210776</td>\n</tr>\n<tr>\n  <td style=\"text-align:right;\">22222</td>\n  <td style=\"text-align:left;\">+RHSpiral</td>\n  <td style=\"text-align:left;\">UNK</td>\n  <td style=\"text-align:right;\">3665</td>\n  <td style=\"text-align:right;\">0.0303653</td>\n</tr>\n</tbody>\n</table>\n"}, {"fullname": "proteusPy.DisulfideClass_Constructor.DisulfideClass_Constructor.__init__", "modulename": "proteusPy.DisulfideClass_Constructor", "qualname": "DisulfideClass_Constructor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">loader</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, {"fullname": "proteusPy.DisulfideClass_Constructor.DisulfideClass_Constructor.verbose", "modulename": "proteusPy.DisulfideClass_Constructor", "qualname": "DisulfideClass_Constructor.verbose", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.DisulfideClass_Constructor.DisulfideClass_Constructor.classdict", "modulename": "proteusPy.DisulfideClass_Constructor", "qualname": "DisulfideClass_Constructor.classdict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.DisulfideClass_Constructor.DisulfideClass_Constructor.classdf", "modulename": "proteusPy.DisulfideClass_Constructor", "qualname": "DisulfideClass_Constructor.classdf", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.DisulfideClass_Constructor.DisulfideClass_Constructor.sixclass_df", "modulename": "proteusPy.DisulfideClass_Constructor", "qualname": "DisulfideClass_Constructor.sixclass_df", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.DisulfideClass_Constructor.DisulfideClass_Constructor.load_class_dict", "modulename": "proteusPy.DisulfideClass_Constructor", "qualname": "DisulfideClass_Constructor.load_class_dict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">fname</span><span class=\"o\">=</span><span class=\"s1\">&#39;/Users/egs/repos/proteusPy/proteusPy/data/PDB_ss_classes_dict.pkl&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideClass_Constructor.DisulfideClass_Constructor.load_consensus_file", "modulename": "proteusPy.DisulfideClass_Constructor", "qualname": "DisulfideClass_Constructor.load_consensus_file", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">fname</span><span class=\"o\">=</span><span class=\"s1\">&#39;/Users/egs/repos/proteusPy/proteusPy/data/SS_consensus_class_sext.pkl&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideClass_Constructor.DisulfideClass_Constructor.build_class_df", "modulename": "proteusPy.DisulfideClass_Constructor", "qualname": "DisulfideClass_Constructor.build_class_df", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">class_df</span>, </span><span class=\"param\"><span class=\"n\">group_df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideClass_Constructor.DisulfideClass_Constructor.list_binary_classes", "modulename": "proteusPy.DisulfideClass_Constructor", "qualname": "DisulfideClass_Constructor.list_binary_classes", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideClass_Constructor.DisulfideClass_Constructor.from_class", "modulename": "proteusPy.DisulfideClass_Constructor", "qualname": "DisulfideClass_Constructor.from_class", "kind": "function", "doc": "<p>Return a list of disulfides corresponding to the input class ID\nstring.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>classid</strong>:  Class ID, e.g. '+RHStaple'</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>DisulfideList of class members</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">classid</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">proteusPy</span><span class=\"o\">.</span><span class=\"n\">DisulfideList</span><span class=\"o\">.</span><span class=\"n\">DisulfideList</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideClass_Constructor.DisulfideClass_Constructor.concat_dataframes", "modulename": "proteusPy.DisulfideClass_Constructor", "qualname": "DisulfideClass_Constructor.concat_dataframes", "kind": "function", "doc": "<p>Concatenates columns from one data frame into the other\nand returns the new result.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>df1 : pandas.DataFrame\n    The first data frame.\ndf2 : pandas.DataFrame\n    The second data frame.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>pandas.DataFrame\n    The concatenated data frame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">df1</span>, </span><span class=\"param\"><span class=\"n\">df2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideClass_Constructor.DisulfideClass_Constructor.binary_to_six_class", "modulename": "proteusPy.DisulfideClass_Constructor", "qualname": "DisulfideClass_Constructor.binary_to_six_class", "kind": "function", "doc": "<p>Convert a binary input string to a list of possible six-class strings.</p>\n\n<p>Returns a list of all possible combinations of ordinal sections of a unit circle\ndivided into 6 equal segments, originating at 0 degrees, rotating counterclockwise,\nbased on the sign of each angle in the input string.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>angle_str (str)</strong>:  A string of length 5, where each character represents the sign\nof an angle in the range of -180-180 degrees.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of strings of length 5, representing all possible six-class strings.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">class_str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideClass_Constructor.DisulfideClass_Constructor.build_yourself", "modulename": "proteusPy.DisulfideClass_Constructor", "qualname": "DisulfideClass_Constructor.build_yourself", "kind": "function", "doc": "<p>Build the internal structures needed for the binary and six-fold disulfide structural classes\nbased on dihedral angle rules.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>loader: DisulfideLoader object</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">loader</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideClass_Constructor.DisulfideClass_Constructor.create_binary_classes", "modulename": "proteusPy.DisulfideClass_Constructor", "qualname": "DisulfideClass_Constructor.create_binary_classes", "kind": "function", "doc": "<p>Group the DataFrame by the sign of the chi columns and create a new class ID column for each unique grouping.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>df</strong>:  A pandas DataFrame containing columns 'ss_id', 'chi1', 'chi2', 'chi3', 'chi4', 'chi5', 'ca_distance',\n'cb_distance', 'torsion_length', and 'energy'.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A pandas DataFrame containing columns 'class_id', 'ss_id', and 'count', where 'class_id' is a unique identifier for each grouping of chi signs, 'ss_id' is a list of all 'ss_id' values in that grouping, and 'count'\n  is the number of rows in that grouping.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">df</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideClass_Constructor.DisulfideClass_Constructor.create_six_classes", "modulename": "proteusPy.DisulfideClass_Constructor", "qualname": "DisulfideClass_Constructor.create_six_classes", "kind": "function", "doc": "<p>Create a new DataFrame from the input with a 6-class encoding for input 'chi' values.</p>\n\n<p>The function takes a pandas DataFrame containing the following columns:\n'ss_id', 'chi1', 'chi2', 'chi3', 'chi4', 'chi5', 'ca_distance', 'cb_distance',\n'torsion_length', 'energy', and 'rho', and adds a class ID column based on the following rules:</p>\n\n<ol>\n<li>A new column named <code>class_id</code> is added, which is the concatenation of the individual class IDs per Chi.</li>\n<li>The DataFrame is grouped by the <code>class_id</code> column, and a new DataFrame is returned that shows the unique <code>ss_id</code> values for each group,\nthe count of unique <code>ss_id</code> values, the incidence of each group as a proportion of the total DataFrame, and the\npercentage of incidence.</li>\n</ol>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>df</strong>:  A pandas DataFrame containing columns 'ss_id', 'chi1', 'chi2', 'chi3', 'chi4', 'chi5',\n'ca_distance', 'cb_distance', 'torsion_length', 'energy', and 'rho'</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The grouped DataFrame with the added class column.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">df</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideClass_Constructor.DisulfideClass_Constructor.filter_sixclass_by_percentage", "modulename": "proteusPy.DisulfideClass_Constructor", "qualname": "DisulfideClass_Constructor.filter_sixclass_by_percentage", "kind": "function", "doc": "<p>Filter the six-class definitions by percentage.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>df</strong>:  A Pandas DataFrame with an 'percentage' column to filter by</li>\n<li><strong>cutoff</strong>:  A numeric value specifying the minimum percentage required for a row to be included in the output</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A new Pandas DataFrame containing only rows where the percentage is greater than or equal to the cutoff</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cutoff</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideClass_Constructor.DisulfideClass_Constructor.get_sixth_quadrant", "modulename": "proteusPy.DisulfideClass_Constructor", "qualname": "DisulfideClass_Constructor.get_sixth_quadrant", "kind": "function", "doc": "<p>Return the sextant in which an angle in degrees lies if the area is described by dividing a unit circle into 6 equal segments.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>angle_deg (float)</strong>:  The angle in degrees.</li>\n</ul>\n\n<p>Returns:</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The sextant (1-6) that the angle belongs to.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">angle_deg</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideClass_Constructor.DisulfideClass_Constructor.sslist_from_classid", "modulename": "proteusPy.DisulfideClass_Constructor", "qualname": "DisulfideClass_Constructor.sslist_from_classid", "kind": "function", "doc": "<p>Return the list of Disulfides from the classID string.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cls</strong>:  ClassID string</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"bp\">cls</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">proteusPy</span><span class=\"o\">.</span><span class=\"n\">DisulfideList</span><span class=\"o\">.</span><span class=\"n\">DisulfideList</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideClass_Constructor.DisulfideClass_Constructor.save", "modulename": "proteusPy.DisulfideClass_Constructor", "qualname": "DisulfideClass_Constructor.save", "kind": "function", "doc": "<p>Save a copy of the fully instantiated class to the specified file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>savepath</strong>:  Path to save the file, defaults to DATA_DIR</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">savepath</span><span class=\"o\">=</span><span class=\"s1\">&#39;/Users/egs/repos/proteusPy/proteusPy/data/&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideClass_Constructor.DisulfideClass_Constructor.six_class_to_binary", "modulename": "proteusPy.DisulfideClass_Constructor", "qualname": "DisulfideClass_Constructor.six_class_to_binary", "kind": "function", "doc": "<p>Transforms a string of length 5 representing the ordinal section of a unit circle for an angle in range -180-180 degrees\ninto a string of 5 characters, where each character is either '1' if the corresponding input character represents a\nnegative angle or '2' if it represents a positive angle.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cls_str (str)</strong>:  A string of length 5 representing the ordinal section of a unit circle for an angle in range -180-180 degrees.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A string of length 5, where each character is either '0' or '2', representing the sign of the corresponding input angle.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cls_str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideClass_Constructor.DisulfideClass_Constructor.plot_class_chart", "modulename": "proteusPy.DisulfideClass_Constructor", "qualname": "DisulfideClass_Constructor.plot_class_chart", "kind": "function", "doc": "<p>Create a Matplotlib pie chart with <code>classes</code> segments of equal size.</p>\n\n<p>This function returns a figure representing the angular layout of\ndisulfide torsional classes for input <code>n</code> classes.</p>\n\n<p>Parameters:\n    classes (int): The number of segments to create in the pie chart.</p>\n\n<p>Returns:\n    None</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">plot_class_chart</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>This will create a pie chart with 4 equal segments.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">classes</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideClasses", "modulename": "proteusPy.DisulfideClasses", "kind": "module", "doc": "<p>Functions to create Disulfide Bond structural classes based on\ndihedral angle rules. This module is part of the proteusPy package.\nMany of the plotting functions have been folded into the DisulfideClassConstructor\nobject.</p>\n\n<p>Author: Eric G. Suchanek, PhD.</p>\n\n<p>(c) 2024 Eric G. Suchanek, PhD., All Rights Reserved\nLicense: BSD\nLast Modification: 2/19/24 -egs-</p>\n"}, {"fullname": "proteusPy.DisulfideClasses.create_classes", "modulename": "proteusPy.DisulfideClasses", "qualname": "create_classes", "kind": "function", "doc": "<p>Group the DataFrame by the sign of the chi columns and create a new class ID column for each unique grouping.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>df</strong>:  A pandas DataFrame containing columns 'ss_id', 'chi1', 'chi2', 'chi3', 'chi4', 'chi5', 'ca_distance', 'cb_distance', 'torsion_length', and 'energy'.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A pandas DataFrame containing columns 'class_id', 'ss_id', and 'count', where 'class_id' is a unique identifier for each grouping of chi signs, 'ss_id' is a list of all 'ss_id' values in that grouping, and 'count' is the number of rows in that grouping.</p>\n</blockquote>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span>\n<span class=\"gp\">... </span>   <span class=\"s1\">&#39;ss_id&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>   <span class=\"s1\">&#39;chi1&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>   <span class=\"s1\">&#39;chi2&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>   <span class=\"s1\">&#39;chi3&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>   <span class=\"s1\">&#39;chi4&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>   <span class=\"s1\">&#39;chi5&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>   <span class=\"s1\">&#39;ca_distance&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mf\">3.1</span><span class=\"p\">,</span> <span class=\"mf\">3.2</span><span class=\"p\">,</span> <span class=\"mf\">3.3</span><span class=\"p\">,</span> <span class=\"mf\">3.4</span><span class=\"p\">,</span> <span class=\"mf\">3.5</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>   <span class=\"s1\">&#39;cb_distance&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mf\">3.1</span><span class=\"p\">,</span> <span class=\"mf\">3.2</span><span class=\"p\">,</span> <span class=\"mf\">3.3</span><span class=\"p\">,</span> <span class=\"mf\">3.4</span><span class=\"p\">,</span> <span class=\"mf\">3.5</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>   <span class=\"s1\">&#39;torsion_length&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mf\">120.1</span><span class=\"p\">,</span> <span class=\"mf\">120.2</span><span class=\"p\">,</span> <span class=\"mf\">120.3</span><span class=\"p\">,</span> <span class=\"mf\">120.4</span><span class=\"p\">,</span> <span class=\"mf\">121.0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>   <span class=\"s1\">&#39;energy&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">2.3</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">2.2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">2.1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.9</span><span class=\"p\">]</span>\n<span class=\"gp\">... </span><span class=\"p\">})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">create_classes</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n<span class=\"go\">  class_id ss_id  count  incidence  percentage</span>\n<span class=\"go\">0    00200   [2]      1        0.2        20.0</span>\n<span class=\"go\">1    02020   [5]      1        0.2        20.0</span>\n<span class=\"go\">2    20020   [3]      1        0.2        20.0</span>\n<span class=\"go\">3    20022   [1]      1        0.2        20.0</span>\n<span class=\"go\">4    22200   [4]      1        0.2        20.0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideClasses.angle_within_range", "modulename": "proteusPy.DisulfideClasses", "qualname": "angle_within_range", "kind": "function", "doc": "<p>Check whether the given angle is within the specified range.</p>\n\n<p>Parameters:\n    angle (float): The angle to check, in degrees.\n    min_angle (float): The minimum angle in the range, in degrees.\n    max_angle (float): The maximum angle in the range, in degrees.</p>\n\n<p>Returns:\n    bool: True if the angle is within the range, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">angle</span>, </span><span class=\"param\"><span class=\"n\">min_angle</span>, </span><span class=\"param\"><span class=\"n\">max_angle</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideClasses.get_quadrant", "modulename": "proteusPy.DisulfideClasses", "qualname": "get_quadrant", "kind": "function", "doc": "<p>Return the quadrant in which an angle in degrees lies.</p>\n\n<p>Parameters:\n    angle_deg (float): The angle in degrees.</p>\n\n<p>Returns:\n    int: The quadrant number (1, 2, 3, or 4) that the angle belongs to.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">angle_deg</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideClasses.torsion_to_sixclass", "modulename": "proteusPy.DisulfideClasses", "qualname": "torsion_to_sixclass", "kind": "function", "doc": "<p>Return the sextant class string for the input array of torsions.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>tors</strong>:  Array of five torsions</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Sextant string</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">tors</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideClasses.get_sixth_quadrant", "modulename": "proteusPy.DisulfideClasses", "qualname": "get_sixth_quadrant", "kind": "function", "doc": "<p>Return the sextant in which an angle in degrees lies if the area is described by dividing a unit circle into 6 equal segments.</p>\n\n<p>Parameters:\n    angle_deg (float): The angle in degrees.</p>\n\n<p>Returns:\n    int: The sextant (1-6) that the angle belongs to.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">angle_deg</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideClasses.get_half_quadrant", "modulename": "proteusPy.DisulfideClasses", "qualname": "get_half_quadrant", "kind": "function", "doc": "<p>Returns the half-quadrant in which an angle in degrees lies.</p>\n\n<p>Parameters:\n    angle_deg (float): The angle in degrees.</p>\n\n<p>Returns:\n    int: The half-quadrant number (1-8) that the angle belongs to.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">angle_deg</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideClasses.create_quat_classes", "modulename": "proteusPy.DisulfideClasses", "qualname": "create_quat_classes", "kind": "function", "doc": "<p>Add new columns to the input DataFrame with a 4-class encoding for input 'chi' values.</p>\n\n<p>Takes a DataFrame containing columns 'ss_id', 'chi1', 'chi2', 'chi3', 'chi4', 'chi5', 'ca_distance',\n'cb_distance', 'torsion_length', 'energy', and 'rho' and adds new columns based on the following rules:</p>\n\n<ol>\n<li>The 'chi_t' column is set to the quadrant in which the dihedral angle is located.</li>\n</ol>\n\n<p>A new column named <code>class_id</code> is also added, which is the concatenation of the <code>_t</code> columns. The DataFrame is then\ngrouped by the <code>class_id</code> column, and a new DataFrame is returned that shows the unique <code>ss_id</code> values for each group,\nthe count of unique <code>ss_id</code> values, the incidence of each group as a proportion of the total DataFrame, and the\npercentage of incidence.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>df</strong>:  A pandas DataFrame containing columns 'ss_id', 'chi1', 'chi2', 'chi3', 'chi4', 'chi5',\n'ca_distance', 'cb_distance', 'torsion_length', 'energy', and 'rho'</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The input DataFrame with the added columns</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideClasses.filter_by_percentage", "modulename": "proteusPy.DisulfideClasses", "qualname": "filter_by_percentage", "kind": "function", "doc": "<p>Filter a pandas DataFrame by incidence</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>df</strong>:  A Pandas DataFrame with an 'incidence' column to filter by</li>\n<li><strong>cutoff</strong>:  A numeric value specifying the minimum incidence required for a row to be included in the output</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A new Pandas DataFrame containing only rows where the incidence is greater than or equal to the cutoff</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>, </span><span class=\"param\"><span class=\"n\">cutoff</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideClasses.get_ss_id", "modulename": "proteusPy.DisulfideClasses", "qualname": "get_ss_id", "kind": "function", "doc": "<p>Returns the 'ss_id' value in the given DataFrame that corresponds to the\ninput 'cls' string.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>, </span><span class=\"param\"><span class=\"bp\">cls</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideClasses.get_section", "modulename": "proteusPy.DisulfideClasses", "qualname": "get_section", "kind": "function", "doc": "<p>Returns the section in which an angle in degrees lies if the section is described by dividing a unit circle into <code>basis</code> equal segments.</p>\n\n<p>Parameters:\n    angle_deg (float): The angle in degrees.\n    basis (int): The number of equal angular divisions into which the unit circle is divided.</p>\n\n<p>Returns:\n    int: The section number (1-basis) that the angle belongs to.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">angle_deg</span>, </span><span class=\"param\"><span class=\"n\">basis</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideClasses.is_between", "modulename": "proteusPy.DisulfideClasses", "qualname": "is_between", "kind": "function", "doc": "<p>Returns True if x is between a and b (inclusive), False otherwise.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong>:  The input number to be tested.</li>\n<li><strong>a</strong>:  The lower limit of the range to check against.</li>\n<li><strong>b</strong>:  The upper limit of the range to check against.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True if x is between a and b (inclusive), False otherwise.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">a</span>, </span><span class=\"param\"><span class=\"n\">b</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideClasses.plot_class_chart", "modulename": "proteusPy.DisulfideClasses", "qualname": "plot_class_chart", "kind": "function", "doc": "<p>Create a Matplotlib pie chart with <code>classes</code> segments of equal size.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>classes</strong>:  The number of segments to create in the pie chart.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n\n<p>:Example:</p>\n\n<p>Create a pie chart with 4 equal segments.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">plot_class_chart</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">classes</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideClasses.plot_count_vs_class_df", "modulename": "proteusPy.DisulfideClasses", "qualname": "plot_count_vs_class_df", "kind": "function", "doc": "<p>Plots a line graph of count vs class ID using Plotly.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>df</strong>:  A pandas DataFrame containing the data to be plotted.</li>\n<li><strong>title</strong>:  A string representing the title of the plot (default is 'title').</li>\n<li><strong>theme</strong>:  A string representing the name of the theme to use. Can be either 'notebook' or 'plotly_dark'. Default is 'plotly_dark'.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">&#39;title&#39;</span>, </span><span class=\"param\"><span class=\"n\">theme</span><span class=\"o\">=</span><span class=\"s1\">&#39;light&#39;</span>, </span><span class=\"param\"><span class=\"n\">save</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">savedir</span><span class=\"o\">=</span><span class=\"s1\">&#39;.&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideClasses.plot_count_vs_classid", "modulename": "proteusPy.DisulfideClasses", "qualname": "plot_count_vs_classid", "kind": "function", "doc": "<p>Plots a line graph of count vs class ID using Plotly.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>df</strong>:  A pandas DataFrame containing the data to be plotted.</li>\n<li><strong>title</strong>:  A string representing the title of the plot (default is 'title').</li>\n<li><strong>theme</strong>:  A string representing the theme of the plot. Anything other than <code>light</code> is in <code>plotly_dark</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"bp\">cls</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">&#39;title&#39;</span>, </span><span class=\"param\"><span class=\"n\">theme</span><span class=\"o\">=</span><span class=\"s1\">&#39;light&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideClasses.plot_binary_to_sixclass_incidence", "modulename": "proteusPy.DisulfideClasses", "qualname": "plot_binary_to_sixclass_incidence", "kind": "function", "doc": "<p>Plot the incidence of all sextant Disulfide classes for a given binary class.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>loader</strong>:  <code>proteusPy.DisulfideLoader</code> object</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">loader</span><span class=\"p\">:</span> <span class=\"n\">proteusPy</span><span class=\"o\">.</span><span class=\"n\">DisulfideLoader</span><span class=\"o\">.</span><span class=\"n\">DisulfideLoader</span>, </span><span class=\"param\"><span class=\"n\">theme</span><span class=\"o\">=</span><span class=\"s1\">&#39;light&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideClasses.enumerate_sixclass_fromlist", "modulename": "proteusPy.DisulfideClasses", "qualname": "enumerate_sixclass_fromlist", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">loader</span><span class=\"p\">:</span> <span class=\"n\">proteusPy</span><span class=\"o\">.</span><span class=\"n\">DisulfideLoader</span><span class=\"o\">.</span><span class=\"n\">DisulfideLoader</span>, </span><span class=\"param\"><span class=\"n\">sslist</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideClasses.plot_classes_vs_cutoff", "modulename": "proteusPy.DisulfideClasses", "qualname": "plot_classes_vs_cutoff", "kind": "function", "doc": "<p>Plot the total percentage and number of members for each class against the cutoff value.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cutoff</strong>:  Percent cutoff value for filtering the classes.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cutoff</span>, </span><span class=\"param\"><span class=\"n\">steps</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideExceptions", "modulename": "proteusPy.DisulfideExceptions", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "proteusPy.DisulfideExceptions.DisulfideException", "modulename": "proteusPy.DisulfideExceptions", "qualname": "DisulfideException", "kind": "class", "doc": "<p>Define class DisulfideException.</p>\n", "bases": "builtins.Exception"}, {"fullname": "proteusPy.DisulfideExceptions.DisulfideConstructionException", "modulename": "proteusPy.DisulfideExceptions", "qualname": "DisulfideConstructionException", "kind": "class", "doc": "<p>Define class DisulfideConstructionException.</p>\n", "bases": "builtins.Exception"}, {"fullname": "proteusPy.DisulfideExceptions.DisulfideConstructionWarning", "modulename": "proteusPy.DisulfideExceptions", "qualname": "DisulfideConstructionWarning", "kind": "class", "doc": "<p>Define class DisulfideConstructionWarning.</p>\n", "bases": "proteusPy.ProteusPyWarning.ProteusPyWarning"}, {"fullname": "proteusPy.DisulfideExceptions.DisulfideParseWarning", "modulename": "proteusPy.DisulfideExceptions", "qualname": "DisulfideParseWarning", "kind": "class", "doc": "<p>Define class DisulfideConstructionWarning.</p>\n", "bases": "proteusPy.ProteusPyWarning.ProteusPyWarning"}, {"fullname": "proteusPy.DisulfideExceptions.DisulfideIOException", "modulename": "proteusPy.DisulfideExceptions", "qualname": "DisulfideIOException", "kind": "class", "doc": "<p>Define class DisulfideIOException.</p>\n", "bases": "builtins.Exception"}, {"fullname": "proteusPy.DisulfideList", "modulename": "proteusPy.DisulfideList", "kind": "module", "doc": "<p>This module is part of the proteusPy package, a Python package for \nthe analysis and modeling of protein structures, with an emphasis on disulfide bonds.\nThis work is based on the original C/C++ implementation by Eric G. Suchanek. </p>\n\n<p>The module provides the implmentation and interface for the <a href=\"#DisulfideList\">DisulfideList</a>\nobject, used extensively by proteusPy.Disulfide.Disulfide class.</p>\n\n<p>Author: Eric G. Suchanek, PhD\nLast revision: 2/18/2024 -egs-</p>\n"}, {"fullname": "proteusPy.DisulfideList.DPI", "modulename": "proteusPy.DisulfideList", "qualname": "DPI", "kind": "variable", "doc": "<p></p>\n", "default_value": "220"}, {"fullname": "proteusPy.DisulfideList.WIDTH", "modulename": "proteusPy.DisulfideList", "qualname": "WIDTH", "kind": "variable", "doc": "<p></p>\n", "default_value": "6.0"}, {"fullname": "proteusPy.DisulfideList.HEIGHT", "modulename": "proteusPy.DisulfideList", "qualname": "HEIGHT", "kind": "variable", "doc": "<p></p>\n", "default_value": "6.0"}, {"fullname": "proteusPy.DisulfideList.TORMIN", "modulename": "proteusPy.DisulfideList", "qualname": "TORMIN", "kind": "variable", "doc": "<p></p>\n", "default_value": "-179.0"}, {"fullname": "proteusPy.DisulfideList.TORMAX", "modulename": "proteusPy.DisulfideList", "qualname": "TORMAX", "kind": "variable", "doc": "<p></p>\n", "default_value": "180.0"}, {"fullname": "proteusPy.DisulfideList.Torsion_DF_Cols", "modulename": "proteusPy.DisulfideList", "qualname": "Torsion_DF_Cols", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;source&#x27;, &#x27;ss_id&#x27;, &#x27;proximal&#x27;, &#x27;distal&#x27;, &#x27;chi1&#x27;, &#x27;chi2&#x27;, &#x27;chi3&#x27;, &#x27;chi4&#x27;, &#x27;chi5&#x27;, &#x27;energy&#x27;, &#x27;ca_distance&#x27;, &#x27;cb_distance&#x27;, &#x27;phi_prox&#x27;, &#x27;psi_prox&#x27;, &#x27;phi_dist&#x27;, &#x27;psi_dist&#x27;, &#x27;torsion_length&#x27;, &#x27;rho&#x27;]"}, {"fullname": "proteusPy.DisulfideList.Distance_DF_Cols", "modulename": "proteusPy.DisulfideList", "qualname": "Distance_DF_Cols", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;source&#x27;, &#x27;ss_id&#x27;, &#x27;proximal&#x27;, &#x27;distal&#x27;, &#x27;energy&#x27;, &#x27;ca_distance&#x27;, &#x27;cb_distance&#x27;]"}, {"fullname": "proteusPy.DisulfideList.DisulfideList", "modulename": "proteusPy.DisulfideList", "qualname": "DisulfideList", "kind": "class", "doc": "<p>The class provides a sortable list for Disulfide objects.\nIndexing and slicing are supported, as well as typical list operations like\n<code>.insert()</code>, <code>.append()</code> and <code>.extend().</code> The DisulfideList object must be initialized\nwith an iterable (tuple, list) and a name. Sorting is keyed by torsional energy.</p>\n\n<p>The class can also render Disulfides to a pyVista window using the\n<a href=\"#DisulfideList.display\">display()</a> and <a href=\"#DisulfideList.display_overlay\">display_overlay()</a>methods.\nSee below for examples.</p>\n\n<p>Examples:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">proteusPy.Disulfide</span> <span class=\"kn\">import</span> <span class=\"n\">Disulfide</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">proteusPy.DisulfideLoader</span> <span class=\"kn\">import</span> <span class=\"n\">DisulfideLoader</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">proteusPy.DisulfideList</span> <span class=\"kn\">import</span> <span class=\"n\">DisulfideList</span>\n</code></pre>\n</div>\n\n<p>Instantiate some variables. Note: the list is initialized with an iterable and a name (optional)</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">SS</span> <span class=\"o\">=</span> <span class=\"n\">Disulfide</span><span class=\"p\">(</span><span class=\"s1\">&#39;tmp&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>The list is initialized with an iterable, a name and resolution. Name and resolution\nare optional.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">SSlist</span> <span class=\"o\">=</span> <span class=\"n\">DisulfideList</span><span class=\"p\">([],</span><span class=\"s1\">&#39;ss&#39;</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Load the database.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PDB_SS</span> <span class=\"o\">=</span> <span class=\"n\">Load_PDB_SS</span><span class=\"p\">(</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">subset</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Get the first disulfide via indexing.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">SS</span> <span class=\"o\">=</span> <span class=\"n\">PDB_SS</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">SS</span>\n<span class=\"go\">&lt;Disulfide 4yys_22A_65A, Source: 4yys, Resolution: 1.35 \u00c5&gt;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">SS4yys</span> <span class=\"o\">=</span> <span class=\"n\">PDB_SS</span><span class=\"p\">[</span><span class=\"s1\">&#39;4yys&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">SS4yys</span>\n<span class=\"go\">[&lt;Disulfide 4yys_22A_65A, Source: 4yys, Resolution: 1.35 \u00c5&gt;, &lt;Disulfide 4yys_56A_98A, Source: 4yys, Resolution: 1.35 \u00c5&gt;, &lt;Disulfide 4yys_156A_207A, Source: 4yys, Resolution: 1.35 \u00c5&gt;]</span>\n</code></pre>\n</div>\n\n<p>Make some empty disulfides.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ss1</span> <span class=\"o\">=</span> <span class=\"n\">Disulfide</span><span class=\"p\">(</span><span class=\"s1\">&#39;ss1&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ss2</span> <span class=\"o\">=</span> <span class=\"n\">Disulfide</span><span class=\"p\">(</span><span class=\"s1\">&#39;ss2&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Make a DisulfideList containing ss1, named 'tmp'</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sslist</span> <span class=\"o\">=</span> <span class=\"n\">DisulfideList</span><span class=\"p\">([</span><span class=\"n\">ss1</span><span class=\"p\">],</span> <span class=\"s1\">&#39;tmp&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sslist</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ss2</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Extract the first disulfide</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ss1</span> <span class=\"o\">=</span> <span class=\"n\">PDB_SS</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ss1</span><span class=\"o\">.</span><span class=\"n\">pprint_all</span><span class=\"p\">()</span>\n<span class=\"go\">&lt;Disulfide 4yys_22A_65A, Source: 4yys, Resolution: 1.35 \u00c5</span>\n<span class=\"go\"> Proximal Chain fullID: &lt;(&#39;4yys&#39;, 0, &#39;A&#39;, (&#39; &#39;, 22, &#39; &#39;))&gt; Distal Chain fullID: &lt;(&#39;4yys&#39;, 0, &#39;A&#39;, (&#39; &#39;, 65, &#39; &#39;))&gt;</span>\n<span class=\"go\">Proximal Coordinates:</span>\n<span class=\"go\">   N: &lt;Vector -2.36, -20.48, 5.21&gt;</span>\n<span class=\"go\">   C\u03b1: &lt;Vector -2.10, -19.89, 3.90&gt;</span>\n<span class=\"go\">   C: &lt;Vector -1.12, -18.78, 4.12&gt;</span>\n<span class=\"go\">   O: &lt;Vector -1.30, -17.96, 5.03&gt;</span>\n<span class=\"go\">   C\u03b2: &lt;Vector -3.38, -19.31, 3.32&gt;</span>\n<span class=\"go\">   S\u03b3: &lt;Vector -3.24, -18.40, 1.76&gt;</span>\n<span class=\"go\">   Cprev &lt;Vector -2.67, -21.75, 5.36&gt;</span>\n<span class=\"go\">   Nnext: &lt;Vector -0.02, -18.76, 3.36&gt;</span>\n<span class=\"go\"> Distal Coordinates:</span>\n<span class=\"go\">   N: &lt;Vector -0.60, -18.71, -1.62&gt;</span>\n<span class=\"go\">   C\u03b1: &lt;Vector -0.48, -19.10, -0.22&gt;</span>\n<span class=\"go\">   C: &lt;Vector 0.92, -19.52, 0.18&gt;</span>\n<span class=\"go\">   O: &lt;Vector 1.10, -20.09, 1.25&gt;</span>\n<span class=\"go\">   C\u03b2: &lt;Vector -1.48, -20.23, 0.08&gt;</span>\n<span class=\"go\">   S\u03b3: &lt;Vector -3.22, -19.69, 0.18&gt;</span>\n<span class=\"go\">   Cprev &lt;Vector -0.73, -17.44, -2.01&gt;</span>\n<span class=\"go\">   Nnext: &lt;Vector 1.92, -19.18, -0.63&gt;</span>\n<span class=\"go\">&lt;BLANKLINE&gt;</span>\n<span class=\"go\"> Proximal Internal Coords:</span>\n<span class=\"go\">   N: &lt;Vector -0.41, 1.40, -0.00&gt;</span>\n<span class=\"go\">   C\u03b1: &lt;Vector 0.00, 0.00, 0.00&gt;</span>\n<span class=\"go\">   C: &lt;Vector 1.50, 0.00, 0.00&gt;</span>\n<span class=\"go\">   O: &lt;Vector 2.12, 0.71, -0.80&gt;</span>\n<span class=\"go\">   C\u03b2: &lt;Vector -0.50, -0.70, -1.25&gt;</span>\n<span class=\"go\">   S\u03b3: &lt;Vector 0.04, -2.41, -1.50&gt;</span>\n<span class=\"go\">   Cprev &lt;Vector -2.67, -21.75, 5.36&gt;</span>\n<span class=\"go\">   Nnext: &lt;Vector -0.02, -18.76, 3.36&gt;</span>\n<span class=\"go\">Distal Internal Coords:</span>\n<span class=\"go\">   N: &lt;Vector 1.04, -5.63, 1.17&gt;</span>\n<span class=\"go\">   C\u03b1: &lt;Vector 1.04, -4.18, 1.31&gt;</span>\n<span class=\"go\">   C: &lt;Vector 1.72, -3.68, 2.57&gt;</span>\n<span class=\"go\">   O: &lt;Vector 1.57, -2.51, 2.92&gt;</span>\n<span class=\"go\">   C\u03b2: &lt;Vector -0.41, -3.66, 1.24&gt;</span>\n<span class=\"go\">   S\u03b3: &lt;Vector -1.14, -3.69, -0.43&gt;</span>\n<span class=\"go\">   Cprev &lt;Vector -0.73, -17.44, -2.01&gt;</span>\n<span class=\"go\">   Nnext: &lt;Vector 1.92, -19.18, -0.63&gt;</span>\n<span class=\"go\"> \u03a71-\u03a75: 174.63\u00b0, 82.52\u00b0, -83.32\u00b0, -62.52\u00b0 -73.83\u00b0, 138.89\u00b0, 1.70 kcal/mol</span>\n<span class=\"go\"> C\u03b1 Distance: 4.50 \u00c5</span>\n<span class=\"go\"> Torsion length: 231.53 deg&gt;</span>\n</code></pre>\n</div>\n\n<p>Get a list of disulfides via slicing</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">subset</span> <span class=\"o\">=</span> <span class=\"n\">DisulfideList</span><span class=\"p\">(</span><span class=\"n\">PDB_SS</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">10</span><span class=\"p\">],</span><span class=\"s1\">&#39;subset&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Display the subset disulfides overlaid onto the same coordinate frame,\n(proximal N, Ca, C').</p>\n\n<p>The disulfides are colored individually to facilitate inspection.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">subset</span><span class=\"o\">.</span><span class=\"n\">display_overlay</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "bases": "collections.UserList"}, {"fullname": "proteusPy.DisulfideList.DisulfideList.__init__", "modulename": "proteusPy.DisulfideList", "qualname": "DisulfideList.__init__", "kind": "function", "doc": "<p>Initialize the DisulfideList</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>iterable</strong>:  an iterable e.g. []</li>\n<li><strong>id</strong>:  Name for the list</li>\n</ul>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">proteusPy.DisulfideList</span> <span class=\"kn\">import</span> <span class=\"n\">DisulfideList</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">proteusPy.Disulfide</span> <span class=\"kn\">import</span> <span class=\"n\">Disulfide</span>\n</code></pre>\n</div>\n\n<p>Initialize some empty disulfides.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ss1</span> <span class=\"o\">=</span> <span class=\"n\">Disulfide</span><span class=\"p\">(</span><span class=\"s1\">&#39;ss1&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ss2</span> <span class=\"o\">=</span> <span class=\"n\">Disulfide</span><span class=\"p\">(</span><span class=\"s1\">&#39;ss2&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ss3</span> <span class=\"o\">=</span> <span class=\"n\">Disulfide</span><span class=\"p\">(</span><span class=\"s1\">&#39;ss3&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Make a list containing the disulfides.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sslist</span> <span class=\"o\">=</span> <span class=\"n\">DisulfideList</span><span class=\"p\">([</span><span class=\"n\">ss1</span><span class=\"p\">,</span> <span class=\"n\">ss2</span><span class=\"p\">],</span> <span class=\"s1\">&#39;sslist&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sslist</span>\n<span class=\"go\">[&lt;Disulfide ss1, Source: 1egs, Resolution: -1.0 \u00c5&gt;, &lt;Disulfide ss2, Source: 1egs, Resolution: -1.0 \u00c5&gt;]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sslist</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ss3</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sslist</span>\n<span class=\"go\">[&lt;Disulfide ss1, Source: 1egs, Resolution: -1.0 \u00c5&gt;, &lt;Disulfide ss2, Source: 1egs, Resolution: -1.0 \u00c5&gt;, &lt;Disulfide ss3, Source: 1egs, Resolution: -1.0 \u00c5&gt;]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">iterable</span>, </span><span class=\"param\"><span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">res</span><span class=\"o\">=-</span><span class=\"mf\">1.0</span>, </span><span class=\"param\"><span class=\"n\">quiet</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, {"fullname": "proteusPy.DisulfideList.DisulfideList.pdb_id", "modulename": "proteusPy.DisulfideList", "qualname": "DisulfideList.pdb_id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.DisulfideList.DisulfideList.quiet", "modulename": "proteusPy.DisulfideList", "qualname": "DisulfideList.quiet", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.DisulfideList.DisulfideList.Average_Distance", "modulename": "proteusPy.DisulfideList", "qualname": "DisulfideList.Average_Distance", "kind": "variable", "doc": "<p>Return the Average distance (\u00c5) between the atoms in the list.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Average distance (\u00c5) between all atoms in the list</p>\n</blockquote>\n"}, {"fullname": "proteusPy.DisulfideList.DisulfideList.Average_Energy", "modulename": "proteusPy.DisulfideList", "qualname": "DisulfideList.Average_Energy", "kind": "variable", "doc": "<p>Return the Average energy (kcal/mol) for the Disulfides in the list.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Average energy (kcal/mol) between all atoms in the list</p>\n</blockquote>\n"}, {"fullname": "proteusPy.DisulfideList.DisulfideList.Average_Conformation", "modulename": "proteusPy.DisulfideList", "qualname": "DisulfideList.Average_Conformation", "kind": "variable", "doc": "<p>Return the Average conformation for the Disulfides in the list.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Average conformation: [x1, x2, x3, x4, x5]</p>\n</blockquote>\n"}, {"fullname": "proteusPy.DisulfideList.DisulfideList.append", "modulename": "proteusPy.DisulfideList", "qualname": "DisulfideList.append", "kind": "function", "doc": "<p>Append the list with item</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>item</strong>:  Disulfide to add</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideList.DisulfideList.Average_Resolution", "modulename": "proteusPy.DisulfideList", "qualname": "DisulfideList.Average_Resolution", "kind": "variable", "doc": "<p>Compute and return the average structure resolution for the given list.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Average resolution (A)</p>\n</blockquote>\n", "annotation": ": float"}, {"fullname": "proteusPy.DisulfideList.DisulfideList.Average_Torsion_Distance", "modulename": "proteusPy.DisulfideList", "qualname": "DisulfideList.Average_Torsion_Distance", "kind": "variable", "doc": "<p>Return the average distance in torsion space (degrees), between all pairs in the\nDisulfideList</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Torsion Distance (degrees)</p>\n</blockquote>\n"}, {"fullname": "proteusPy.DisulfideList.DisulfideList.build_distance_df", "modulename": "proteusPy.DisulfideList", "qualname": "DisulfideList.build_distance_df", "kind": "function", "doc": "<p>Create a dataframe containing the input DisulfideList C\u03b1-C\u03b1 distance, energy.\nThis can take several minutes for the entire database.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>DataFrame containing Ca distances</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideList.DisulfideList.build_torsion_df", "modulename": "proteusPy.DisulfideList", "qualname": "DisulfideList.build_torsion_df", "kind": "function", "doc": "<p>Create a dataframe containing the input DisulfideList torsional parameters,\nC\u03b1-C\u03b1 distance, energy, and phi-psi angles. This can take several minutes for the\nentire database.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>SSList</strong>:  DisulfideList - input list of Disulfides</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>pandas.Dataframe containing the torsions</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideList.DisulfideList.by_chain", "modulename": "proteusPy.DisulfideList", "qualname": "DisulfideList.by_chain", "kind": "function", "doc": "<p>Return a DisulfideList from the input chain identifier.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>chain</strong>:  chain identifier, 'A', 'B, etc</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>DisulfideList containing disulfides within that chain.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">chain</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideList.DisulfideList.calculate_torsion_statistics", "modulename": "proteusPy.DisulfideList", "qualname": "DisulfideList.calculate_torsion_statistics", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideList.DisulfideList.display", "modulename": "proteusPy.DisulfideList", "qualname": "DisulfideList.display", "kind": "function", "doc": "<p>Display the Disulfide list in the specific rendering style.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>single</strong>:  Display the bond in a single panel in the specific style.</li>\n<li><p><strong>style:  Rendering style: One of</strong>: </p>\n\n<ul>\n<li>'sb' - split bonds</li>\n<li>'bs' - ball and stick</li>\n<li>'cpk' - CPK style</li>\n<li>'pd' - Proximal/Distal style - Red=proximal, Green=Distal</li>\n<li>'plain' - boring single color\n:light: If True, light background, if False, dark</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">style</span><span class=\"o\">=</span><span class=\"s1\">&#39;sb&#39;</span>, </span><span class=\"param\"><span class=\"n\">light</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">panelsize</span><span class=\"o\">=</span><span class=\"mi\">512</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideList.DisulfideList.display_torsion_statistics", "modulename": "proteusPy.DisulfideList", "qualname": "DisulfideList.display_torsion_statistics", "kind": "function", "doc": "<p>Display torsion and distance statistics for a given Disulfide list.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>display</strong>:  Whether to display the plot in the notebook. Default is True.</li>\n<li><strong>save</strong>:  Whether to save the plot as an image file. Default is False.</li>\n<li><strong>fname</strong>:  The name of the image file to save. Default is 'ss_torsions.png'.</li>\n<li><strong>stats</strong>:  Whether to return the DataFrame representing the statistics for <code>self</code>. Default is False.</li>\n<li><strong>light</strong>:  Whether to use the 'plotly_light' or 'plotly_dark' template. Default is True.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">display</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">save</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">fname</span><span class=\"o\">=</span><span class=\"s1\">&#39;ss_torsions.png&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">stats</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">light</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideList.DisulfideList.distance_df", "modulename": "proteusPy.DisulfideList", "qualname": "DisulfideList.distance_df", "kind": "variable", "doc": "<p>Build and return the distance dataframe for the input list.\nThis can take considerable time for the entire list.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dataframe containing the C\u03b1-C\u03b1 distances for the given list.</p>\n</blockquote>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">proteusPy.Disulfide</span> <span class=\"kn\">import</span> <span class=\"n\">Disulfide</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">proteusPy.DisulfideLoader</span> <span class=\"kn\">import</span> <span class=\"n\">Load_PDB_SS</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">proteusPy.DisulfideList</span> <span class=\"kn\">import</span> <span class=\"n\">DisulfideList</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PDB_SS</span> <span class=\"o\">=</span> <span class=\"n\">Load_PDB_SS</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "annotation": ": pandas.core.frame.DataFrame"}, {"fullname": "proteusPy.DisulfideList.DisulfideList.display_overlay", "modulename": "proteusPy.DisulfideList", "qualname": "DisulfideList.display_overlay", "kind": "function", "doc": "<p>Display all disulfides in the list overlaid in stick mode against\na common coordinate frames. This allows us to see all of the disulfides\nat one time in a single view. Colors vary smoothy between bonds.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>screenshot</strong>:  Save a screenshot, defaults to False</li>\n<li><strong>movie</strong>:  Save a movie, defaults to False</li>\n<li><strong>verbose</strong>:  Verbosity, defaults to True</li>\n<li><strong>fname</strong>:  Filename to save for the movie or screenshot, defaults to 'ss_overlay.png'</li>\n<li><strong>light</strong>:  Background color, defaults to True for White. False for Dark.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">screenshot</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">movie</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">fname</span><span class=\"o\">=</span><span class=\"s1\">&#39;ss_overlay.png&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">light</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideList.DisulfideList.extend", "modulename": "proteusPy.DisulfideList", "qualname": "DisulfideList.extend", "kind": "function", "doc": "<p>Extend the Disulfide list with other.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>other</strong>:  extension</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideList.DisulfideList.get_by_name", "modulename": "proteusPy.DisulfideList", "qualname": "DisulfideList.get_by_name", "kind": "function", "doc": "<p>Returns the Disulfide with the given name from the list.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">name</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">module</span> <span class=\"s1\">&#39;proteusPy.Disulfide&#39;</span> <span class=\"kn\">from</span> <span class=\"s1\">&#39;/Users/egs/repos/proteusPy/proteusPy/Disulfide.py&#39;</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideList.DisulfideList.get_chains", "modulename": "proteusPy.DisulfideList", "qualname": "DisulfideList.get_chains", "kind": "function", "doc": "<p>Return the chain IDs for chains within the given Disulfide.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Chain IDs for given Disulfide</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideList.DisulfideList.get_torsion_array", "modulename": "proteusPy.DisulfideList", "qualname": "DisulfideList.get_torsion_array", "kind": "function", "doc": "<p>Returns a 2D NumPy array representing the dihedral angles in the given disulfide list.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A 2D NumPy array of shape (n, 5), where n is the number of disulfide bonds in the list. Each row\n          of the array represents the dihedral angles of a disulfide bond, in the following order:\n          [X1_i, X2_i, X3_i, X4_i, X5_i], where i is the index of the disulfide bond in the list.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideList.DisulfideList.has_chain", "modulename": "proteusPy.DisulfideList", "qualname": "DisulfideList.has_chain", "kind": "function", "doc": "<p>Returns True if given chain contained in Disulfide, False otherwise.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Returns True if given chain contained in Disulfide, False otherwise.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">chain</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideList.DisulfideList.id", "modulename": "proteusPy.DisulfideList", "qualname": "DisulfideList.id", "kind": "variable", "doc": "<p>PDB ID of the list</p>\n"}, {"fullname": "proteusPy.DisulfideList.DisulfideList.resolution", "modulename": "proteusPy.DisulfideList", "qualname": "DisulfideList.resolution", "kind": "variable", "doc": "<p>Resolution of the parent sturcture (A)</p>\n"}, {"fullname": "proteusPy.DisulfideList.DisulfideList.TorsionGraph", "modulename": "proteusPy.DisulfideList", "qualname": "DisulfideList.TorsionGraph", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">display</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">save</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">fname</span><span class=\"o\">=</span><span class=\"s1\">&#39;ss_torsions.png&#39;</span>, </span><span class=\"param\"><span class=\"n\">light</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideList.DisulfideList.insert", "modulename": "proteusPy.DisulfideList", "qualname": "DisulfideList.insert", "kind": "function", "doc": "<p>Insert a Disulfide into the list at the specified index</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>index</strong>:  insertion point</li>\n<li><strong>item</strong>:  Disulfide to insert</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span>, </span><span class=\"param\"><span class=\"n\">item</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideList.DisulfideList.length", "modulename": "proteusPy.DisulfideList", "qualname": "DisulfideList.length", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.DisulfideList.DisulfideList.min", "modulename": "proteusPy.DisulfideList", "qualname": "DisulfideList.min", "kind": "function", "doc": "<p>Return Disulfide from the list with the minimum energy</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Disulfide with the minimum energy.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideList.DisulfideList.max", "modulename": "proteusPy.DisulfideList", "qualname": "DisulfideList.max", "kind": "function", "doc": "<p>Return Disulfide from the list with the maximum energy</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Disulfide with the maximum energy.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideList.DisulfideList.minmax_distance", "modulename": "proteusPy.DisulfideList", "qualname": "DisulfideList.minmax_distance", "kind": "function", "doc": "<p>Return the Disulfides with the minimum and\nmaximum C\u03b1 distances in the list.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>SSmin, SSmax</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideList.DisulfideList.minmax_energy", "modulename": "proteusPy.DisulfideList", "qualname": "DisulfideList.minmax_energy", "kind": "variable", "doc": "<p>Return the Disulfides with the minimum and maximum energies\nfrom the DisulfideList.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Disulfide with the given ID</p>\n</blockquote>\n"}, {"fullname": "proteusPy.DisulfideList.DisulfideList.nearest_neighbors", "modulename": "proteusPy.DisulfideList", "qualname": "DisulfideList.nearest_neighbors", "kind": "function", "doc": "<p>Given a torsional array of chi1-chi5, return list of Disulfides\nwithin cutoff.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>chi1</strong>:  Chi1 (degrees)</li>\n<li><strong>chi2</strong>:  Chi2 (degrees)</li>\n<li><strong>chi3</strong>:  Chi3 (degrees)</li>\n<li><strong>chi4</strong>:  Chi4 (degrees)</li>\n<li><strong>chi5</strong>:  Chi5 (degrees)</li>\n<li><strong>cutoff</strong>:  Distance cutoff, degrees</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>DisulfideList of neighbors</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">chi1</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">chi2</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">chi3</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">chi4</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">chi5</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">cutoff</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideList.DisulfideList.nearest_neighbors_ss", "modulename": "proteusPy.DisulfideList", "qualname": "DisulfideList.nearest_neighbors_ss", "kind": "function", "doc": "<p>Given an input Disulfide and overall torsional cutoff, return\nthe list of Disulfides within the cutoff</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ss</strong>:  Disulfide to compare to</li>\n<li><strong>chi5</strong>:  Chi5 (degrees)</li>\n<li><strong>cutoff</strong>:  Distance cutoff, degrees</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>DisulfideList of neighbors</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ss</span>, </span><span class=\"param\"><span class=\"n\">cutoff</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideList.DisulfideList.pprint", "modulename": "proteusPy.DisulfideList", "qualname": "DisulfideList.pprint", "kind": "function", "doc": "<p>Pretty print self.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideList.DisulfideList.pprint_all", "modulename": "proteusPy.DisulfideList", "qualname": "DisulfideList.pprint_all", "kind": "function", "doc": "<p>Pretty print full disulfide descriptions in self.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideList.DisulfideList.torsion_df", "modulename": "proteusPy.DisulfideList", "qualname": "DisulfideList.torsion_df", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.DisulfideList.DisulfideList.torsion_array", "modulename": "proteusPy.DisulfideList", "qualname": "DisulfideList.torsion_array", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.DisulfideList.DisulfideList.validate_ss", "modulename": "proteusPy.DisulfideList", "qualname": "DisulfideList.validate_ss", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideList.load_disulfides_from_id", "modulename": "proteusPy.DisulfideList", "qualname": "load_disulfides_from_id", "kind": "function", "doc": "<p>Loads the Disulfides by PDB ID and returns a <code>DisulfideList</code> of Disulfide objects.\nAssumes the file is downloaded in the pdb_dir path.</p>\n\n<p><em>NB:</em> Requires EGS-Modified BIO.parse_pdb_header.py from <a href=\"https://github.com/suchanek/biopython\">https://github.com/suchanek/biopython</a></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>struct_name</strong>:  the name of the PDB entry.</li>\n<li><strong>pdb_dir: path to the PDB files, defaults to MODEL_DIR - this is</strong>:  PDB_DIR/good and are\nthe pre-parsed PDB files that have been scanned by the DisulfideDownloader program.</li>\n<li><strong>model_numb</strong>:  model number to use, defaults to 0 for single structure files.</li>\n<li><strong>verbose</strong>:  print info while parsing</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a list of Disulfide objects initialized from the file.</p>\n</blockquote>\n\n<p>Example:</p>\n\n<p>PDB_DIR defaults to os.getenv('PDB').\nTo load the Disulfides from the PDB ID 5rsa we'd use the following:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">proteusPy.DisulfideList</span> <span class=\"kn\">import</span> <span class=\"n\">DisulfideList</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">SSlist</span> <span class=\"o\">=</span> <span class=\"n\">DisulfideList</span><span class=\"p\">([],</span><span class=\"s1\">&#39;5rsa&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">SSlist</span> <span class=\"o\">=</span> <span class=\"n\">load_disulfides_from_id</span><span class=\"p\">(</span><span class=\"s1\">&#39;5rsa&#39;</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">SSlist</span>\n<span class=\"go\">[&lt;Disulfide 5rsa_26A_84A, Source: 5rsa, Resolution: 2.0 \u00c5&gt;, &lt;Disulfide 5rsa_40A_95A, Source: 5rsa, Resolution: 2.0 \u00c5&gt;, &lt;Disulfide 5rsa_58A_110A, Source: 5rsa, Resolution: 2.0 \u00c5&gt;, &lt;Disulfide 5rsa_65A_72A, Source: 5rsa, Resolution: 2.0 \u00c5&gt;]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">struct_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">pdb_dir</span><span class=\"o\">=</span><span class=\"s1\">&#39;/Users/egs/PDB/good/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">model_numb</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">quiet</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">dbg</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideLoader", "modulename": "proteusPy.DisulfideLoader", "kind": "module", "doc": "<p>This module is part of the proteusPy package, a Python package for \nthe analysis and modeling of protein structures, with an emphasis on disulfide bonds.\nThis work is based on the original C/C++ implementation by Eric G. Suchanek. </p>\n\n<p>Author: Eric G. Suchanek, PhD\nLast revision: 2/9/2024</p>\n"}, {"fullname": "proteusPy.DisulfideLoader.DisulfideLoader", "modulename": "proteusPy.DisulfideLoader", "qualname": "DisulfideLoader", "kind": "class", "doc": "<p>This class represents the disulfide database itself and is its primary means of accession.\nThe entirety of the RCSB disulfide database is stored within the class via a\nproteusPy.DisulfideList.DisulfideList, a <code>Pandas</code> .csv file, and a <code>dict</code> of\nindices mapping the PDB IDs into their respective list of disulfides. The datastructures allow\nsimple, direct and flexible access to the disulfide structures contained herein.\nThis makes it possible to access the disulfides by array index, PDB structure ID or disulfide name.</p>\n\n<p>The class can also render Disulfides overlaid on a common coordinate system to a pyVista window using the\n<a href=\"#DisulfideLoader.display_overlay\">display_overlay()</a> method. See below for examples.</p>\n\n<p>Important note: For typical usage one will access the database via the <code>Load_PDB_SS()</code> function.\nThe difference is that the latter function loads the compressed database from its single\nsource. the <code>Load_PDB_SS()</code> function will load the individual torsions and disulfide .pkl,\nbuilds the classlist structures.</p>\n\n<p><em>Developer's Notes:</em>\nThe .pkl files needed to instantiate this class and save it into its final .pkl file are\ndefined in the proteusPy.data class and should not be changed. Upon initialization the class\nwill load them and initialize itself.</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">proteusPy</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">proteusPy.Disulfide</span> <span class=\"kn\">import</span> <span class=\"n\">Disulfide</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">proteusPy.DisulfideLoader</span> <span class=\"kn\">import</span> <span class=\"n\">DisulfideLoader</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">proteusPy.DisulfideList</span> <span class=\"kn\">import</span> <span class=\"n\">DisulfideList</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PDB_SS</span> <span class=\"o\">=</span> <span class=\"n\">DisulfideLoader</span><span class=\"p\">(</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">subset</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">SS1</span> <span class=\"o\">=</span> <span class=\"n\">PDB_SS</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">SS1</span>\n<span class=\"go\">&lt;Disulfide 4yys_22A_65A, Source: 4yys, Resolution: 1.35 \u00c5&gt;</span>\n</code></pre>\n</div>\n\n<p>Accessing by PDB_ID returns a list of Disulfides:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">SS2</span> <span class=\"o\">=</span> <span class=\"n\">PDB_SS</span><span class=\"p\">[</span><span class=\"s1\">&#39;4yys&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">SS2</span>\n<span class=\"go\">[&lt;Disulfide 4yys_22A_65A, Source: 4yys, Resolution: 1.35 \u00c5&gt;, &lt;Disulfide 4yys_56A_98A, Source: 4yys, Resolution: 1.35 \u00c5&gt;, &lt;Disulfide 4yys_156A_207A, Source: 4yys, Resolution: 1.35 \u00c5&gt;]</span>\n</code></pre>\n</div>\n\n<p>Accessing individual disulfides by their name:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">SS3</span> <span class=\"o\">=</span> <span class=\"n\">PDB_SS</span><span class=\"p\">[</span><span class=\"s1\">&#39;4yys_56A_98A&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">SS3</span>\n<span class=\"go\">&lt;Disulfide 4yys_56A_98A, Source: 4yys, Resolution: 1.35 \u00c5&gt;</span>\n</code></pre>\n</div>\n\n<p>Finally, we can access disulfides by regular slicing:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">SSlist</span> <span class=\"o\">=</span> <span class=\"n\">PDB_SS</span><span class=\"p\">[:</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n"}, {"fullname": "proteusPy.DisulfideLoader.DisulfideLoader.__init__", "modulename": "proteusPy.DisulfideLoader", "qualname": "DisulfideLoader.__init__", "kind": "function", "doc": "<p>Initializing the class initiates loading either the entire Disulfide dataset,\nor the 'subset', which consists of the first 1000 PDB structures. The subset\nis useful for testing and debugging since it doesn't require nearly as much\nmemory or time. The name for the subset file is hard-coded. One can pass a\ndifferent data directory and file names for the pickle files. These different\ndirectories are normally established with the proteusPy.Disulfide.Extract_Disulfides\nfunction.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">datadir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/Users/egs/repos/proteusPy/data/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">picklefile</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;PDB_all_ss.pkl&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">pickle_dict_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;PDB_all_ss_dict.pkl&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">torsion_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;PDB_all_SS_torsions.csv&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">quiet</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">subset</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">cutoff</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mf\">1.0</span></span>)</span>"}, {"fullname": "proteusPy.DisulfideLoader.DisulfideLoader.ModelDir", "modulename": "proteusPy.DisulfideLoader", "qualname": "DisulfideLoader.ModelDir", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.DisulfideLoader.DisulfideLoader.PickleFile", "modulename": "proteusPy.DisulfideLoader", "qualname": "DisulfideLoader.PickleFile", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.DisulfideLoader.DisulfideLoader.PickleDictFile", "modulename": "proteusPy.DisulfideLoader", "qualname": "DisulfideLoader.PickleDictFile", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.DisulfideLoader.DisulfideLoader.PickleClassFile", "modulename": "proteusPy.DisulfideLoader", "qualname": "DisulfideLoader.PickleClassFile", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.DisulfideLoader.DisulfideLoader.TorsionFile", "modulename": "proteusPy.DisulfideLoader", "qualname": "DisulfideLoader.TorsionFile", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.DisulfideLoader.DisulfideLoader.SSList", "modulename": "proteusPy.DisulfideLoader", "qualname": "DisulfideLoader.SSList", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.DisulfideLoader.DisulfideLoader.SSDict", "modulename": "proteusPy.DisulfideLoader", "qualname": "DisulfideLoader.SSDict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.DisulfideLoader.DisulfideLoader.TorsionDF", "modulename": "proteusPy.DisulfideLoader", "qualname": "DisulfideLoader.TorsionDF", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.DisulfideLoader.DisulfideLoader.TotalDisulfides", "modulename": "proteusPy.DisulfideLoader", "qualname": "DisulfideLoader.TotalDisulfides", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.DisulfideLoader.DisulfideLoader.IDList", "modulename": "proteusPy.DisulfideLoader", "qualname": "DisulfideLoader.IDList", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.DisulfideLoader.DisulfideLoader.QUIET", "modulename": "proteusPy.DisulfideLoader", "qualname": "DisulfideLoader.QUIET", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.DisulfideLoader.DisulfideLoader.tclass", "modulename": "proteusPy.DisulfideLoader", "qualname": "DisulfideLoader.tclass", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.DisulfideLoader.DisulfideLoader.cutoff", "modulename": "proteusPy.DisulfideLoader", "qualname": "DisulfideLoader.cutoff", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.DisulfideLoader.DisulfideLoader.verbose", "modulename": "proteusPy.DisulfideLoader", "qualname": "DisulfideLoader.verbose", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.DisulfideLoader.DisulfideLoader.timestamp", "modulename": "proteusPy.DisulfideLoader", "qualname": "DisulfideLoader.timestamp", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.DisulfideLoader.DisulfideLoader.version", "modulename": "proteusPy.DisulfideLoader", "qualname": "DisulfideLoader.version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.DisulfideLoader.DisulfideLoader.Average_Resolution", "modulename": "proteusPy.DisulfideLoader", "qualname": "DisulfideLoader.Average_Resolution", "kind": "variable", "doc": "<p>Compute and return the average structure resolution for the given list.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Average resolution (A)</p>\n</blockquote>\n", "annotation": ": float"}, {"fullname": "proteusPy.DisulfideLoader.DisulfideLoader.build_ss_from_idlist", "modulename": "proteusPy.DisulfideLoader", "qualname": "DisulfideLoader.build_ss_from_idlist", "kind": "function", "doc": "<p>Given a list of PDBid, return a DisulfideList of Disulfides</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>idlist</strong>:  List of PDBIDs, e.g. ['4yys', '2q7q']</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>ProteusPy.DisulfideList.DisulfideList of ProteusPy.Disulfide.Disulfide</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">idlist</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideLoader.DisulfideLoader.copy", "modulename": "proteusPy.DisulfideLoader", "qualname": "DisulfideLoader.copy", "kind": "function", "doc": "<p>Return a copy of self.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Copy of self</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideLoader.DisulfideLoader.extract_class", "modulename": "proteusPy.DisulfideLoader", "qualname": "DisulfideLoader.extract_class", "kind": "function", "doc": "<p>Return the list of disulfides corresponding to the input <code>clsid</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>clsid</strong>:  The class name to extract.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The list of disulfide bonds from the class.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">clsid</span></span><span class=\"return-annotation\">) -> <span class=\"n\">proteusPy</span><span class=\"o\">.</span><span class=\"n\">DisulfideList</span><span class=\"o\">.</span><span class=\"n\">DisulfideList</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideLoader.DisulfideLoader.getlist", "modulename": "proteusPy.DisulfideLoader", "qualname": "DisulfideLoader.getlist", "kind": "function", "doc": "<p>Return the list of Disulfides contained in the class.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>DisulfideList</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">proteusPy</span><span class=\"o\">.</span><span class=\"n\">DisulfideList</span><span class=\"o\">.</span><span class=\"n\">DisulfideList</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideLoader.DisulfideLoader.get_by_name", "modulename": "proteusPy.DisulfideLoader", "qualname": "DisulfideLoader.get_by_name", "kind": "function", "doc": "<p>Returns the Disulfide with the given name from the list.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span></span><span class=\"return-annotation\">) -> <span class=\"n\">proteusPy</span><span class=\"o\">.</span><span class=\"n\">Disulfide</span><span class=\"o\">.</span><span class=\"n\">Disulfide</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideLoader.DisulfideLoader.describe", "modulename": "proteusPy.DisulfideLoader", "qualname": "DisulfideLoader.describe", "kind": "function", "doc": "<p>Provides information about the Disulfide database contained in <code>self</code>.</p>\n\n<p>Example:</p>\n\n<p>from proteusPy.DisulfideLoader import Load_PDB_SS\n PDB_SS = Load_PDB_SS(verbose=False, subset=False)\n PDB_SS.describe()\n     =========== RCSB Disulfide Database Summary ==============\n        =========== Built: 2024-02-12 17:48:13 ==============\nPDB IDs present:                    35818\nDisulfides loaded:                  120494\nAverage structure resolution:       2.34 \u00c5\nLowest Energy Disulfide:            2q7q_75D_140D\nHighest Energy Disulfide:           1toz_456A_467A\nC\u03b1 distance cutoff:                 8.00 \u00c5\nTotal RAM Used:                     30.72 GB.\n    ================= proteusPy: 0.91 =======================</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideLoader.DisulfideLoader.display_overlay", "modulename": "proteusPy.DisulfideLoader", "qualname": "DisulfideLoader.display_overlay", "kind": "function", "doc": "<p>Display all disulfides for a given PDB ID overlaid in stick mode against\na common coordinate frame. This allows us to see all of the disulfides\nat one time in a single view. Colors vary smoothy between bonds.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>self</strong>:  DisulfideLoader object initialized with the database.</li>\n<li><strong>pdbid</strong>:  the PDB id string, e.g. 4yys</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">proteusPy.Disulfide</span> <span class=\"kn\">import</span> <span class=\"n\">Disulfide</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">proteusPy.DisulfideLoader</span> <span class=\"kn\">import</span> <span class=\"n\">DisulfideLoader</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">proteusPy.DisulfideList</span> <span class=\"kn\">import</span> <span class=\"n\">DisulfideList</span>\n</code></pre>\n</div>\n\n<p>Instantiate the Loader with the SS database subset.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PDB_SS</span> <span class=\"o\">=</span> <span class=\"n\">DisulfideLoader</span><span class=\"p\">(</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">subset</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Display the Disulfides from the PDB ID <code>4yys</code>, overlaid onto\na common reference (the proximal disulfides).</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PDB_SS</span><span class=\"o\">.</span><span class=\"n\">display_overlay</span><span class=\"p\">(</span><span class=\"s1\">&#39;4yys&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>You can also slice the loader and display as an overly.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PDB_SS</span><span class=\"p\">[:</span><span class=\"mi\">8</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">display_overlay</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pdbid</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideLoader.DisulfideLoader.getTorsions", "modulename": "proteusPy.DisulfideLoader", "qualname": "DisulfideLoader.getTorsions", "kind": "function", "doc": "<p>Return the torsions, distances and energies defined by Disulfide.Torsion_DF_cols</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>pdbID</strong>:  pdbID, defaults to None, meaning return entire dataset.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DisulfideParseWarning</strong>:  Raised if not found</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Torsions Dataframe</p>\n</blockquote>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">proteusPy.DisulfideLoader</span> <span class=\"kn\">import</span> <span class=\"n\">DisulfideLoader</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PDB_SS</span> <span class=\"o\">=</span> <span class=\"n\">DisulfideLoader</span><span class=\"p\">(</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">subset</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Tor_DF</span> <span class=\"o\">=</span> <span class=\"n\">PDB_SS</span><span class=\"o\">.</span><span class=\"n\">getTorsions</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pdbID</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideLoader.DisulfideLoader.list_binary_classes", "modulename": "proteusPy.DisulfideLoader", "qualname": "DisulfideLoader.list_binary_classes", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideLoader.DisulfideLoader.quiet", "modulename": "proteusPy.DisulfideLoader", "qualname": "DisulfideLoader.quiet", "kind": "variable", "doc": "<p>The loader quiet state</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>quiet parameter</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "proteusPy.DisulfideLoader.DisulfideLoader.plot_classes_vs_cutoff", "modulename": "proteusPy.DisulfideLoader", "qualname": "DisulfideLoader.plot_classes_vs_cutoff", "kind": "function", "doc": "<p>Plot the total percentage and number of members for each class against the cutoff value.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cutoff</strong>:  Percent cutoff value for filtering the classes.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cutoff</span>, </span><span class=\"param\"><span class=\"n\">steps</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideLoader.DisulfideLoader.plot_binary_to_sixclass_incidence", "modulename": "proteusPy.DisulfideLoader", "qualname": "DisulfideLoader.plot_binary_to_sixclass_incidence", "kind": "function", "doc": "<p>Plot the incidence of all sextant Disulfide classes for a given binary class.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>loader</strong>:  <code>proteusPy.DisulfideLoader</code> object</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">light</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">save</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">savedir</span><span class=\"o\">=</span><span class=\"s1\">&#39;.&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideLoader.DisulfideLoader.enumerate_sixclass_fromlist", "modulename": "proteusPy.DisulfideLoader", "qualname": "DisulfideLoader.enumerate_sixclass_fromlist", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sslist</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideLoader.DisulfideLoader.save", "modulename": "proteusPy.DisulfideLoader", "qualname": "DisulfideLoader.save", "kind": "function", "doc": "<p>Save a copy of the fully instantiated Loader to the specified file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>savepath</strong>:  Path to save the file, defaults to DATA_DIR</li>\n<li><strong>fname</strong>:  Filename, defaults to LOADER_FNAME</li>\n<li><strong>verbose</strong>:  Verbosity, defaults to False</li>\n<li><strong>cutoff</strong>:  Distance cutoff used to build the database, -1 means no cutoff.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">savepath</span><span class=\"o\">=</span><span class=\"s1\">&#39;/Users/egs/repos/proteusPy/proteusPy/data/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">subset</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">cutoff</span><span class=\"o\">=-</span><span class=\"mf\">1.0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideLoader.Download_PDB_SS", "modulename": "proteusPy.DisulfideLoader", "qualname": "Download_PDB_SS", "kind": "function", "doc": "<p>Download the databases from my Google Drive.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>loadpath</strong>:  Path from which to load, defaults to DATA_DIR</li>\n<li><strong>verbose</strong>:  Verbosity, defaults to False</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">loadpath</span><span class=\"o\">=</span><span class=\"s1\">&#39;/Users/egs/repos/proteusPy/proteusPy/data/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">subset</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideLoader.Download_PDB_SS_GitHub", "modulename": "proteusPy.DisulfideLoader", "qualname": "Download_PDB_SS_GitHub", "kind": "function", "doc": "<p>Download the databases from Github. Note: if you change the database these sizes will\nneed to be changed!</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>loadpath</strong>:  Path from which to load, defaults to DATA_DIR</li>\n<li><strong>verbose</strong>:  Verbosity, defaults to True</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">loadpath</span><span class=\"o\">=</span><span class=\"s1\">&#39;/Users/egs/repos/proteusPy/proteusPy/data/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">subset</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.DisulfideLoader.Load_PDB_SS", "modulename": "proteusPy.DisulfideLoader", "qualname": "Load_PDB_SS", "kind": "function", "doc": "<p>Load the fully instantiated Disulfide database from the specified file. Use the\ndefaults unless you are building the database by hand. <em>This is the function\nused to load the built database.</em></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>loadpath</strong>:  Path from which to load, defaults to DATA_DIR</li>\n<li><strong>verbose</strong>:  Verbosity, defaults to False</li>\n<li><strong>subset</strong>:  If True, load the subset DB, otherwise load the full database</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">loadpath</span><span class=\"o\">=</span><span class=\"s1\">&#39;/Users/egs/repos/proteusPy/proteusPy/data/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">subset</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">proteusPy</span><span class=\"o\">.</span><span class=\"n\">DisulfideLoader</span><span class=\"o\">.</span><span class=\"n\">DisulfideLoader</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.ProteusGlobals", "modulename": "proteusPy.ProteusGlobals", "kind": "module", "doc": "<p>This file contains global declarations for the <em>proteusPy</em> package, a Python package for \nthe analysis and modeling of protein structures, with an emphasis on disulfide bonds.</p>\n\n<p>Author: Eric G. Suchanek, PhD\nLast revision: 2/18/24 -egs-</p>\n"}, {"fullname": "proteusPy.ProteusGlobals.PDB_DIR", "modulename": "proteusPy.ProteusGlobals", "qualname": "PDB_DIR", "kind": "variable", "doc": "<p></p>\n", "default_value": "$PDB"}, {"fullname": "proteusPy.ProteusGlobals.PROTEUSPY_REPO_HOME", "modulename": "proteusPy.ProteusGlobals", "qualname": "PROTEUSPY_REPO_HOME", "kind": "variable", "doc": "<p></p>\n", "default_value": "$PROTEUSPY_REPO_HOME"}, {"fullname": "proteusPy.ProteusGlobals.REPO_DATA_DIR", "modulename": "proteusPy.ProteusGlobals", "qualname": "REPO_DATA_DIR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/Users/egs/repos/proteusPy/data/&#x27;"}, {"fullname": "proteusPy.ProteusGlobals.MODEL_DIR", "modulename": "proteusPy.ProteusGlobals", "qualname": "MODEL_DIR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/Users/egs/PDB/good/&#x27;"}, {"fullname": "proteusPy.ProteusGlobals.WINFRAME", "modulename": "proteusPy.ProteusGlobals", "qualname": "WINFRAME", "kind": "variable", "doc": "<p></p>\n", "default_value": "512"}, {"fullname": "proteusPy.ProteusGlobals.WINSIZE", "modulename": "proteusPy.ProteusGlobals", "qualname": "WINSIZE", "kind": "variable", "doc": "<p></p>\n", "default_value": "(1024, 1024)"}, {"fullname": "proteusPy.ProteusGlobals.CAMERA_POS", "modulename": "proteusPy.ProteusGlobals", "qualname": "CAMERA_POS", "kind": "variable", "doc": "<p></p>\n", "default_value": "((0, 0, -10), (0, 0, 0), (0, 1, 0))"}, {"fullname": "proteusPy.ProteusGlobals.PBAR_COLS", "modulename": "proteusPy.ProteusGlobals", "qualname": "PBAR_COLS", "kind": "variable", "doc": "<p></p>\n", "default_value": "105"}, {"fullname": "proteusPy.ProteusGlobals.DPI", "modulename": "proteusPy.ProteusGlobals", "qualname": "DPI", "kind": "variable", "doc": "<p></p>\n", "default_value": "220"}, {"fullname": "proteusPy.ProteusPyWarning", "modulename": "proteusPy.ProteusPyWarning", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "proteusPy.ProteusPyWarning.ProteusPyWarning", "modulename": "proteusPy.ProteusPyWarning", "qualname": "ProteusPyWarning", "kind": "class", "doc": "<p>ProteusPy warning.</p>\n\n<p>ProteusPy should use this warning (or subclasses of it), making it easy to\nsilence all our warning messages should you wish to:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">warnings</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">ProteusPyWarning</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">simplefilter</span><span class=\"p\">(</span><span class=\"s1\">&#39;ignore&#39;</span><span class=\"p\">,</span> <span class=\"n\">ProteusPyWarning</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Consult the warnings module documentation for more details.</p>\n", "bases": "builtins.Warning"}, {"fullname": "proteusPy.Residue", "modulename": "proteusPy.Residue", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "proteusPy.Residue.build_residue", "modulename": "proteusPy.Residue", "qualname": "build_residue", "kind": "function", "doc": "<p>build residue requires the turtle to be in orientation #2\n(at Ca, headed to C, with N on left), and returns coordinates\nfor n, ca, cb, and c.</p>\n\n<p>NOTE: Position of Oxygen depends on psi, which may not be know\nReturns: <Vector> n, ca, cb, c</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">turtle</span><span class=\"p\">:</span> <span class=\"n\">proteusPy</span><span class=\"o\">.</span><span class=\"n\">turtle3D</span><span class=\"o\">.</span><span class=\"n\">Turtle3D</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Residue.get_backbone_from_chain", "modulename": "proteusPy.Residue", "qualname": "get_backbone_from_chain", "kind": "function", "doc": "<p>Retrieve the backbone atom positions (N, Ca, C, O) for the given chain and residue number.</p>\n\n<p>Arguments:\n    chain: list of Residues in the model, eg: chain = model['A']\n    resnumb: residue number\nReturns: <Vector> n, ca, c, o atomic coordinates</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">chain</span>, </span><span class=\"param\"><span class=\"n\">resnumb</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Residue.to_alpha", "modulename": "proteusPy.Residue", "qualname": "to_alpha", "kind": "function", "doc": "<p>Moves the Turtle3D from backbone nitrogen to alpha carbon.  Turtle\nbegins at nitrogen, headed towards alpha carbon,\nwith carbonyl carbon of previous residue on left side and ends in\n    orientation #2 (at alpha carbon, headed towards carbonyl carbon, with\nnitrogen on left side).</p>\n\n<p>Arguments: turtle, the Turtle3D in correct orientation\n           phi: backbone dihedral angle\nReturns: Position of the modeled Ca. <Vector></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">turtle</span><span class=\"p\">:</span> <span class=\"n\">proteusPy</span><span class=\"o\">.</span><span class=\"n\">turtle3D</span><span class=\"o\">.</span><span class=\"n\">Turtle3D</span>, </span><span class=\"param\"><span class=\"n\">phi</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Residue.to_carbonyl", "modulename": "proteusPy.Residue", "qualname": "to_carbonyl", "kind": "function", "doc": "<p>Moves turtle from alpha carbon to carbonyl carbon. Turtle begins in\norientation #2 (at alpha carbon, headed towards carbonyl carbon, with\nnitrogen on left) and ends at carbonyl carbon, headed towards nitrogen of\nnext residue, with alpha carbon of current residue on left side.</p>\n\n<p>Arguments: turtle, the Turtle3D in correct orientation\n           psi: backbone dihedral angle\nReturns: Position of the modeled C atom. <Vector></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">turtle</span><span class=\"p\">:</span> <span class=\"n\">proteusPy</span><span class=\"o\">.</span><span class=\"n\">turtle3D</span><span class=\"o\">.</span><span class=\"n\">Turtle3D</span>, </span><span class=\"param\"><span class=\"n\">psi</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Residue.to_nitrogen", "modulename": "proteusPy.Residue", "qualname": "to_nitrogen", "kind": "function", "doc": "<p>Turtle begins at carbonyl carbon, headed towards nitrogen of\nsecond residue, with alpha carbon of first residue on left side.\nTurtle ends at nitrogen of second residue, headed towards alpha carbon\nof second residue, with carbonyl carbon of first residue on left side.\nOmega will almost always be +180 degrees for trans peptide bonds.</p>\n\n<p>Arguments: turtle, the Turtle3D in correct orientation\n           omega: backbone dihedral angle (peptide bond angle)\nReturns: Position of the modeled C atom. <Vector></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">turtle</span><span class=\"p\">:</span> <span class=\"n\">proteusPy</span><span class=\"o\">.</span><span class=\"n\">turtle3D</span><span class=\"o\">.</span><span class=\"n\">Turtle3D</span>, </span><span class=\"param\"><span class=\"n\">omega</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Residue.add_oxygen", "modulename": "proteusPy.Residue", "qualname": "add_oxygen", "kind": "function", "doc": "<p>Returns the position of the carbonyl oxygen assuming the Turtle3D\nbegins at carbonyl carbon, headed towards nitrogen of\nsecond residue, with alpha carbon of first residue on left side.</p>\n\n<p>Arguments: turtle, the Turtle3D in correct orientation</p>\n\n<p>Returns: <Vector>Position of the modeled C atom.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">turtle</span><span class=\"p\">:</span> <span class=\"n\">proteusPy</span><span class=\"o\">.</span><span class=\"n\">turtle3D</span><span class=\"o\">.</span><span class=\"n\">Turtle3D</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.Residue.to_oxygen", "modulename": "proteusPy.Residue", "qualname": "to_oxygen", "kind": "function", "doc": "<p>Returns the position of the carbonyl oxygen assuming the Turtle3D\nbegins at carbonyl carbon, headed towards nitrogen of\nsecond residue, with alpha carbon of first residue on left side.</p>\n\n<p>Arguments: turtle, the Turtle3D in correct orientation</p>\n\n<p>Returns: <Vector>Position of the modeled C atom.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">turtle</span><span class=\"p\">:</span> <span class=\"n\">proteusPy</span><span class=\"o\">.</span><span class=\"n\">turtle3D</span><span class=\"o\">.</span><span class=\"n\">Turtle3D</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.angle_annotation", "modulename": "proteusPy.angle_annotation", "kind": "module", "doc": "<p>===========================</p>\n\n<h1 id=\"scale-invariant-angle-label\">Scale invariant angle label</h1>\n\n<p>This example shows how to create a scale invariant angle annotation. It is\noften useful to mark angles between lines or inside shapes with a circular arc.\nWhile Matplotlib provides an <code>~.patches.Arc</code>, an inherent problem when directly\nusing it for such purposes is that an arc being circular in data space is not\nnecessarily circular in display space. Also, the arc's radius is often best\ndefined in a coordinate system which is independent of the actual data\ncoordinates - at least if you want to be able to freely zoom into your plot\nwithout the annotation growing to infinity.</p>\n\n<p>This calls for a solution where the arc's center is defined in data space, but\nits radius in a physical unit like points or pixels, or as a ratio of the Axes\ndimension. The following <code>AngleAnnotation</code> class provides such solution.</p>\n\n<p>The example below serves two purposes:</p>\n\n<ul>\n<li>It provides a ready-to-use solution for the problem of easily drawing angles\nin graphs.</li>\n<li>It shows how to subclass a Matplotlib artist to enhance its functionality, as\nwell as giving a hands-on example on how to use Matplotlib's :doc:<code>transform\nsystem &lt;/tutorials/advanced/transforms_tutorial&gt;</code>.</li>\n</ul>\n\n<p>If mainly interested in the former, you may copy the below class and jump to\nthe :ref:<code>angle-annotation-usage</code> section.</p>\n"}, {"fullname": "proteusPy.angle_annotation.AngleAnnotation", "modulename": "proteusPy.angle_annotation", "qualname": "AngleAnnotation", "kind": "class", "doc": "<p>Draws an arc between two vectors which appears circular in display space.</p>\n", "bases": "matplotlib.patches.Arc"}, {"fullname": "proteusPy.angle_annotation.AngleAnnotation.__init__", "modulename": "proteusPy.angle_annotation", "qualname": "AngleAnnotation.__init__", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>xy, p1, p2 : tuple or array of two floats\n    Center position and two points. Angle annotation is drawn between\n    the two vectors connecting <em>p1</em> and <em>p2</em> with <em>xy</em>, respectively.\n    Units are data coordinates.</p>\n\n<p>size : float\n    Diameter of the angle annotation in units specified by <em>unit</em>.</p>\n\n<p>unit : str\n    One of the following strings to specify the unit of <em>size</em>:</p>\n\n<pre><code>* \"pixels\": pixels\n* \"points\": points, use points instead of pixels to not have a\n  dependence on the DPI\n* \"axes width\", \"axes height\": relative units of Axes width, height\n* \"axes min\", \"axes max\": minimum or maximum of relative Axes\n  width, height\n</code></pre>\n\n<p>ax : <code>matplotlib.axes.Axes</code>\n    The Axes to add the angle annotation to.</p>\n\n<p>text : str\n    The text to mark the angle with.</p>\n\n<p>textposition : {\"inside\", \"outside\", \"edge\"}\n    Whether to show the text in- or outside the arc. \"edge\" can be used\n    for custom positions anchored at the arc's edge.</p>\n\n<p>text_kw : dict\n    Dictionary of arguments passed to the Annotation.</p>\n\n<p>**kwargs\n    Further parameters are passed to <code>matplotlib.patches.Arc</code>. Use this\n    to specify, color, linewidth etc. of the arc.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">xy</span>,</span><span class=\"param\">\t<span class=\"n\">p1</span>,</span><span class=\"param\">\t<span class=\"n\">p2</span>,</span><span class=\"param\">\t<span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">75</span>,</span><span class=\"param\">\t<span class=\"n\">unit</span><span class=\"o\">=</span><span class=\"s1\">&#39;points&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">ax</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">textposition</span><span class=\"o\">=</span><span class=\"s1\">&#39;inside&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">text_kw</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "proteusPy.angle_annotation.AngleAnnotation.ax", "modulename": "proteusPy.angle_annotation", "qualname": "AngleAnnotation.ax", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.angle_annotation.AngleAnnotation.vec1", "modulename": "proteusPy.angle_annotation", "qualname": "AngleAnnotation.vec1", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.angle_annotation.AngleAnnotation.vec2", "modulename": "proteusPy.angle_annotation", "qualname": "AngleAnnotation.vec2", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.angle_annotation.AngleAnnotation.size", "modulename": "proteusPy.angle_annotation", "qualname": "AngleAnnotation.size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.angle_annotation.AngleAnnotation.unit", "modulename": "proteusPy.angle_annotation", "qualname": "AngleAnnotation.unit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.angle_annotation.AngleAnnotation.textposition", "modulename": "proteusPy.angle_annotation", "qualname": "AngleAnnotation.textposition", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.angle_annotation.AngleAnnotation.kw", "modulename": "proteusPy.angle_annotation", "qualname": "AngleAnnotation.kw", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.angle_annotation.AngleAnnotation.text", "modulename": "proteusPy.angle_annotation", "qualname": "AngleAnnotation.text", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.angle_annotation.AngleAnnotation.get_size", "modulename": "proteusPy.angle_annotation", "qualname": "AngleAnnotation.get_size", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.angle_annotation.AngleAnnotation.set_size", "modulename": "proteusPy.angle_annotation", "qualname": "AngleAnnotation.set_size", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">size</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.angle_annotation.AngleAnnotation.get_center_in_pixels", "modulename": "proteusPy.angle_annotation", "qualname": "AngleAnnotation.get_center_in_pixels", "kind": "function", "doc": "<p>return center in pixels</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.angle_annotation.AngleAnnotation.set_center", "modulename": "proteusPy.angle_annotation", "qualname": "AngleAnnotation.set_center", "kind": "function", "doc": "<p>set center in data coordinates</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">xy</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.angle_annotation.AngleAnnotation.get_theta", "modulename": "proteusPy.angle_annotation", "qualname": "AngleAnnotation.get_theta", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">vec</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.angle_annotation.AngleAnnotation.get_theta1", "modulename": "proteusPy.angle_annotation", "qualname": "AngleAnnotation.get_theta1", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.angle_annotation.AngleAnnotation.get_theta2", "modulename": "proteusPy.angle_annotation", "qualname": "AngleAnnotation.get_theta2", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.angle_annotation.AngleAnnotation.set_theta", "modulename": "proteusPy.angle_annotation", "qualname": "AngleAnnotation.set_theta", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">angle</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.angle_annotation.AngleAnnotation.theta1", "modulename": "proteusPy.angle_annotation", "qualname": "AngleAnnotation.theta1", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.angle_annotation.AngleAnnotation.theta2", "modulename": "proteusPy.angle_annotation", "qualname": "AngleAnnotation.theta2", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.angle_annotation.AngleAnnotation.width", "modulename": "proteusPy.angle_annotation", "qualname": "AngleAnnotation.width", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.angle_annotation.AngleAnnotation.height", "modulename": "proteusPy.angle_annotation", "qualname": "AngleAnnotation.height", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.angle_annotation.AngleAnnotation.draw", "modulename": "proteusPy.angle_annotation", "qualname": "AngleAnnotation.draw", "kind": "function", "doc": "<p>Draw the arc to the given <em>renderer</em>.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>Ellipses are normally drawn using an approximation that uses\neight cubic Bezier splines.  The error of this approximation\nis 1.89818e-6, according to this unverified source:</p>\n\n<p>Lancaster, Don.  <em>Approximating a Circle or an Ellipse Using\n  Four Bezier Cubic Splines.</em></p>\n\n<p><a href=\"https://www.tinaja.com/glib/ellipse4.pdf\">https://www.tinaja.com/glib/ellipse4.pdf</a></p>\n\n<p>There is a use case where very large ellipses must be drawn\nwith very high accuracy, and it is too expensive to render the\nentire ellipse with enough segments (either splines or line\nsegments).  Therefore, in the case where either radius of the\nellipse is large enough that the error of the spline\napproximation will be visible (greater than one pixel offset\nfrom the ideal), a different technique is used.</p>\n\n<p>In that case, only the visible parts of the ellipse are drawn,\nwith each visible arc using a fixed number of spline segments\n(8).  The algorithm proceeds as follows:</p>\n\n<ol>\n<li><p>The points where the ellipse intersects the axes (or figure)\nbounding box are located.  (This is done by performing an inverse\ntransformation on the bbox such that it is relative to the unit\ncircle -- this makes the intersection calculation much easier than\ndoing rotated ellipse intersection directly.)</p>\n\n<p>This uses the \"line intersecting a circle\" algorithm from:</p>\n\n<p>Vince, John.  <em>Geometry for Computer Graphics: Formulae,\n   Examples &amp; Proofs.</em>  London: Springer-Verlag, 2005.</p></li>\n<li><p>The angles of each of the intersection points are calculated.</p></li>\n<li><p>Proceeding counterclockwise starting in the positive\nx-direction, each of the visible arc-segments between the\npairs of vertices are drawn using the Bezier arc\napproximation technique implemented in <code>.Path.arc</code>.</p></li>\n</ol>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">renderer</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.angle_annotation.AngleAnnotation.update_text", "modulename": "proteusPy.angle_annotation", "qualname": "AngleAnnotation.update_text", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.angle_annotation.AngleAnnotation.set", "modulename": "proteusPy.angle_annotation", "qualname": "AngleAnnotation.set", "kind": "function", "doc": "<p>Set multiple properties at once.</p>\n\n<p>Supported properties are</p>\n\n<p>Properties:\n    agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image\n    alpha: scalar or None\n    angle: float\n    animated: bool\n    antialiased or aa: bool or None\n    capstyle: <code>.CapStyle</code> or {'butt', 'projecting', 'round'}\n    center: unknown\n    clip_box: <code>~matplotlib.transforms.BboxBase</code> or None\n    clip_on: bool\n    clip_path: Patch or (Path, Transform) or None\n    color: color\n    edgecolor or ec: color or None\n    facecolor or fc: color or None\n    figure: <code>~matplotlib.figure.Figure</code>\n    fill: bool\n    gid: str\n    hatch: {'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n    height: float\n    in_layout: bool\n    joinstyle: <code>.JoinStyle</code> or {'miter', 'round', 'bevel'}\n    label: object\n    linestyle or ls: {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n    linewidth or lw: float or None\n    mouseover: bool\n    path_effects: list of <code>.AbstractPathEffect</code>\n    picker: None or bool or float or callable\n    rasterized: bool\n    size: unknown\n    sketch_params: (scale: float, length: float, randomness: float)\n    snap: bool or None\n    theta: unknown\n    transform: <code>~matplotlib.transforms.Transform</code>\n    url: str\n    visible: bool\n    width: float\n    zorder: float</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">agg_filter</span><span class=\"o\">=&lt;</span><span class=\"n\">UNSET</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">alpha</span><span class=\"o\">=&lt;</span><span class=\"n\">UNSET</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">angle</span><span class=\"o\">=&lt;</span><span class=\"n\">UNSET</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">animated</span><span class=\"o\">=&lt;</span><span class=\"n\">UNSET</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">antialiased</span><span class=\"o\">=&lt;</span><span class=\"n\">UNSET</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">capstyle</span><span class=\"o\">=&lt;</span><span class=\"n\">UNSET</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">center</span><span class=\"o\">=&lt;</span><span class=\"n\">UNSET</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">clip_box</span><span class=\"o\">=&lt;</span><span class=\"n\">UNSET</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">clip_on</span><span class=\"o\">=&lt;</span><span class=\"n\">UNSET</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">clip_path</span><span class=\"o\">=&lt;</span><span class=\"n\">UNSET</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">color</span><span class=\"o\">=&lt;</span><span class=\"n\">UNSET</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">edgecolor</span><span class=\"o\">=&lt;</span><span class=\"n\">UNSET</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">facecolor</span><span class=\"o\">=&lt;</span><span class=\"n\">UNSET</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">fill</span><span class=\"o\">=&lt;</span><span class=\"n\">UNSET</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">gid</span><span class=\"o\">=&lt;</span><span class=\"n\">UNSET</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">hatch</span><span class=\"o\">=&lt;</span><span class=\"n\">UNSET</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">height</span><span class=\"o\">=&lt;</span><span class=\"n\">UNSET</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">in_layout</span><span class=\"o\">=&lt;</span><span class=\"n\">UNSET</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">joinstyle</span><span class=\"o\">=&lt;</span><span class=\"n\">UNSET</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">label</span><span class=\"o\">=&lt;</span><span class=\"n\">UNSET</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">linestyle</span><span class=\"o\">=&lt;</span><span class=\"n\">UNSET</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">linewidth</span><span class=\"o\">=&lt;</span><span class=\"n\">UNSET</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">mouseover</span><span class=\"o\">=&lt;</span><span class=\"n\">UNSET</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">path_effects</span><span class=\"o\">=&lt;</span><span class=\"n\">UNSET</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">picker</span><span class=\"o\">=&lt;</span><span class=\"n\">UNSET</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">rasterized</span><span class=\"o\">=&lt;</span><span class=\"n\">UNSET</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">size</span><span class=\"o\">=&lt;</span><span class=\"n\">UNSET</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">sketch_params</span><span class=\"o\">=&lt;</span><span class=\"n\">UNSET</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">snap</span><span class=\"o\">=&lt;</span><span class=\"n\">UNSET</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">theta</span><span class=\"o\">=&lt;</span><span class=\"n\">UNSET</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">transform</span><span class=\"o\">=&lt;</span><span class=\"n\">UNSET</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">url</span><span class=\"o\">=&lt;</span><span class=\"n\">UNSET</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">visible</span><span class=\"o\">=&lt;</span><span class=\"n\">UNSET</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">width</span><span class=\"o\">=&lt;</span><span class=\"n\">UNSET</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">zorder</span><span class=\"o\">=&lt;</span><span class=\"n\">UNSET</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.angle_annotation.plot_angle", "modulename": "proteusPy.angle_annotation", "qualname": "plot_angle", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ax</span>, </span><span class=\"param\"><span class=\"n\">pos</span>, </span><span class=\"param\"><span class=\"n\">angle</span>, </span><span class=\"param\"><span class=\"n\">length</span><span class=\"o\">=</span><span class=\"mf\">0.95</span>, </span><span class=\"param\"><span class=\"n\">acol</span><span class=\"o\">=</span><span class=\"s1\">&#39;C0&#39;</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.atoms", "modulename": "proteusPy.atoms", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "proteusPy.atoms.N_RAD_COV", "modulename": "proteusPy.atoms", "qualname": "N_RAD_COV", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.74"}, {"fullname": "proteusPy.atoms.C_RAD_COV", "modulename": "proteusPy.atoms", "qualname": "C_RAD_COV", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.77"}, {"fullname": "proteusPy.atoms.O_RAD_COV", "modulename": "proteusPy.atoms", "qualname": "O_RAD_COV", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.73"}, {"fullname": "proteusPy.atoms.P_RAD_COV", "modulename": "proteusPy.atoms", "qualname": "P_RAD_COV", "kind": "variable", "doc": "<p></p>\n", "default_value": "1.1"}, {"fullname": "proteusPy.atoms.S_RAD_COV", "modulename": "proteusPy.atoms", "qualname": "S_RAD_COV", "kind": "variable", "doc": "<p></p>\n", "default_value": "1.04"}, {"fullname": "proteusPy.atoms.CA_RAD_COV", "modulename": "proteusPy.atoms", "qualname": "CA_RAD_COV", "kind": "variable", "doc": "<p></p>\n", "default_value": "1.74"}, {"fullname": "proteusPy.atoms.H_RAD_COV", "modulename": "proteusPy.atoms", "qualname": "H_RAD_COV", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.35"}, {"fullname": "proteusPy.atoms.FE_RAD_COV", "modulename": "proteusPy.atoms", "qualname": "FE_RAD_COV", "kind": "variable", "doc": "<p></p>\n", "default_value": "1.17"}, {"fullname": "proteusPy.atoms.ATOM_RADII_COVALENT", "modulename": "proteusPy.atoms", "qualname": "ATOM_RADII_COVALENT", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;N&#x27;: 0.74, &#x27;C&#x27;: 0.77, &#x27;CA&#x27;: 1.74, &#x27;O&#x27;: 0.73, &#x27;S&#x27;: 1.04, &#x27;SG&#x27;: 1.04, &#x27;H&#x27;: 0.35, &#x27;CB&#x27;: 0.77}"}, {"fullname": "proteusPy.atoms.N_RAD_CPK", "modulename": "proteusPy.atoms", "qualname": "N_RAD_CPK", "kind": "variable", "doc": "<p></p>\n", "default_value": "1.54"}, {"fullname": "proteusPy.atoms.C_RAD_CPK", "modulename": "proteusPy.atoms", "qualname": "C_RAD_CPK", "kind": "variable", "doc": "<p></p>\n", "default_value": "1.7"}, {"fullname": "proteusPy.atoms.O_RAD_CPK", "modulename": "proteusPy.atoms", "qualname": "O_RAD_CPK", "kind": "variable", "doc": "<p></p>\n", "default_value": "1.4"}, {"fullname": "proteusPy.atoms.P_RAD_CPK", "modulename": "proteusPy.atoms", "qualname": "P_RAD_CPK", "kind": "variable", "doc": "<p></p>\n", "default_value": "1.9"}, {"fullname": "proteusPy.atoms.S_RAD_CPK", "modulename": "proteusPy.atoms", "qualname": "S_RAD_CPK", "kind": "variable", "doc": "<p></p>\n", "default_value": "1.8"}, {"fullname": "proteusPy.atoms.CA_RAD_CPK", "modulename": "proteusPy.atoms", "qualname": "CA_RAD_CPK", "kind": "variable", "doc": "<p></p>\n", "default_value": "1.274"}, {"fullname": "proteusPy.atoms.H_RAD_CPK", "modulename": "proteusPy.atoms", "qualname": "H_RAD_CPK", "kind": "variable", "doc": "<p></p>\n", "default_value": "1.2"}, {"fullname": "proteusPy.atoms.Z_RAD_CPK", "modulename": "proteusPy.atoms", "qualname": "Z_RAD_CPK", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.8"}, {"fullname": "proteusPy.atoms.ATOM_RADII_CPK", "modulename": "proteusPy.atoms", "qualname": "ATOM_RADII_CPK", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;N&#x27;: 1.54, &#x27;C&#x27;: 1.7, &#x27;CA&#x27;: 1.274, &#x27;O&#x27;: 1.4, &#x27;SG&#x27;: 1.8, &#x27;S&#x27;: 1.8, &#x27;H&#x27;: 1.2, &#x27;CB&#x27;: 1.7, &#x27;Z&#x27;: 0.8}"}, {"fullname": "proteusPy.atoms.ATOM_COLORS", "modulename": "proteusPy.atoms", "qualname": "ATOM_COLORS", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;O&#x27;: &#x27;red&#x27;, &#x27;C&#x27;: &#x27;grey&#x27;, &#x27;N&#x27;: &#x27;blue&#x27;, &#x27;S&#x27;: &#x27;yellow&#x27;, &#x27;H&#x27;: &#x27;white&#x27;, &#x27;SG&#x27;: &#x27;yellow&#x27;, &#x27;CB&#x27;: &#x27;grey&#x27;, &#x27;FE&#x27;: &#x27;green&#x27;, &#x27;Z&#x27;: &#x27;silver&#x27;, &#x27;C2&#x27;: &#x27;lightgrey&#x27;, &#x27;N2&#x27;: &#x27;lightblue&#x27;}"}, {"fullname": "proteusPy.atoms.BOND_RADIUS", "modulename": "proteusPy.atoms", "qualname": "BOND_RADIUS", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.12"}, {"fullname": "proteusPy.atoms.BOND_COLOR", "modulename": "proteusPy.atoms", "qualname": "BOND_COLOR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;darkgrey&#x27;"}, {"fullname": "proteusPy.atoms.BS_SCALE", "modulename": "proteusPy.atoms", "qualname": "BS_SCALE", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.25"}, {"fullname": "proteusPy.atoms.SPECULARITY", "modulename": "proteusPy.atoms", "qualname": "SPECULARITY", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.7"}, {"fullname": "proteusPy.atoms.SPEC_POWER", "modulename": "proteusPy.atoms", "qualname": "SPEC_POWER", "kind": "variable", "doc": "<p></p>\n", "default_value": "80"}, {"fullname": "proteusPy.atoms.CAMERA_SCALE", "modulename": "proteusPy.atoms", "qualname": "CAMERA_SCALE", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.5"}, {"fullname": "proteusPy.atoms.FONTSIZE", "modulename": "proteusPy.atoms", "qualname": "FONTSIZE", "kind": "variable", "doc": "<p></p>\n", "default_value": "8"}, {"fullname": "proteusPy.data", "modulename": "proteusPy.data", "kind": "module", "doc": "<p>Global declarations for the proteusPy package</p>\n"}, {"fullname": "proteusPy.data.DATA_DIR", "modulename": "proteusPy.data", "qualname": "DATA_DIR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/Users/egs/repos/proteusPy/proteusPy/data/&#x27;"}, {"fullname": "proteusPy.data.SS_PICKLE_FILE", "modulename": "proteusPy.data", "qualname": "SS_PICKLE_FILE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;PDB_all_ss.pkl&#x27;"}, {"fullname": "proteusPy.data.SS_DICT_PICKLE_FILE", "modulename": "proteusPy.data", "qualname": "SS_DICT_PICKLE_FILE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;PDB_all_ss_dict.pkl&#x27;"}, {"fullname": "proteusPy.data.SS_DICT_PICKLE_FILE2", "modulename": "proteusPy.data", "qualname": "SS_DICT_PICKLE_FILE2", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;PDB_all_ss_dict_ind.pkl&#x27;"}, {"fullname": "proteusPy.data.SS_TORSIONS_FILE", "modulename": "proteusPy.data", "qualname": "SS_TORSIONS_FILE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;PDB_all_SS_torsions.csv&#x27;"}, {"fullname": "proteusPy.data.PROBLEM_ID_FILE", "modulename": "proteusPy.data", "qualname": "PROBLEM_ID_FILE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;PDB_all_SS_problems.csv&#x27;"}, {"fullname": "proteusPy.data.SS_ID_FILE", "modulename": "proteusPy.data", "qualname": "SS_ID_FILE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;ss_ids.txt&#x27;"}, {"fullname": "proteusPy.data.SS_SUBSET_PICKLE_FILE", "modulename": "proteusPy.data", "qualname": "SS_SUBSET_PICKLE_FILE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;PDB_subset_ss.pkl&#x27;"}, {"fullname": "proteusPy.data.SS_SUBSET_DICT_PICKLE_FILE", "modulename": "proteusPy.data", "qualname": "SS_SUBSET_DICT_PICKLE_FILE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;PDB_subset_ss_dict.pkl&#x27;"}, {"fullname": "proteusPy.data.SS_SUBSET_DICT_PICKLE_FILE_IND", "modulename": "proteusPy.data", "qualname": "SS_SUBSET_DICT_PICKLE_FILE_IND", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;PDB_subset_ss_dict_ind.pkl&#x27;"}, {"fullname": "proteusPy.data.SS_SUBSET_TORSIONS_FILE", "modulename": "proteusPy.data", "qualname": "SS_SUBSET_TORSIONS_FILE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;PDB_subset_torsions.csv&#x27;"}, {"fullname": "proteusPy.data.SS_PROBLEM_SUBSET_ID_FILE", "modulename": "proteusPy.data", "qualname": "SS_PROBLEM_SUBSET_ID_FILE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;PDB_subset_problems.csv&#x27;"}, {"fullname": "proteusPy.data.SS_CLASS_DICT_FILE", "modulename": "proteusPy.data", "qualname": "SS_CLASS_DICT_FILE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;PDB_ss_classes_dict.pkl&#x27;"}, {"fullname": "proteusPy.data.SS_CONSENSUS_FILE", "modulename": "proteusPy.data", "qualname": "SS_CONSENSUS_FILE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;SS_consensus_class_sext.pkl&#x27;"}, {"fullname": "proteusPy.data.LOADER_FNAME", "modulename": "proteusPy.data", "qualname": "LOADER_FNAME", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;PDB_SS_ALL_LOADER.pkl&#x27;"}, {"fullname": "proteusPy.data.LOADER_SUBSET_FNAME", "modulename": "proteusPy.data", "qualname": "LOADER_SUBSET_FNAME", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;PDB_SS_SUBSET_LOADER.pkl&#x27;"}, {"fullname": "proteusPy.data.LOADER_FNAME_URL", "modulename": "proteusPy.data", "qualname": "LOADER_FNAME_URL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://raw.githubusercontent.com/suchanek/proteusPy/master/proteusPy/data/PDB_SS_ALL_LOADER.pkl&#x27;"}, {"fullname": "proteusPy.data.LOADER_SUBSET_FNAME_URL", "modulename": "proteusPy.data", "qualname": "LOADER_SUBSET_FNAME_URL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://raw.githubusercontent.com/suchanek/proteusPy/blob/master/proteusPy/data/PDB_SS_SUBSET_LOADER.pkl&#x27;"}, {"fullname": "proteusPy.data.LOADER_ALL_URL", "modulename": "proteusPy.data", "qualname": "LOADER_ALL_URL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://drive.google.com/uc?id=1igF-sppLPaNsBaUS7nkb13vtOGZZmsFp&#x27;"}, {"fullname": "proteusPy.data.LOADER_SUBSET_URL", "modulename": "proteusPy.data", "qualname": "LOADER_SUBSET_URL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://drive.google.com/uc?id=1puy9pxrClFks0KN9q5PPV_ONKvL-hg33&#x27;"}, {"fullname": "proteusPy.data.SS_CLASS_DEFINITIONS", "modulename": "proteusPy.data", "qualname": "SS_CLASS_DEFINITIONS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;\\nIdx,chi1_s,chi2_s,chi3_s,chi4_s,chi5_s,class_id,SS_Classname,FXN\\n0,-1,-1,-1,-1,-1,00000,-LHSpiral,UNK\\n1,-1,-1,-1,-1,1,00002,00002,UNK\\n2,-1,-1,-1,1,-1,00020,-LHHook,UNK\\n3,-1,-1,-1,1,1,00022,00022,UNK\\n4,-1,-1,1,-1,-1,00200,-RHStaple,Allosteric\\n5,-1,-1,1,-1,1,00202,00202,UNK\\n6,-1,-1,1,1,-1,00220,00220,UNK\\n7,-1,-1,1,1,1,00222,00222,UNK\\n8,-1,1,-1,-1,-1,02000,02000,UNK\\n9,-1,1,-1,-1,1,02002,02002,UNK\\n10,-1,1,-1,1,-1,02020,-LHStaple,UNK\\n11,-1,1,-1,1,1,02022,02022,UNK\\n12,-1,1,1,-1,-1,02200,-RHHook,UNK\\n13,-1,1,1,-1,1,02202,02202,UNK\\n14,-1,1,1,1,-1,02220,-RHSpiral,UNK\\n15,-1,1,1,1,1,02222,02222,UNK\\n16,1,-1,-1,-1,-1,20000,\u00b1LHSpiral,UNK\\n17,1,-1,-1,-1,1,20002,+LHSpiral,UNK\\n18,1,-1,-1,1,-1,20020,\u00b1LHHook,UNK\\n19,1,-1,-1,1,1,20022,+LHHook,UNK\\n20,1,-1,1,-1,-1,20200,\u00b1RHStaple,UNK\\n21,1,-1,1,-1,1,20202,+RHStaple,UNK\\n22,1,-1,1,1,-1,20220,\u00b1RHHook,Catalytic\\n23,1,-1,1,1,1,20222,20222,UNK\\n24,1,1,-1,-1,-1,22000,-/+LHHook,UNK\\n25,1,1,-1,-1,1,22002,22002,UNK\\n26,1,1,-1,1,-1,22020,\u00b1LHStaple,UNK\\n27,1,1,-1,1,1,22022,+LHStaple,UNK\\n28,1,1,1,-1,-1,22200,-/+RHHook,UNK\\n29,1,1,1,-1,1,22202,+RHHook,UNK\\n30,1,1,1,1,-1,22220,\u00b1RHSpiral,UNK\\n31,1,1,1,1,1,22222,+RHSpiral,UNK\\n&#x27;"}, {"fullname": "proteusPy.data.CLASSOBJ_FNAME", "modulename": "proteusPy.data", "qualname": "CLASSOBJ_FNAME", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;PDB_CLASS_OBJ.pkl&#x27;"}, {"fullname": "proteusPy.turtle3D", "modulename": "proteusPy.turtle3D", "kind": "module", "doc": "<p>Implementation of a 3D 'Turtle' in Python.</p>\n\n<p>Part of the program proteusPy, <a href=\"https://github.com/suchanek/proteusPy\">https://github.com/suchanek/proteusPy</a>, \na Python packages for the manipulation and analysis of macromolecules. \nBased on the C implementation originally authored by Eric G. Suchanek PhD, 1990.</p>\n"}, {"fullname": "proteusPy.turtle3D.ORIENT_BACKBONE", "modulename": "proteusPy.turtle3D", "qualname": "ORIENT_BACKBONE", "kind": "variable", "doc": "<p></p>\n", "default_value": "2"}, {"fullname": "proteusPy.turtle3D.ORIENT_SIDECHAIN", "modulename": "proteusPy.turtle3D", "qualname": "ORIENT_SIDECHAIN", "kind": "variable", "doc": "<p></p>\n", "default_value": "1"}, {"fullname": "proteusPy.turtle3D.Turtle3D", "modulename": "proteusPy.turtle3D", "qualname": "Turtle3D", "kind": "class", "doc": "<p>3D Turtle.</p>\n"}, {"fullname": "proteusPy.turtle3D.Turtle3D.__init__", "modulename": "proteusPy.turtle3D", "qualname": "Turtle3D.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;3D_Turtle&#39;</span></span>)</span>"}, {"fullname": "proteusPy.turtle3D.Turtle3D.position", "modulename": "proteusPy.turtle3D", "qualname": "Turtle3D.position", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.turtle3D.Turtle3D.heading", "modulename": "proteusPy.turtle3D", "qualname": "Turtle3D.heading", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.turtle3D.Turtle3D.left", "modulename": "proteusPy.turtle3D", "qualname": "Turtle3D.left", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.turtle3D.Turtle3D.up", "modulename": "proteusPy.turtle3D", "qualname": "Turtle3D.up", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.turtle3D.Turtle3D.new", "modulename": "proteusPy.turtle3D", "qualname": "Turtle3D.new", "kind": "function", "doc": "<p>Initialize a Turtle with a name and initial position</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name</strong>:  Turtle's Name</li>\n<li><strong>pos</strong>:  Turtle's Position</li>\n<li><strong>head</strong>:  Turtle's Heading vector, defaults to Vector(1,0,0)</li>\n<li><strong>left</strong>:  Turtle's Left vector, defaults to Vector(0,1,0)</li>\n<li><strong>up</strong>:  Turtle's Up vector, defaults to Vector(0,0,1)</li>\n<li><strong>pen</strong>:  Pen state, defaults to 'up'</li>\n<li><strong>recording</strong>:  _description_, defaults to False</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">pos</span><span class=\"p\">:</span> <span class=\"n\">Bio</span><span class=\"o\">.</span><span class=\"n\">PDB</span><span class=\"o\">.</span><span class=\"n\">vectors</span><span class=\"o\">.</span><span class=\"n\">Vector</span>,</span><span class=\"param\">\t<span class=\"n\">head</span><span class=\"p\">:</span> <span class=\"n\">Bio</span><span class=\"o\">.</span><span class=\"n\">PDB</span><span class=\"o\">.</span><span class=\"n\">vectors</span><span class=\"o\">.</span><span class=\"n\">Vector</span>,</span><span class=\"param\">\t<span class=\"n\">left</span><span class=\"o\">=&lt;</span><span class=\"n\">Vector</span> <span class=\"mf\">0.00</span><span class=\"p\">,</span> <span class=\"mf\">1.00</span><span class=\"p\">,</span> <span class=\"mf\">0.00</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">up</span><span class=\"o\">=&lt;</span><span class=\"n\">Vector</span> <span class=\"mf\">0.00</span><span class=\"p\">,</span> <span class=\"mf\">0.00</span><span class=\"p\">,</span> <span class=\"mf\">1.00</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">pen</span><span class=\"o\">=</span><span class=\"s1\">&#39;up&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">recording</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.turtle3D.Turtle3D.copy_coords", "modulename": "proteusPy.turtle3D", "qualname": "Turtle3D.copy_coords", "kind": "function", "doc": "<p>Copy the Position, Heading, Left and Up coordinate system from\nthe input source into self. Argument: source: Turtle3D\nReturns: None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">source</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.turtle3D.Turtle3D.reset", "modulename": "proteusPy.turtle3D", "qualname": "Turtle3D.reset", "kind": "function", "doc": "<p>Reset the Turtle to be at the Origin, with correct Heading, Left and Up vectors.\nArguments: None\nReturns: None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.turtle3D.Turtle3D.Orientation", "modulename": "proteusPy.turtle3D", "qualname": "Turtle3D.Orientation", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.turtle3D.Turtle3D.Pen", "modulename": "proteusPy.turtle3D", "qualname": "Turtle3D.Pen", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.turtle3D.Turtle3D.Recording", "modulename": "proteusPy.turtle3D", "qualname": "Turtle3D.Recording", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "proteusPy.turtle3D.Turtle3D.ResetTape", "modulename": "proteusPy.turtle3D", "qualname": "Turtle3D.ResetTape", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.turtle3D.Turtle3D.Position", "modulename": "proteusPy.turtle3D", "qualname": "Turtle3D.Position", "kind": "variable", "doc": "<p>The Turtle's Position</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Position</p>\n</blockquote>\n"}, {"fullname": "proteusPy.turtle3D.Turtle3D.Heading", "modulename": "proteusPy.turtle3D", "qualname": "Turtle3D.Heading", "kind": "variable", "doc": "<p>Get the Turtle's Heading</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Heading</p>\n</blockquote>\n"}, {"fullname": "proteusPy.turtle3D.Turtle3D.Left", "modulename": "proteusPy.turtle3D", "qualname": "Turtle3D.Left", "kind": "variable", "doc": "<p>Get the Turtle's Left direction vector</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Left</p>\n</blockquote>\n"}, {"fullname": "proteusPy.turtle3D.Turtle3D.Up", "modulename": "proteusPy.turtle3D", "qualname": "Turtle3D.Up", "kind": "variable", "doc": "<p>The Turtle's Up direction vector</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Up</p>\n</blockquote>\n"}, {"fullname": "proteusPy.turtle3D.Turtle3D.VPosition", "modulename": "proteusPy.turtle3D", "qualname": "Turtle3D.VPosition", "kind": "function", "doc": "<p>Return the Turtle's Position as a Vector</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Position</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Bio</span><span class=\"o\">.</span><span class=\"n\">PDB</span><span class=\"o\">.</span><span class=\"n\">vectors</span><span class=\"o\">.</span><span class=\"n\">Vector</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.turtle3D.Turtle3D.Name", "modulename": "proteusPy.turtle3D", "qualname": "Turtle3D.Name", "kind": "variable", "doc": "<p>Return the Turtle's Name.</p>\n"}, {"fullname": "proteusPy.turtle3D.Turtle3D.move", "modulename": "proteusPy.turtle3D", "qualname": "Turtle3D.move", "kind": "function", "doc": "<p>Move the Turtle distance (\u00c5), in direction of Heading</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>distance</strong>:  Amount to move (\u00c5)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">distance</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.turtle3D.Turtle3D.roll", "modulename": "proteusPy.turtle3D", "qualname": "Turtle3D.roll", "kind": "function", "doc": "<p>Roll the Turtle about the heading vector angle degrees</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>angle</strong>:  roll angle, degrees -180 -> 180</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">angle</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.turtle3D.Turtle3D.yaw", "modulename": "proteusPy.turtle3D", "qualname": "Turtle3D.yaw", "kind": "function", "doc": "<p>Yaw the Turtle about the up vector (180 - angle) degrees.\nThis is used when building molecules</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>angle</strong>:  Yaw angle, degrees -180 -> 180</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">angle</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.turtle3D.Turtle3D.turn", "modulename": "proteusPy.turtle3D", "qualname": "Turtle3D.turn", "kind": "function", "doc": "<p>Turn the Turtle about the up vector angle degrees.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>angle</strong>:  Turn angle, degrees</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">angle</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.turtle3D.Turtle3D.pitch", "modulename": "proteusPy.turtle3D", "qualname": "Turtle3D.pitch", "kind": "function", "doc": "<p>pitch the Turtle about the left vector angle degrees</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>angle</strong>:  Pitch angle, degrees -180 -> 180</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">angle</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.turtle3D.Turtle3D.unit", "modulename": "proteusPy.turtle3D", "qualname": "Turtle3D.unit", "kind": "function", "doc": "<p>Return a unit vector for the input vector.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong>:  Input Vector</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Unit Vector</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.turtle3D.Turtle3D.orient", "modulename": "proteusPy.turtle3D", "qualname": "Turtle3D.orient", "kind": "function", "doc": "<p>Orients the turtle with Position at p1, Heading at p2 and Left at p3</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>position</strong>:  Position</li>\n<li><strong>heading</strong>:  Heading direction vector</li>\n<li><strong>left</strong>:  Left direction vector</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">position</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">heading</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.turtle3D.Turtle3D.orient_at_residue", "modulename": "proteusPy.turtle3D", "qualname": "Turtle3D.orient_at_residue", "kind": "function", "doc": "<p>Orient the turtle at the specified residue from the input Chain in\neither orientation 1 or 2.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>chain: list of Residues in the model, eg</strong>:  chain = model['A']</li>\n<li><strong>resnumb</strong>:  residue number</li>\n<li><strong>orientation</strong>:  1 - at Ca heading towards Cb with N at the left or\n2 - at Ca heading towards C with N at the left</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">chain</span>, </span><span class=\"param\"><span class=\"n\">resnumb</span>, </span><span class=\"param\"><span class=\"n\">orientation</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.turtle3D.Turtle3D.orient_from_backbone", "modulename": "proteusPy.turtle3D", "qualname": "Turtle3D.orient_from_backbone", "kind": "function", "doc": "<p>Orient the turtle at the specified residue from the input Chain in\neither orientation 1 or 2.</p>\n\n<p>Arguments:\n    turtle: input Turtle3D object\n    n: position of n atom\n    ca: position of ca atom\n    c: position of c atom\n    orientation:\n    1 - at Ca heading towards Cb with N at the left\n    2 - at Ca heading towards C with N at the left\nReturns: None. Turtle internal state is modified</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">ca</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">cb</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">orientation</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.turtle3D.Turtle3D.to_local", "modulename": "proteusPy.turtle3D", "qualname": "Turtle3D.to_local", "kind": "function", "doc": "<p>Returns the Turtle-centered local coordinates for input Global vector (3d)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">global_vec</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.turtle3D.Turtle3D.to_localVec", "modulename": "proteusPy.turtle3D", "qualname": "Turtle3D.to_localVec", "kind": "function", "doc": "<p>Returns the Turtle-centered local coordinates for input Global vector (3d)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">global_vec</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Bio</span><span class=\"o\">.</span><span class=\"n\">PDB</span><span class=\"o\">.</span><span class=\"n\">vectors</span><span class=\"o\">.</span><span class=\"n\">Vector</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.turtle3D.Turtle3D.to_global", "modulename": "proteusPy.turtle3D", "qualname": "Turtle3D.to_global", "kind": "function", "doc": "<p>Returns the global coordinates for input local vector (3d)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">local</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.turtle3D.Turtle3D.to_globalVec", "modulename": "proteusPy.turtle3D", "qualname": "Turtle3D.to_globalVec", "kind": "function", "doc": "<p>Returns the global coordinates for input local vector (3d)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">local</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Bio</span><span class=\"o\">.</span><span class=\"n\">PDB</span><span class=\"o\">.</span><span class=\"n\">vectors</span><span class=\"o\">.</span><span class=\"n\">Vector</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.turtle3D.Turtle3D.bbone_to_schain", "modulename": "proteusPy.turtle3D", "qualname": "Turtle3D.bbone_to_schain", "kind": "function", "doc": "<p>Function requires turtle to be in orientation #2 (at alpha carbon,\nheaded towards carbonyl, with nitrogen on left) and converts to orientation #1\n(at alpha c, headed to beta carbon, with nitrogen on left.</p>\n\n<p>Arguments:\n    turtle: Turtle3D object in orientation #2</p>\n\n<p>Returns: modified Turtle3D</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.turtle3D.Turtle3D.schain_to_bbone", "modulename": "proteusPy.turtle3D", "qualname": "Turtle3D.schain_to_bbone", "kind": "function", "doc": "<p>Function requires turtle to be in orientation #1 (at alpha c, headed to beta carbon, with nitrogen on left)\nand converts to orientation #2 (at alpha carbon, headed towards carbonyl, with nitrogen on left).</p>\n\n<p>Arguments:\n    None\nReturns: modified Turtle3D</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.turtle3D.test_turtle", "modulename": "proteusPy.turtle3D", "qualname": "test_turtle", "kind": "function", "doc": "<p>Tests the turtle move, roll, yaw, pitch and turn.</p>\n\n<pre><code>&gt;&gt;&gt; import proteusPy\n&gt;&gt;&gt; from proteusPy.turtle3D import Turtle3D\n&gt;&gt;&gt; turt = Turtle3D('test')\n&gt;&gt;&gt; turt.move(2.0)\n&gt;&gt;&gt; turt\n&lt;Turtle: test\n Position: [2. 0. 0.],\n Heading: [1. 0. 0.]\n Left: [0. 1. 0.]\n Up: [0. 0. 1.]\n Orientation: -1\n Pen: 1\n Recording: False&gt;\n&gt;&gt;&gt; turt.roll(45.0)\n&gt;&gt;&gt; turt\n&lt;Turtle: test\n Position: [2. 0. 0.],\n Heading: [1. 0. 0.]\n Left: [0.         0.70710678 0.70710678]\n Up: [ 0.         -0.70710678  0.70710678]\n Orientation: -1\n Pen: 1\n Recording: False&gt;\n&gt;&gt;&gt; turt.roll(45.0)\n&gt;&gt;&gt; turt\n&lt;Turtle: test\n Position: [2. 0. 0.],\n Heading: [1. 0. 0.]\n Left: [0. 0. 1.]\n Up: [ 0. -1.  0.]\n Orientation: -1\n Pen: 1\n Recording: False&gt;\n&gt;&gt;&gt; turt.reset()\n&gt;&gt;&gt; turt.pitch(45.0)\n&gt;&gt;&gt; turt\n&lt;Turtle: 3D_Turtle\n Position: [0. 0. 0.],\n Heading: [ 0.70710678  0.         -0.70710678]\n Left: [0. 1. 0.]\n Up: [0.70710678 0.         0.70710678]\n Orientation: -1\n Pen: 1\n Recording: False&gt;\n&gt;&gt;&gt; turt.pitch(45.0)\n&gt;&gt;&gt; turt\n&lt;Turtle: 3D_Turtle\n Position: [0. 0. 0.],\n Heading: [ 0.  0. -1.]\n Left: [0. 1. 0.]\n Up: [1. 0. 0.]\n Orientation: -1\n Pen: 1\n Recording: False&gt;\n</code></pre>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">turt</span><span class=\"o\">.</span><span class=\"n\">yaw</span><span class=\"p\">(</span><span class=\"mf\">45.0</span><span class=\"p\">)</span>\n<span class=\"go\">    &gt;&gt;&gt; turt</span>\n<span class=\"go\">    &lt;Turtle: 3D_Turtle</span>\n<span class=\"go\">     Position: [0. 0. 0.],</span>\n<span class=\"go\">     Heading: [-0.          0.70710678  0.70710678]</span>\n<span class=\"go\">     Left: [-0.         -0.70710678  0.70710678]</span>\n<span class=\"go\">     Up: [1. 0. 0.]</span>\n<span class=\"go\">     Orientation: -1</span>\n<span class=\"go\">     Pen: 1</span>\n<span class=\"go\">     Recording: False&gt;</span>\n<span class=\"go\">    &gt;&gt;&gt; turt.yaw(45.0)</span>\n<span class=\"go\">    &gt;&gt;&gt; turt</span>\n<span class=\"go\">    &lt;Turtle: 3D_Turtle</span>\n<span class=\"go\">     Position: [0. 0. 0.],</span>\n<span class=\"go\">     Heading: [-0. -1.  0.]</span>\n<span class=\"go\">     Left: [ 0. -0. -1.]</span>\n<span class=\"go\">     Up: [1. 0. 0.]</span>\n<span class=\"go\">     Orientation: -1</span>\n<span class=\"go\">     Pen: 1</span>\n<span class=\"go\">     Recording: False&gt;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.utility", "modulename": "proteusPy.utility", "kind": "module", "doc": "<p>Utility functions for the proteusPy package </p>\n\n<p>Author: Eric G. Suchanek, PhD. </p>\n\n<p>License: MIT</p>\n\n<p>Copyright (c)2023 Eric G. Suchanek, PhD, all rights reserved</p>\n"}, {"fullname": "proteusPy.utility.distance_squared", "modulename": "proteusPy.utility", "qualname": "distance_squared", "kind": "function", "doc": "<p>Return the square of the N-dimensional distance between the\ntwo arrays.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>np.array p1</strong>:  N-dimensional array 1</li>\n<li><strong>np.array p2</strong>:  N-dimensional array 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>np.array N-dimensional distance squared \u00c5^2</p>\n</blockquote>\n\n<p>Example</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">proteusPy.utility</span> <span class=\"kn\">import</span> <span class=\"n\">distance_squared</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">distance_squared</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">)</span>\n<span class=\"go\">2.0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">p1</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">p2</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.utility.distance3d", "modulename": "proteusPy.utility", "qualname": "distance3d", "kind": "function", "doc": "<p>Calculate the 3D Euclidean distance for 2 Vector objects</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>Vector p1</strong>:  Point1</li>\n<li><strong>Vector p2</strong>:  Point2</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Distance between two points, \u00c5</p>\n</blockquote>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">proteusPy.utility</span> <span class=\"kn\">import</span> <span class=\"n\">distance3d</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">Vector</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">Vector</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">distance3d</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span><span class=\"n\">p2</span><span class=\"p\">)</span>\n<span class=\"go\">1.4142135623730951</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">p1</span><span class=\"p\">:</span> <span class=\"n\">Bio</span><span class=\"o\">.</span><span class=\"n\">PDB</span><span class=\"o\">.</span><span class=\"n\">vectors</span><span class=\"o\">.</span><span class=\"n\">Vector</span>, </span><span class=\"param\"><span class=\"n\">p2</span><span class=\"p\">:</span> <span class=\"n\">Bio</span><span class=\"o\">.</span><span class=\"n\">PDB</span><span class=\"o\">.</span><span class=\"n\">vectors</span><span class=\"o\">.</span><span class=\"n\">Vector</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.utility.get_jet_colormap", "modulename": "proteusPy.utility", "qualname": "get_jet_colormap", "kind": "function", "doc": "<p>Return an array of uniformly spaced RGB values using the 'jet' colormap.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>steps</strong>:  The number of steps in the output array.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>An array of uniformly spaced RGB values using the 'jet' colormap. The shape of the array is (steps, 3).</p>\n</blockquote>\n\n<p>Example:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>get_jet_colormap(5)\n          array([[  0,   0, 127],\n                 [  0, 127, 255],\n                 [123, 255, 123],\n                 [255, 151,   0],\n                 [127,   0,   0]], dtype=uint8)</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">steps</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.utility.grid_dimensions", "modulename": "proteusPy.utility", "qualname": "grid_dimensions", "kind": "function", "doc": "<p>Computes the number of rows and columns needed to display a list of length <code>n</code>.</p>\n\n<p>Args:\n    n (int): Length of input list</p>\n\n<p>Returns:\n    tuple: Number of rows and columns required to display input list</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.utility.Check_chains", "modulename": "proteusPy.utility", "qualname": "Check_chains", "kind": "function", "doc": "<p>Returns True if structure has multiple chains of identical length,\nFalse otherwise. Primarily internal use.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>pdbid</strong>:  PDBID identifier</li>\n<li><strong>pdbdir</strong>:  PDB directory containing structures</li>\n<li><strong>verbose</strong>:  Verbosity, defaults to True</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pdbid</span>, </span><span class=\"param\"><span class=\"n\">pdbdir</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.utility.extract_firstchain_ss", "modulename": "proteusPy.utility", "qualname": "extract_firstchain_ss", "kind": "function", "doc": "<p>Function extracts disulfides from the first chain found in\nthe SSdict, returns them as a DisulfideList along with the\nnumber of Xchain disulfides.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sslist</strong>:  Starting SS list</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>(Pruned SS list, xchain)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sslist</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.utility.prune_extra_ss", "modulename": "proteusPy.utility", "qualname": "prune_extra_ss", "kind": "function", "doc": "<p>Given a dict of disulfides, check for extra chains, grab only the disulfides from\nthe first chain and return a dict containing only the first chain disulfides</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ssdict</strong>:  input dictionary with disulfides</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sslist</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.utility.download_file", "modulename": "proteusPy.utility", "qualname": "download_file", "kind": "function", "doc": "<p>Download the given URL to the input directory</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>url</strong>:  File URL</li>\n<li><strong>directory</strong>:  Directory path for saving.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">url</span>, </span><span class=\"param\"><span class=\"n\">directory</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.utility.get_memory_usage", "modulename": "proteusPy.utility", "qualname": "get_memory_usage", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.utility.print_memory_used", "modulename": "proteusPy.utility", "qualname": "print_memory_used", "kind": "function", "doc": "<p>Print memory used by the proteusPy process (GB).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.utility.image_to_ascii_art", "modulename": "proteusPy.utility", "qualname": "image_to_ascii_art", "kind": "function", "doc": "<p>Convert an image to ASCII art of given text width.</p>\n\n<p>Function takes an input filename and width and prints an ASCII art representation to console.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>fname</strong>:  Input filename.</li>\n<li><strong>nwidth</strong>:  Output width in characters.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fname</span>, </span><span class=\"param\"><span class=\"n\">nwidth</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.utility.generate_vector_dataframe", "modulename": "proteusPy.utility", "qualname": "generate_vector_dataframe", "kind": "function", "doc": "<p>Generate a pandas DataFrame containing all combinations for a vector of length 5 with a given base.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>base</strong>:  An integer representing the base of the vector elements. Must be 2, 3, or 4.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A pandas DataFrame with columns 'chi1', 'chi2', 'chi3', 'chi4', 'chi5', where each row\n           contains all combinations for a vector of length 5 with the specified base. The symbols used\n           to represent the vector elements are '-' and '+' for base 2, '-' '+' and '<em>' for base 3,\n           and '-' '+' '</em>' and '@' for base 4.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  If the specified base is not supported (i.e., not 2, 3, or 4).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">base</span><span class=\"o\">=</span><span class=\"mi\">3</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.utility.sort_by_column", "modulename": "proteusPy.utility", "qualname": "sort_by_column", "kind": "function", "doc": "<p>Sorts a Pandas DataFrame by the values in the 'incidence' column in descending order.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>df</strong>:  The input DataFrame to be sorted.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The sorted DataFrame.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">column</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.utility.plot_class_chart", "modulename": "proteusPy.utility", "qualname": "plot_class_chart", "kind": "function", "doc": "<p>Create a Matplotlib pie chart with <code>classes</code> segments of equal size.</p>\n\n<p>Parameters:\n    classes (int): The number of segments to create in the pie chart.</p>\n\n<p>Returns:\n    None</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">plot_class_chart</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>This will create a pie chart with 4 equal segments.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">classes</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "proteusPy.utility.retrieve_git_lfs_files", "modulename": "proteusPy.utility", "qualname": "retrieve_git_lfs_files", "kind": "function", "doc": "<p>Retrieves a git-lfs json object from a specified repo.\nIt does NOT download the file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">repo_url</span>, </span><span class=\"param\"><span class=\"n\">objects</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();