<h1 id="summary">Summary</h1>
<p><strong>proteusPy</strong> is a Python package specializing in the
modeling and analysis of proteins of known structure with an emphasis on
Disulfide Bonds. This package reprises my molecular modeling program
<em>proteus</em>, <span class="citation"
data-cites="Pabo_1986">[@Pabo_1986]</span>, and utilizes a new
implementation of the <a
href="https://suchanek.github.io/proteusPy/proteusPy/turtle3D.html">Turtle3D</a>
class for disufulfide and protein modeling. The turtle implements the
functions <code>Move</code>, <code>Roll</code>, <code>Yaw</code>,
<code>Pitch</code> and <code>Turn</code> for movement in a
three-dimensional space. The <a
href="https://suchanek.github.io/proteusPy/proteusPy/Disulfide.html">Disulfide</a>
class implements methods to analyze the protein structure stabilizing
element known as a <em>Disulfide Bond</em>. This class and its
underlying methods are being used to perform a structural analysis of
over 35,800 disulfide-bond containing proteins in the RCSB protein data
bank.</p>
<h1 id="virtual-environment-creation">Virtual Environment Creation</h1>
<ol type="1">
<li><em>Install Anaconda (<a href="http://anaconda.org"
class="uri">http://anaconda.org</a>)</em></li>
<li><em>Build the environment.</em> It’s simplest to clone the repo via
github since it contains all of the notebooks, test programs and raw
Disulfide databases. The source code distribution can be also be used
from pyPi as a normal package within your own environment.
<ul>
<li>From the gitHub repository:
<ul>
<li><p>Install git-lfs</p>
<ul>
<li>https://help.github.com/en/github/managing-large-files/installing-git-large-file-storage</li>
</ul></li>
<li><p>From a shell prompt: ``` $ git-lfs track “<em>.csv” ”</em>.pkl”
“*.mp4” $ git clone https://github.com/suchanek/proteusPy/proteusPy.git
$ cd proteusPy $ conda env create –name proteusPy –file=proteusPy.yml $
conda activate proteusPy $ pip install . $ jupyter nbextension enable
–py –sys-prefix widgetsnbextension $ python -m ipykernel install –user
–name proteusPy –display-name “Python (proteusPy)”</p>
<p>```</p></li>
</ul></li>
</ul></li>
</ol>
<h1 id="general-usage">General Usage</h1>
<p>Once the package is installed one can use the existing notebooks for
analysis of the RCSB Disulfide database. The <code>notebooks</code>
directory contains all of my Jupyter notebooks and is a good place to
start. The <code>DisulfideAnalysis.ipynb</code> notebook contains the
first analysis paper. The <code>programs</code> subdirectory contains
the primary programs for downloading the RCSB disulfide-containing
structure files, (<code>DisulfideDownloader.py</code>), extracting the
disulfides and creating the database loaders
(<code>DisulfideExtractor.py</code>) and cluster analysis
(<code>DisulfideClass_Analysis.py</code>).</p>
<p>The first time one loads the database via <code>Load_PDB_SS()</code>
the system will attempt to download the full and subset database from my
Google Drive. If this fails the system will attempt to rebuild the
database from the repo’s <code>data</code> subdirectory (not the
package’s). If you’ve downloaded from github this will work correctly.
If you’ve installed from pyPi via <code>pip</code> it will fail.</p>
<h1 id="the-class-details">The Class Details</h1>
<p>The primary driver for implementing <code>proteusPy</code> was to
revisit the <a href="https://www.rcsb.org">RCSB Protein Databank</a> and
do a structural analysis of the disulfide bonds contained therein. This
necessitated the creation an object-oriented database capable of
introspection analysis, and display. I’ll describe the primary classes
below. The API is available online at:
https://suchanek.github.io/proteusPy/proteusPy.html.</p>
<p>##<a
href="https://suchanek.github.io/proteusPy/proteusPy/Disulfide.html">Disulfide</a>
This class provides a Python object and methods representing a physical
disulfide bond either extracted from the RCSB protein databank or built
using the <a href="turtle3D.html">proteusPy.Turtle3D</a> class. The
disulfide bond is an important intermolecular stabilizing structural
element and is characterized by:</p>
<ul>
<li><p>Atomic coordinates for the atoms N, Cα, Cβ, C’, Sγ for both
residues. These are stored as both raw atomic coordinates as read from
the RCSB file and internal local coordinates.</p></li>
<li><p>The dihedral angles Χ1 - Χ5 for the disulfide bond</p></li>
<li><p>A name, by default
{pdb_id}{prox_resnumb}{prox_chain}_{distal_resnum}{distal_chain}</p></li>
<li><p>Proximal residue number</p></li>
<li><p>Distal residue number</p></li>
<li><p>Approximate bond torsional energy (kcal/mol). The equation
embodies the typical 3-fold rotation barriers associated with single
bonds, (Χ1, Χ5, Χ2, Χ4) and a high 2-fold barrier for Χ3, resulting from
the partial double bond character of the S-S bond. This property leads
to two major disulfide families, characterized by the sign of Χ3.
<em>Left-handed</em> disulfides have Χ3 &lt; 0° and
<em>right-handed</em> disulfides have Χ3 &gt; 0°. Within this breakdown
there are numerous subfamilies, broadly known as the <em>hook</em>,
<em>spiral</em> and <em>staple</em>. These are under
characterization.</p></li>
<li><p>Euclidean length of the dihedral angles (degrees) defined as:
<span class="math display">$$\\sqrt(\\chi_{1}^{2} + \\chi_{2}^{2} +
\\chi_{3}^{2} + \\chi_{4}^{2} + \\chi_{5}^{2})$$</span></p></li>
<li><p>Cα - Cα distance (Å)</p></li>
<li><p>Cβ - Cβ distance (Å)</p></li>
<li><p>The previous C’ and next N for both the proximal and distal
residues. These are needed to calculate the backbone dihedral angles Φ
and Ψ.</p></li>
<li><p>Backbone dihedral angles Φ and Ψ, when possible. Not all
structures are complete and in those cases the atoms needed may be
undefined. In this case the Φ and Ψ angles are set to -180°.</p></li>
</ul>
<p>The class also provides a rendering capabilities using the excellent
<a href="https://pyvista.org">PyVista</a> library, and can display
disulfides interactively in a variety of display styles: * ‘sb’ - Split
Bonds style - bonds colored by their atom type * ‘bs’ - Ball and Stick
style - split bond coloring with small atoms * ‘pd’ - Proximal/Distal
style - bonds colored <em>Red</em> for proximal residue and
<em>Green</em> for the distal residue. * ‘cpk’ - CPK style rendering,
colored by atom type: * Carbon - Grey * Nitrogen - Blue * Sulfur -
Yellow * Oxygen - Red * Hydrogen - White</p>
<p>Individual renderings can be saved to a file, and animations
created.</p>
<p>##<a
href="https://suchanek.github.io/proteusPy/proteusPy/DisulfideLoader.html">DisulfideLoader</a></p>
<p>This class represents the disulfide database itself and is its
primary means of accession. Instantiation takes 2 parameters:
<code>subset</code> and <code>verbose</code>. Given the size of the
database, one can use the <code>subset</code> parameter to load the
first 1000 disulfides into memory. This facilitates quicker development
and testing new functions. I recommend using at least a 16 GB machine to
work with the full dataset.</p>
<p>The entirety of the RCSB disulfide database is stored within the
class via a <a
href="%22https://suchanek.github.io/proteusPy/proteusPy/DisulfideList.html%22">proteusPy.DisulfideList</a>,
a <code>Pandas</code> .csv file, and a <code>dict</code> of indices
mapping the PDB IDs into their respective list of disulfides. The
datastructures allow simple, direct and flexible access to the disulfide
structures contained within. This makes it possible to access the
disulfides by array index, PDB structure ID or disulfide name.</p>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; import proteusPy
&gt;&gt;&gt; from proteusPy.Disulfide import Disulfide
&gt;&gt;&gt; from proteusPy.DisulfideLoader import DisulfideLoader
&gt;&gt;&gt; from proteusPy.DisulfideList import DisulfideList
&gt;&gt;&gt; SS1 = DisulfideList([],&#39;tmp1&#39;)
&gt;&gt;&gt; SS2 = DisulfideList([],&#39;tmp2&#39;)

&gt;&gt;&gt; PDB_SS = DisulfideLoader(verbose=False, subset=True)

Accessing by index value:
&gt;&gt;&gt; SS1 = PDB_SS[0]
&gt;&gt;&gt; SS1
&lt;Disulfide 4yys_22A_65A, Source: 4yys, Resolution: 1.35 Å&gt;

Accessing by PDB_ID returns a list of Disulfides:
&gt;&gt;&gt; SS2 = PDB_SS[&#39;4yys&#39;]
&gt;&gt;&gt; SS2
[&lt;Disulfide 4yys_22A_65A, Source: 4yys, Resolution: 1.35 Å&gt;, &lt;Disulfide 4yys_56A_98A, Source: 4yys, Resolution: 1.35 Å&gt;, &lt;Disulfide 4yys_156A_207A, Source: 4yys, Resolution: 1.35 Å&gt;]

Accessing individual disulfides by their name:
&gt;&gt;&gt; SS3 = PDB_SS[&#39;4yys_56A_98A&#39;]
&gt;&gt;&gt; SS3
&lt;Disulfide 4yys_56A_98A, Source: 4yys, Resolution: 1.35 Å&gt;

Finally, we can access disulfides by regular slicing:
&gt;&gt;&gt; SSlist = PDB_SS[:4]</code></pre>
<p>The class can also render Disulfides overlaid on a common coordinate
system to a pyVista window using the <a
href="https://suchanek.github.io/proteusPy/proteusPy/DisulfideLoader.html#DisulfideLoader.display_overlay">DisulfideLoader.display_overlay()</a>
method.</p>
<p><strong>NB:</strong> For typical usage one accesses the database via
the <code>Load_PDB_SS()</code> function. This function loads the
compressed database from its single source. Initializing a
<code>DisulfideLoader()</code> object will load the individual torsions
and disulfide .pkl files, builds the classlist structures, and writes
the completely built object to a single <code>.pkl</code> file. This
requires the raw .pkl files created by download process. These files are
contained in the repository <code>data</code> directory.</p>
<p><em>Developer’s Notes:</em> The .pkl files needed to instantiate this
class and save it into its final .pkl file are defined in the <a
href="%22https://suchanek.github.io/proteusPy/proteusPy/data.html%22">proteusPy.data</a>
class and should not be changed. Upon initialization the class will load
them and initialize itself.</p>
<ul>
<li><a
href="https://suchanek.github.io/proteusPy/proteusPy/Disulfide.html">Disulfide</a></li>
<li></li>
</ul>
<h1 id="workflow">Workflow</h1>
<p>This resulted in the following overall workflow: * Identify disulfide
containing proteins in the <a href="https://www.rcsb.org">RCSB</a>. I
generated a query using their web-based query tool. The resulting file
consisted of 35819 proteins containing over 200,000 disulfide bonds. *
Download the structure files to disk. This resulted in the program
<code>DisulfideDownloader.py</code>. * Extract the disulfides from the
downloaded structures: * Check for structural feasibility * # The Future
I am continuing to explore the initial disulfide structural classes
gleaned from Hogg <em>et al.</em> further using the sextant class
approach. This offers much higher class resolution and reveals subgroups
within the broad class. I’d also like to explore the catalytic and
allosteric classes in more detail to look for common structural
elements.</p>
<h1 id="citations">Citations</h1>
<ul>
<li>[Pabo_1986]</li>
<li>[proteusPy]</li>
</ul>
<p><em>NB:</em> This distribution is being developed slowly. proteusPy
relies on my fork of the <code>Bio</code> Python package to download and
build the database. As a result, one can’t download and create the
database locally unless the BioPython patch is applied. The changed
python file is in the repo’s data directory -
<code>parse_pdb_header.py</code>. Database analysis is unaffected
without the patch. Also, if you’re running on an M-series Mac then it’s
important to install Biopython first, since the generic release won’t
build on the M1. 7/4/23 -egs-</p>
<p>Eric G. Suchanek, PhD., <a href="mailto:suchanek@mac.com"
class="uri">mailto:suchanek@mac.com</a></p>
