<h2 id="summary">Summary</h2>
<p><strong>proteusPy</strong> is a Python package specializing in the
modeling and analysis of proteins of known structure with an emphasis on
Disulfide Bonds. This package reprises my molecular modeling program
<em>proteus</em>, <span class="citation" data-cites="Pabo_1986">(Pabo
and Suchanek 1986)</span>, and utilizes a new implementation of the <a
href="https://suchanek.github.io/proteusPy/proteusPy/turtle3D.html">Turtle3D</a>
class for disulfide and protein modeling. The <a
href="https://suchanek.github.io/proteusPy/proteusPy/Disulfide.html">Disulfide</a>
class implements methods to analyze the protein structure stabilizing
element known as a <strong>Disulfide Bond</strong>.</p>
<p>The work has resulted in a freely-accessible database of over 120,494
disulfide bonds contained within 35,818 proteins in the RCSB protein
databank.</p>
<h2 id="motivation">Motivation</h2>
<p>My primary motivation for implementing <code>proteusPy</code> was to
revisit the <a href="https://www.rcsb.org">RCSB Protein Databank</a> and
do a structural analysis of the disulfide bonds contained therein. This
necessitated the creation an object-oriented database capable of
introspection, analysis and display. The API <span class="citation"
data-cites="API">(Suchanek 2023a)</span> is available online at: <a
href="https://suchanek.github.io/proteusPy/proteusPy.html"
class="uri">https://suchanek.github.io/proteusPy/proteusPy.html</a> and
provides more details and numerous examples.</p>
<h2 id="requirements">Requirements</h2>
<ol type="1">
<li>PC running MacOS, Linux, Windows</li>
<li>16 GB RAM</li>
<li>2 GB disk space</li>
</ol>
<h2 id="installation">Installation</h2>
<p>It’s simplest to clone the repo via github since it contains all of
the notebooks, test programs and raw Disulfide databases.</p>
<ul>
<li><p>Install Anaconda: <a href="http://anaconda.org"
class="uri">http://anaconda.org</a></p></li>
<li><p>Install git-lfs</p>
<ul>
<li><a
href="https://help.github.com/en/github/managing-large-files/installing-git-large-file-storage"
class="uri">https://help.github.com/en/github/managing-large-files/installing-git-large-file-storage</a></li>
</ul></li>
<li><p>From a shell prompt:</p>
<p>```console $ git-lfs track “<em>.csv” ”</em>.pkl” “*.mp4” $ git clone
https://github.com/suchanek/proteusPy/proteusPy.git $ cd proteusPy $
conda env create –name proteusPy –file=proteusPy.yml $ conda activate
proteusPy $ pip install . $ jupyter nbextension enable –py –sys-prefix
widgetsnbextension $ python -m ipykernel install –user –name proteusPy
–display-name “Python (proteusPy)”</p></li>
</ul>
<h2 id="general-usage">General Usage</h2>
<p>Once the package is installed one can use the existing notebooks for
analysis of the RCSB Disulfide database. The <a href="">notebooks</a>
directory contains all of my Jupyter notebooks and is a good place to
start. The <a
href="https://github.com/suchanek/proteusPy/blob/master/notebooks/DisulfideAnalysis.ipynb">DisulfideAnalysis.ipynb</a>
notebook contains the first analysis paper. The <a
href="https://github.com/suchanek/proteusPy/tree/master/programs">programs</a>
subdirectory contains the primary programs for downloading the RCSB
disulfide-containing structure files, <a
href="https://github.com/suchanek/proteusPy/blob/master/programs/DisulfideDownloader.py">DisulfideDownloader.py</a>,
extracting the disulfides and creating the database loaders <a
href="https://github.com/suchanek/proteusPy/blob/master/programs/DisulfideExtractor.py">DisulfideExtractor.py</a>
and cluster analysis <a
href="https://github.com/suchanek/proteusPy/blob/master/programs/DisulfideExtractor.py">DisulfideClass_Analysis.py</a>.</p>
<p>The first time one loads the database via <a
href="https://suchanek.github.io/proteusPy/proteusPy/DisulfideLoader.html#Load_PDB_SS">Load_PDB_SS()</a>
the system will attempt to download the full and subset database from my
Google Drive. If this fails the system will attempt to rebuild the
database from the repo’s <code>data</code> subdirectory (not the
package’s). If you’ve downloaded from github this will work correctly.
If you’ve installed from pyPi via <code>pip</code> it will fail.</p>
<h2 id="class-details">Class Details</h2>
<p>The primary classes developed for <code>proteusPy</code> are
described briefly below. Please see the <a
href="https://suchanek.github.io/proteusPy/proteusPy.html">API</a> for
details.</p>
<h2 id="disulfide"><a
href="https://suchanek.github.io/proteusPy/proteusPy/Disulfide.html">Disulfide</a></h2>
<p>This class provides a Python object and methods representing a
physical disulfide bond either extracted from the RCSB protein databank
or a virtual one built using the <a
href="https://suchanek.github.io/proteusPy/proteusPy/turtle3D.html">Turtle3D</a>
class. The disulfide bond is an important intramolecular stabilizing
structural element and is characterized by:</p>
<ul>
<li>Atomic coordinates for the atoms <span
class="math inline"><em>N</em>, <em>C</em><sub><em>α</em></sub></span>,
<span class="math inline"><em>C</em><sub><em>β</em></sub></span>, <span
class="math inline"><em>C</em>′</span>, <span
class="math inline"><em>S</em><sub><em>γ</em></sub></span> for both
residues. These are stored as both raw atomic coordinates as read from
the RCSB file and internal local coordinates.</li>
<li>The dihedral angles <span
class="math inline"><em>χ</em><sub>1</sub> − <em>χ</em><sub>5</sub></span>
for the disulfide bond</li>
<li>A name, by default:
<code>{pdb_id}{prox_resnumb}{prox_chain}_{distal_resnum}{distal_chain}</code></li>
<li>Proximal residue number</li>
<li>Distal residue number</li>
<li>Approximate bond torsional energy (kcal/mol): <span
class="math display"><em>E</em><sub><em>k</em><em>c</em><em>a</em><em>l</em>/<em>m</em><em>o</em><em>l</em></sub> ≈ 2.0 * <em>c</em><em>o</em><em>s</em>(3.0*<em>χ</em><sub>1</sub>) + <em>c</em><em>o</em><em>s</em>(3.0*<em>χ</em><sub>5</sub>) + <em>c</em><em>o</em><em>s</em>(3.0*<em>χ</em><sub>2</sub>)+</span>
<span
class="math display"><em>c</em><em>o</em><em>s</em>(3.0*<em>χ</em><sub>4</sub>) + 3.5 * <em>c</em><em>o</em><em>s</em>(2.0*<em>χ</em><sub>3</sub>) + 0.6 * <em>c</em><em>o</em><em>s</em>(3.0*<em>χ</em><sub>3</sub>) + 10.1</span></li>
<li>Euclidean length of the dihedral angles (degrees) defined as: <span
class="math display">$$\sqrt(\chi_{1}^{2} + \chi_{2}^{2} + \chi_{3}^{2}
+ \chi_{4}^{2} + \chi_{5}^{2})$$</span></li>
<li><span
class="math inline"><em>C</em><sub><em>α</em></sub> − <em>C</em><sub><em>α</em></sub></span>
distance (<span class="math inline">$\text{\normalfont\AA}$</span>)</li>
<li><span
class="math inline"><em>C</em><sub><em>β</em></sub> − <em>C</em><sub><em>β</em></sub></span>
distance (<span class="math inline">$\text{\normalfont\AA}$</span>)</li>
<li>The previous C’ and next N coordinates for both the proximal and
distal residues. These are needed to calculate the backbone dihedral
angles <span class="math inline"><em>ϕ</em></span>, <span
class="math inline"><em>ψ</em></span>.</li>
<li>Backbone dihedral angles <span class="math inline"><em>ϕ</em></span>
and <span class="math inline"><em>ψ</em></span>, when possible. Not all
structures are complete and in those cases the atoms needed may be
undefined. In this case the <span class="math inline"><em>ϕ</em></span>
and <span class="math inline"><em>ψ</em></span> angles are set to
-180°.</li>
</ul>
<p>The class also provides 3D rendering capabilities using the excellent
<a href="https://pyvista.org">PyVista</a> library, and can display
disulfides interactively in a variety of display styles:</p>
<ul>
<li><p>‘sb’ - Split Bonds style - bonds colored by their atom
type</p></li>
<li><p>‘bs’ - Ball and Stick style - split bond coloring with small
atoms</p></li>
<li><p>‘pd’ - Proximal/Distal style - bonds colored <em>Red</em> for
proximal residue and <em>Green</em> for the distal residue.</p></li>
<li><p>‘cpk’ - CPK style rendering, colored by atom type:</p>
<ul>
<li>Carbon - Grey</li>
<li>Nitrogen - Blue</li>
<li>Sulfur - Yellow</li>
<li>Oxygen - Red</li>
<li>Hydrogen - White</li>
</ul></li>
</ul>
Individual renderings can be saved to a file and animations can be
created. The <em>cpk</em> and <em>bs</em> styles are illustrated below:
<center>
<img src="logo_cpk.png" alt="cpk" /> <img src="logo_bs.png" alt="bs" />
</center>
<h2 id="disulfideloader"><a
href="https://suchanek.github.io/proteusPy/proteusPy/DisulfideLoader.html">DisulfideLoader</a></h2>
<p>This class represents the disulfide database itself and is its
primary means of accession. Instantiation takes 2 parameters:
<code>subset</code> and <code>verbose</code>. Given the size of the
database, one can use the <code>subset</code> parameter to load the
first 1000 disulfides into memory. This facilitates quicker development
and testing new functions. I recommend using at least a 16 GB machine to
work with the full dataset.</p>
<p>The entirety of the RCSB disulfide database is stored within the
class via a <a
href="%22https://suchanek.github.io/proteusPy/proteusPy/DisulfideList.html%22">DisulfideList</a>,
a <code>Pandas</code> .csv file, and a <code>dict</code> of indices
mapping the RCSB IDs into their respective list of disulfides. The
datastructures allow simple, direct and flexible access to the disulfide
structures contained within. This makes it possible to access the
disulfides by array index, RCSB structure ID or disulfide name.</p>
<p>Example:</p>
<div class="sourceCode" id="cb1"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>  <span class="im">import</span> proteusPy</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  <span class="im">from</span> proteusPy.Disulfide <span class="im">import</span> Disulfide</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  <span class="im">from</span> proteusPy.DisulfideLoader <span class="im">import</span> DisulfideLoader</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  <span class="im">from</span> proteusPy.DisulfideList <span class="im">import</span> DisulfideList</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>  SS1 <span class="op">=</span> DisulfideList([],<span class="st">&#39;tmp1&#39;</span>)</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>  SS2 <span class="op">=</span> DisulfideList([],<span class="st">&#39;tmp2&#39;</span>)</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>  PDB_SS <span class="op">=</span> DisulfideLoader(verbose<span class="op">=</span><span class="va">False</span>, subset<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>  <span class="co"># Accessing by index value:</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>  SS1 <span class="op">=</span> PDB_SS[<span class="dv">0</span>]</span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>  SS1</span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>  <span class="op">&lt;</span>Disulfide <span class="dv">4</span><span class="er">yys_22A_65A</span>, Source: <span class="dv">4</span><span class="er">yys</span>, Resolution: <span class="fl">1.35</span> Å<span class="op">&gt;</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>  <span class="co"># Accessing by PDB_ID returns a list of Disulfides:</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>  SS2 <span class="op">=</span> PDB_SS[<span class="st">&#39;4yys&#39;</span>]</span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>  SS2</span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>  [<span class="op">&lt;</span>Disulfide <span class="dv">4</span><span class="er">yys_22A_65A</span>, Source: <span class="dv">4</span><span class="er">yys</span>, Resolution: <span class="fl">1.35</span> Å<span class="op">&gt;</span>, </span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>  <span class="op">&lt;</span>Disulfide <span class="dv">4</span><span class="er">yys_56A_98A</span>, Source: <span class="dv">4</span><span class="er">yys</span>, Resolution: <span class="fl">1.35</span> Å<span class="op">&gt;</span>, </span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a>  <span class="op">&lt;</span>Disulfide <span class="dv">4</span><span class="er">yys_156A_207A</span>, Source: <span class="dv">4</span><span class="er">yys</span>, Resolution: <span class="fl">1.35</span> Å<span class="op">&gt;</span>]</span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a>  <span class="co"># Accessing individual disulfides by their name:</span></span>
<span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a>  SS3 <span class="op">=</span> PDB_SS[<span class="st">&#39;4yys_56A_98A&#39;</span>]</span>
<span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a>  SS3</span>
<span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a>  <span class="op">&lt;</span>Disulfide <span class="dv">4</span><span class="er">yys_56A_98A</span>, Source: <span class="dv">4</span><span class="er">yys</span>, Resolution: <span class="fl">1.35</span> Å<span class="op">&gt;</span></span>
<span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a>  <span class="co"># Finally, we can access disulfides by regular slicing:</span></span>
<span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a>  SSlist <span class="op">=</span> SS2[:<span class="dv">2</span>]</span>
<span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a>  [<span class="op">&lt;</span>Disulfide <span class="dv">4</span><span class="er">yys_56A_98A</span>, Source: <span class="dv">4</span><span class="er">yys</span>, Resolution: <span class="fl">1.35</span> Å<span class="op">&gt;</span>, </span>
<span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a>  <span class="op">&lt;</span>Disulfide <span class="dv">4</span><span class="er">yys_156A_207A</span>, Source: <span class="dv">4</span><span class="er">yys</span>, Resolution: <span class="fl">1.35</span> Å<span class="op">&gt;</span>]</span></code></pre></div>
<p>The class can also render Disulfides overlaid on a common coordinate
system to a pyVista window using the <a
href="https://suchanek.github.io/proteusPy/proteusPy/DisulfideLoader.html#DisulfideLoader.display_overlay">DisulfideLoader.display_overlay()</a>
method.</p>
<p><strong>NB:</strong> For typical usage one accesses the database via
the <code>Load_PDB_SS()</code> function. This function loads the
compressed database from its single source. Initializing a
<code>DisulfideLoader()</code> object will load the individual torsions
and disulfide .pkl files, builds the classlist structures, and writes
the completely built object to a single <code>.pkl</code> file. This
requires the raw .pkl files created by download process. These files are
contained in the repository <code>data</code> directory.</p>
<h2 id="turtle3d"><a
href="https://suchanek.github.io/proteusPy/proteusPy/turtle3D.html">turtle3D</a></h2>
<p>The <code>turtle3D</code> is an object that maintains a <em>local
coordinate system</em> in three dimensional space. This coordinate
system consists of:</p>
<ul>
<li>A Position Vector</li>
<li>A Heading Vector</li>
<li>A Left Vector</li>
<li>An Up Vector</li>
</ul>
<p>These vectors fully define the object’s position and orientation in a
<em>local</em> coordinate frame. The Turtle developed in
<code>proteusPy</code> is based on the excellent book by Abelson: <span
class="citation" data-cites="Abelson_DiSessa_1986">(Abelson and DiSessa
1986)</span>. The <a
href="%22https://suchanek.github.io/proteusPy/proteusPy/turtle3D.html#Turtle3D.to_local%22">to_local</a>
and <a
href="%22https://suchanek.github.io/proteusPy/proteusPy/turtle3D.html#Turtle3D.to_global%22">to_global</a>
methods convert between these two. These methods make it possible to
readily compare different disulfides by:</p>
<ol type="1">
<li>Orienting the turtle at the disulfide’s proximal residue in a
standard orientation.</li>
<li>Converting the global coordinates of the disulfide as read from the
RCSB into local coordinates.</li>
<li>Saving all of the local coordinates with the raw coordinates</li>
<li>Performing RMS distance and angle calculations</li>
</ol>
<p>The turtle has several molecule-specific functions including <a
href="%22https://suchanek.github.io/proteusPy/proteusPy/turtle3D.html#Turtle3D.orient_at_residue%22">orient_at_residue</a>
and <a
href="%22https://suchanek.github.io/proteusPy/proteusPy/turtle3D.html#Turtle3D.orient_from_backbone%22">orient_from_backbone</a>.</p>
<p>By implementing the functions <code>Move</code>, <code>Roll</code>,
<code>Yaw</code>, <code>Pitch</code> and <code>Turn</code> the turtle is
capable of movement in a three-dimensional space. See <span
class="citation" data-cites="Pabo_1986">(Pabo and Suchanek 1986)</span>
for more details.</p>
<h2 id="database-creation">Database Creation</h2>
<p>The following steps were performed to create the RCSB database:</p>
<ol type="1">
<li><p>Identify disulfide containing proteins in the <a
href="https://www.rcsb.org">RCSB</a>. I generated a query using the
web-based query tool for all proteins containing one or more disulfide
bond. The resulting file consisted of 35,819 IDs.</p></li>
<li><p>Download the structure files to disk. This resulted in the
program <a
href="https://github.com/suchanek/proteusPy/blob/master/programs/DisulfideDownloader.py">DisulfideDownloader.py</a>.
The download took approximately twelve hours.</p></li>
<li><p>Extract the disulfides from the downloaded structures. The
program <a
href="https://github.com/suchanek/proteusPy/blob/master/programs/DisulfideExtractor.py">DisulfideExtractor.py</a>
was used to extract disulfides from the individual structure files. This
seemingly simple task was complicated by several factors including:</p>
<ol type="1">
<li>Duplicate disulfides contained within a multi-chain protein
file.</li>
<li>Physically impossible disulfides, where the <span
class="math inline"><em>C</em><sub><em>α</em></sub> − <em>C</em><sub><em>α</em></sub></span>
distance is &gt; 8 <span
class="math inline">$\text{\normalfont\AA}$</span> .</li>
<li>Structures with disordered CYS atoms.</li>
</ol></li>
</ol>
<p>In the end I elected to only use a single example of a given
disulfide from a multi-chain entry, and removed any disulfides with a
<span
class="math inline"><em>C</em><sub><em>α</em></sub> − <em>C</em><sub><em>α</em></sub></span>
distance is &gt; 8 $$. This resulted in the current database consisting
of 35,808 structures and 120,494 disulfide bonds. To my knowledge this
is the only searchable database of disulfide bonds in existence.</p>
<h2 id="examples">Examples</h2>
<p>I illustrate a few use cases for the package below. See the notebooks
for more examples.</p>
<h3
id="find-the-lowest-and-highest-energy-disulfides-present-in-the-database.">Find
the lowest and highest energy disulfides present in the database.</h3>
<div class="sourceCode" id="cb2"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co"># default parameters will read from the package itself.</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>PDB_SS <span class="op">=</span> Load_PDB_SS(verbose<span class="op">=</span><span class="va">False</span>, subset<span class="op">=</span><span class="va">False</span>)</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="co"># display the best and worst SS</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>ssMin, ssMax <span class="op">=</span> PDB_SS.SSList.minmax_energy()</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>minmaxlist <span class="op">=</span> DisulfideList([ssMin, ssMax], <span class="st">&#39;mm&#39;</span>)</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>minmaxlist.display(style<span class="op">=</span><span class="st">&#39;bs&#39;</span>, light<span class="op">=</span><span class="va">True</span>)</span></code></pre></div>
<center>
<figure>
<img src="minmax.png" style="width:75.0%" alt="minmax" />
<figcaption aria-hidden="true">minmax</figcaption>
</figure>
</center>
<h3
id="find-disulfides-within-10-textnormalfontaa-rms-in-torsional-space-of-the-lowest-energy-structure.">Find
disulfides within 10 <span
class="math inline">$\text{\normalfont\AA}$</span> RMS in torsional
space of the lowest energy structure.</h3>
<p>In this example we load the disulfide database, find the disulfides
with the lowest and highest energies, and then find the nearest
conformational neighbors. Finally, we display the neighbors overlaid
against a common reference frame.</p>
<div class="sourceCode" id="cb3"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> proteusPy</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> proteusPy.DisulfideLoader <span class="im">import</span> DisulfideLoader</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> proteusPy.DisulfideList <span class="im">import</span> DisulfideList</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> proteusPy.Disulfide <span class="im">import</span> Disulfide</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>PDB_SS <span class="op">=</span> <span class="va">None</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>PDB_SS <span class="op">=</span> Load_PDB_SS(verbose<span class="op">=</span><span class="va">False</span>, subset<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>ss_list <span class="op">=</span> DisulfideList([], <span class="st">&#39;tmp&#39;</span>)</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a><span class="co"># We point to the complete list to search for lowest and highest energies.</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>sslist <span class="op">=</span> PDB_SS.SSList</span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>ssmin_enrg, ssmax_enrg <span class="op">=</span> PDB_SS.SSList.minmax_energy()</span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a><span class="co"># Make an empty list and find the nearest neighbors within 10 degrees avg RMS in</span></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a><span class="co"># sidechain dihedral angle space.</span></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>low_energy_neighbors <span class="op">=</span> DisulfideList([],<span class="st">&#39;Neighbors&#39;</span>)</span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>low_energy_neighbors <span class="op">=</span> ssmin_enrg.Torsion_neighbors(sslist, <span class="dv">10</span>)</span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a><span class="co"># Display the number found, and then display them overlaid onto their common reference frame.</span></span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a>tot <span class="op">=</span> low_energy_neighbors.length</span>
<span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a>low_energy_neighbors.display_overlay()</span></code></pre></div>
<p>18</p>
<center>
<figure>
<img src="min_overlay.png" alt="min_overlay" />
<figcaption aria-hidden="true">min_overlay</figcaption>
</figure>
</center>
<h3 id="plotting-disulfide-class-distributions">Plotting Disulfide Class
Distributions</h3>
<p>The package includes the <a
href="https://suchanek.github.io/proteusPy/proteusPy/DisulfideClass_Constructor.html">DisulfideClassConstructer</a>
class, which is used to create and manage Disulfide binary and sextant
classes.</p>
<h3 id="the-future">The Future</h3>
<ul>
<li><p>I continue to explore disulfide structural classes using the
sextant class approach. This offers much higher class resolution than
the binary approach described by <span class="citation"
data-cites="Schmidt_2006">(Schmidt 2006)</span> and reveals subgroups
within the broad class. I’d also like to explore the catalytic and
allosteric classes in more detail to look for common structural
elements.</p></li>
<li><p>I also intend to deploy a Disulfide Database browser for
exploration and analysis. This is ongoing.</p></li>
</ul>
<h3 id="misc">Misc</h3>
<p><em>Developer’s Notes:</em> The .pkl files needed to instantiate this
class and save it into its final .pkl file are defined in the <a
href="%22https://suchanek.github.io/proteusPy/proteusPy/data.html%22">proteusPy.data</a>
class and should not be changed. Upon initialization the class will load
them and initialize itself.</p>
<p><em>NB:</em> <span class="citation" data-cites="proteusPy">(Suchanek
2023b)</span> relies on my <a
href="https://github.com/suchanek/biopython">fork</a> of the <a
href="https://biopython.org">Biopython</a> Python package to download
and build the database, (<a href="https://github.com/suchanek/biopython"
class="uri">https://github.com/suchanek/biopython</a>). As a result, one
can’t download and create the database locally unless the BioPython
patch is applied. The changed python file is in the repo’s data
directory - <code>parse_pdb_header.py</code>. Database analysis is
unaffected without the patch. Also, if you’re running on an M-series Mac
then it’s important to install Biopython first, since the generic
release won’t build on the M1.</p>
<h3 class="unnumbered" id="bibliography">Bibliography</h3>
<div id="refs" class="references csl-bib-body hanging-indent"
role="list">
<div id="ref-Abelson_DiSessa_1986" class="csl-entry" role="listitem">
Abelson, Harold, and Andrea A. DiSessa. 1986. <em>Turtle Geometry: The
Computer as a Medium for Exploring Mathematics</em>. MIT Press.
</div>
<div id="ref-Pabo_1986" class="csl-entry" role="listitem">
Pabo, C. O., and E. G. Suchanek. 1986. <span>“Computer-Aided
Model-Building Strategies for Protein Design.”</span>
<em>Biochemistry</em> 25 (20): 5987–91. <a
href="https://doi.org/10.1021/bi00368a023">https://doi.org/10.1021/bi00368a023</a>.
</div>
<div id="ref-Schmidt_2006" class="csl-entry" role="listitem">
Schmidt, Brian. 2006. <span>“Multiple Disulfide-Bonded States of Native
Proteins: Estimate of Number Using Probabilities of Disulfide Bond
Formation.”</span> <em>Biochemistry</em> 45 (24): 7429–74334. <a
href="https://doi.org/10.1021/bi0603064">https://doi.org/10.1021/bi0603064</a>.
</div>
<div id="ref-API" class="csl-entry" role="listitem">
Suchanek, Eric G. 2023a. <span>“proteusPy API.”</span> <em>GitHub
Documents</em>. GitHub. <a
href="https://suchanek.github.io/suchanek/proteusPy/proteusPy.html">https://suchanek.github.io/suchanek/proteusPy/proteusPy.html</a>.
</div>
<div id="ref-proteusPy" class="csl-entry" role="listitem">
———. 2023b. <span>“proteusPy: A Package for Modeling and Analyzing
Proteins of Known Structure.”</span> <em>GitHub Repository</em>. GitHub.
<a
href="https://github.com/suchanek/proteusPy">https://github.com/suchanek/proteusPy</a>.
</div>
</div>
